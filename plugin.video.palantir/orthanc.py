import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IGJhc2U2NAppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBnbG9iCmltcG9ydCBzcWxpdGUzCmltcG9ydCBzeXMKaW1wb3J0IHVuaWNvZGVkYXRhCmltcG9ydCB1cmxwYXJzZQpmcm9tIHVybHBhcnNlIGltcG9ydCBwYXJzZV9xc2wKaWYgOTcgLSA5NzogT09vT29PMG8wbzBPTyArIElJSUkgLiBJaSAlIG9PTwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IHhibWMKaW1wb3J0IHhibWNhZGRvbgppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3BsdWdpbgppbXBvcnQgYW5vcgppbXBvcnQgdHJhY2ViYWNrCmlmIDEgLSAxOiBJSSAtIGlpSUlpMWkxSWlpIC0gSTEgLSBJSW9vb08wb29PMG9vICogT09PCmltcG9ydCBpdGhpbAppZiA1IC0gNTogaTFpSTEgKyBvMDBvTzBvbzBPME8wIC0gaWkxSTFpaTFJaUlpMSAlIG9vb09vTyAtIElpSUkxSWlJCl9fc2V0dGluZ3NfXyA9IHhibWNhZGRvbiAuIEFkZG9uICggaWQgPSAicGx1Z2luLnZpZGVvLnBhbGFudGlyIiApCmlmIDg1IC0gODU6IG9vCmRlZiBPb09vT28gKCB2YWx1ZSApIDoKIGlmIG5vdCB2YWx1ZSBvciB2YWx1ZSA9PSAnbm9uZScgOgogIGlmIDczIC0gNzM6IElpMUkgLyBJMUlpSTFJSUkxMWkgKyBvb09vb08wT09PICUgSWlJSTFpMUkgLyBvbzBvICUgSWlJSTFpMUkKICByZXR1cm4gJ2dvbGQnCiBlbHNlIDoKICBpZiA2NyAtIDY3OiBpMWlJMSArIGkxaUkxICUgb28wbyAqIGlpMUkxaWkxSWlJaTEKICB0cnkgOgogICByZXR1cm4gdmFsdWUgLiBzcGxpdCAoICddJyApIFsgMSBdIC4gc3BsaXQgKCAnWycgKSBbIDAgXQogIGV4Y2VwdCA6CiAgIGlmIDg1IC0gODU6IElJb29vTzBvb08wb28gLiBJaUlJMWkxSQogICByZXR1cm4gdmFsdWUKICAgaWYgOCAtIDg6IG9PTyAqIElpCiAgIGlmIDI2IC0gMjY6IG8wMG9PMG9vME8wTzAgLSBJSW9vb08wb29PMG9vCnRyeSA6CiBPME8wMDAwMDBPbyA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYWluVmlldycgKSApCiBJMUlJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25WaWV3JyApICkKIEkxaUkxaWlpSWlJMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdGYXZWaWV3JyApICkKIE9PME8wID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ1BlbGlzVmlldycgKSApCiBpaTFpMWlpMUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRXBpc29kZXNWaWV3JyApICkKIG8wbzAwMDBPMCA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdMaXN0VmlldycgKSApCiBvTzBPMG8wb29PID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ1Nlcmllc1ZpZXcnICkgKQogaTFJaUkxaWlpID0gT29Pb09vICggeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01lbnVDb2xvcicgKSApICkKIGlpaTFJSSA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdUYWdDb2xvcicgKSApICkKIEkxMTFpMTFJMUkgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnU2VydmVyQ29sb3InICkgKSApCiBpMTFpaSA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdBbHRDb2xvcicgKSApICkKIG8wTzBvTzAgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnQXVkaW9Db2xvcicgKSApICkKIElJSWkxMTExaUkgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnQ2F0ZWdvcnlDb2xvcicgKSApICkKIGlpSUlpaWlJMTEgPSBPb09vT28gKCB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRGF0ZUNvbG9yJyApICkgKQogTzAwTzAwMCA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdDYXBpQ29sb3InICkgKSApCiBPME9PTyA9IE9vT29PbyAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdQZWxpQ29sb3InICkgKSApCiBpZiA0IC0gNDogb29Pb29PME9PTwogaWYgbm90IG8wbzAwMDBPMCBvciBvMG8wMDAwTzAgPT0gJ25vbmUnIDoKICBvMG8wMDAwTzAgPSAnNTAyJwogaWYgbm90IG9PME8wbzBvb08gb3Igb08wTzBvMG9vTyA9PSAnbm9uZScgOgogIG9PME8wbzBvb08gPSAnNTE1JwogaWYgbm90IE8wTzAwMDAwME9vIG9yIE8wTzAwMDAwME9vID09ICdub25lJyA6CiAgTzBPMDAwMDAwT28gPSAnNTAwJwogaWYgbm90IEkxSUkgb3IgSTFJSSA9PSAnbm9uZScgOgogIEkxSUkgPSAnNTAwJwogaWYgbm90IEkxaUkxaWlpSWlJMSBvciBJMWlJMWlpaUlpSTEgPT0gJ25vbmUnIDoKICBJMWlJMWlpaUlpSTEgPSAnNTAwJwogaWYgbm90IE9PME8wIG9yIE9PME8wID09ICdub25lJyA6CiAgT08wTzAgPSAnNTAyJwogaWYgbm90IGlpMWkxaWkxSSBvciBpaTFpMWlpMUkgPT0gJ25vbmUnIDoKICBpaTFpMWlpMUkgPSAnNTAyJwpleGNlcHQgOgogeGJtYyAuIGxvZyAoICdFUlJPUiBQcm9jZXNpbmcgaW5pdGlhbCBjb25maWd1cmF0aW9uJyApCiB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKIGlmIDUzIC0gNTM6IG9vT29vTzBPT08KIGlmIDg1IC0gODU6IG9vT29vTzBPT08gKyBJSUlJCiBpZiAzMiAtIDMyOiBJaUlJMWkxSSAtIGlpSUlpMWkxSWlpICogSUkgKyBPT08gLSBpaUlJaTFpMUlpaQp0cnkgOgogaW1wb3J0IGpzb24KZXhjZXB0IDoKIGltcG9ydCBzaW1wbGVqc29uIGFzIGpzb24KIGlmIDI4IC0gMjg6IElJSUkKZGVmIE9vb29PME8gKCBzICkgOgogaWYgOTUgLSA5NTogSWlJSTFJaUkgJSBJMUlpSTFJSUkxMWkKIHJldHVybiAnJyAuIGpvaW4gKCAoIGMgZm9yIGMgaW4gdW5pY29kZWRhdGEgLiBub3JtYWxpemUgKCAnTkZEJyAsIHMgKSBpZiB1bmljb2RlZGF0YSAuIGNhdGVnb3J5ICggYyApICE9ICdNbicgKSApCiBpZiAzOSAtIDM5OiBJSW9vb08wb29PMG9vCiBpZiA0MCAtIDQwOiBpaTFJMWlpMUlpSWkxICogb28gLyBJMQpkZWYgSTFpSUkxaTFpICggYmFzICkgOgogaXRoaWwgLiBpMSAoIGJhcyApCiBpZiA0MSAtIDQxOiBpMWlJMSAtIE9PTyAlIG9vT29vTzBPT08gLSBJSW9vb08wb29PMG9vICsgb29Pb29PME9PTwogaWYgMzMgLSAzMzogb28gKyBvT08gLyBvb09vb08wT09PICsgSWkgKyBpaTFJMWlpMUlpSWkxIC4gaWkxSTFpaTFJaUlpMQpkZWYgSUlJMTFJaSAoICkgOgogaW1wb3J0IHhibWMKIG9PMCA9IHhibWMgLiBLZXlib2FyZCAoICIiICkKIG9PMCAuIGRvTW9kYWwgKCApCiBpMUlpSTExaTFJaWkgPSAnJwogaWYgKCBvTzAgLiBpc0NvbmZpcm1lZCAoICkgKSA6CiAgaTFJaUkxMWkxSWlpID0gb08wIC4gZ2V0VGV4dCAoICkKIHJldHVybiBpMUlpSTExaTFJaWkKIGlmIDcxIC0gNzE6IE9Pb09vTzBvMG8wT08gKiBvT08gKiBJaQogaWYgOTIgLSA5MjogbzAwb08wb28wTzBPMCAuIG9vMG8gKiBPT08gKiBJaSAvIG9vCiBpZiAxMDAgLSAxMDA6IEkxICogT09vT29PMG8wbzBPTwpvb29PT08gPSAndXRmLTgnCmlpID0gJy50bXAnCm9PT08wTzAgPSAnYWN0aW9uJwpPT08wME9vbzAgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkKSWlJaSA9IE9PTzAwT29vMCAuIGdldEFkZG9uSW5mbyAoICd2ZXJzaW9uJyApCkkxaTExaUlpMTFJaTFJMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggT09PMDBPb28wIC4gZ2V0QWRkb25JbmZvICggJ3BhdGgnICkgLiBkZWNvZGUgKCBvb29PT08gKSApCm9Pb08gPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIE9PTzAwT29vMCAuIGdldEFkZG9uSW5mbyAoICdwcm9maWxlJyApIC4gZGVjb2RlICggb29vT09PICkgKQppaWkxMWkxSUlpID0gb3MgLiBwYXRoIC4gam9pbiAoIEkxaTExaUlpMTFJaTFJMSAsICJyZXNvdXJjZXMvbWVkaWEvIiApCmlmIDQgLSA0OiBvbzBvICUgSWlJSTFJaUkKaTExaSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggJ0pYTXZiVzl5YVdFbGN3PT0nICkgJSAoIG9Pb08gLCBpaSApCmlJaUlpaWlJaTFJMUkgPSAnJXMvYnJlZS5mYXYnICUgeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2ZhdlBhdGgnICkgKQppaUkxSWlJMWlpSUkxID0gJyVzL2JyZWUuZmF2ZCcgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlJSWlJaUkxSTFJID0gJyVzL2JyZWUuZmF2cCcgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlpSWlpMUlJaTFJID0gJyVzL2JyZWUuZmF2cycgJSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnZmF2UGF0aCcgKSApCmlJaWlJaTFpMWkxaTEgPSAnJXMvYnJlZS5kd24nICUgeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2ZhdlBhdGgnICkgKQpJSWkxMUlpMSA9IFsgInNlcmllX2lkIiAsICJub21icmUiICwgImxpbmsiICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwgImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgImhhc19jb250ZW50IiAsICJhdWRpbyIgLAogImNhdGVnb3J5IiAsICJkYXRlKHVwZGF0ZWQpIiAsICJ0bWRiIiBdCk8wT28wb09PID0gWyAicGVsaV9pZCIgLCAibm9tYnJlIiAsICJsaW5rIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICInTiciICwgImF1ZGlvIiAsICJjYXRlZ29yeSIgLAogImRhdGUodXBkYXRlZCkiICwgImFjdGl2ZSIgXQppaUkxMTExSUlpaUkgPSBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwKICJzaW5vcHNpcyIgLAogImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgInVwZGF0ZWQiICwgInB1bnRvcyIgLCAiY2F0ZWdvcnkiICwgImFjdGl2ZSIgLCAidG1kYiIgLAogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdCm9vbzBvb09vTzBPbyA9IDIwMApJSUlpMTEgPSAiLCBDQVNFIFdoZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDE5MiBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDE5OCBUaGVuICdBJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwNCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwNyBUaGVuICdJJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwMyBUaGVuICdFJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxNyBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIyMCBUaGVuICdVJ1doZW4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIxNCBUaGVuICdPJyBXSEVOIHVuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSA2NSBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDkwIFRIRU4gdXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpIEVMU0UgJyEwLTkuLicgIEVORCBhbGZhICIKSWlpMSA9ICdzZXJpZXMnCklpSUlpMUkxSWkgPSAncGVsaXNHcm91cCcKaWYgOTcgLSA5NzogSUlJSSAuIElpMUkgKiBvbwppZiBub3Qgb3MgLiBwYXRoIC4gZXhpc3RzICggb09vTyApIDoKIHRyeSA6CiAgb3MgLiBtYWtlZGlycyAoIG9Pb08gKQogZXhjZXB0IDoKICBwYXNzCkkxaUkxMUkgPSBzeXMgLiBhcmd2IFsgMCBdCmlpSUlpaUlJMSA9IGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKQp0cnkgOgogaWYgNjYgLSA2NjogaTFpSTEgJSBJMSAqIEkxCiBPT28wb28gPSBhbm9yIC4gSTFpMUkxaUkxMUkgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoCiAnYzJWc1pXTjBJR2xrVUdGMGFDQm1jbTl0SUhCaGRHZ2dkMmhsY21VZ2MzUnlVR0YwYUQwaWNHeDFaMmx1T2k4dmNHeDFaMmx1TG5acFpHVnZMbkJoYkdGdWRHbHlMeUk9JyApICkgWyAxIF0gWyAwIF0gWyAwIF0KZXhjZXB0IDoKIE9PbzBvbyA9IDAKIGlmIDYgLSA2OiBJaUlJMWkxSSAvIG9PTyAvIElpMUkKIGlmIDEwIC0gMTA6IG9vb09vTyArIG9vICogb28KZGVmIG9vbzAgKCBwYXRoICwgdHlwZSA9ICdyJyApIDoKIG9PT29PMDBvTzAgPSBvcGVuICggc3RyICggcGF0aCApICwgdHlwZSApCiBPME9PbzBvbzAwTzBPID0gb09Pb08wMG9PMCAuIHJlYWQgKCApCiBvT09vTzAwb08wIC4gY2xvc2UgKCApCiByZXR1cm4gTzBPT28wb28wME8wTwogaWYgNzkgLSA3OTogSWkxSSArIE9PTyArIElpSUkxSWlJIC0gSUkgLiBpaTFJMWlpMUlpSWkxIC8gSUkKIGlmIDIzIC0gMjM6IG8wMG9PMG9vME8wTzAgLSBpaTFJMWlpMUlpSWkxIC4gSWkxSSArIG9vb09vTwppZiBvcyAuIHBhdGggLiBleGlzdHMgKCBpSWlJaWlpSWkxSTFJICkgPT0gVHJ1ZSA6CiBpMTFpaWkgPSBqc29uIC4gbG9hZHMgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9vbzAgKCBpSWlJaWlpSWkxSTFJICkgKSApCmVsc2UgOgogaTExaWlpID0geyB9CiBpZiA3OCAtIDc4OiBJMUlpSTFJSUkxMWkgKyBPT08gLSBvT08KaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaUlJaUlpSTFJMUkgKSA9PSBUcnVlIDoKIElpaUlpMTFpSUlJMSA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGlJSWlJaUkxSTFJICkgKSApCmVsc2UgOgogSWlpSWkxMWlJSUkxID0geyB9CiBpZiA0MiAtIDQyOiBJaTFJICogb29vT29PIC4gSWlJSTFJaUkgKyBJSUlJICogT09vT29PMG8wbzBPTwppZiBvcyAuIHBhdGggLiBleGlzdHMgKCBpaUkxSWlJMWlpSUkxICkgPT0gVHJ1ZSA6CiBvb0lJSUkgPSBqc29uIC4gbG9hZHMgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9vbzAgKCBpaUkxSWlJMWlpSUkxICkgKSApCmVsc2UgOgogb29JSUlJID0geyB9CiBpZiA1NiAtIDU2OiBJaUlJMWkxSSAlIElpSUkxSWlJIC4gSUkgLyBPT08KaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggaWlJaWkxSUlpMUkgKSA9PSBUcnVlIDoKIGkxMSA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGlpSWlpMUlJaTFJICkgKSApCmVsc2UgOgogaTExID0geyB9CiBpZiA4IC0gODogSWlJSTFJaUkgKyBJaTFJICogb09PIC0gSWlJSTFpMUkgLSBpaUlJaTFpMUlpaQogaWYgMTQgLSAxNDogb28gLyBJaTFJIC8gSWlJSTFpMUkgLyBJSSAvIG9PTyAvIG8wMG9PMG9vME8wTzAKZGVmIE8wMDAwMDBPME9vT28gKCBub21icmUgLCBjYXJhdHVsYSA9IE5vbmUgLCBwb3N0ZXIgPSBOb25lICwgdmlkZW8gPSB7IH0gLCBpc1BsYXlhYmxlID0gRmFsc2UgKSA6CiBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gbm9tYnJlICwgaWNvbkltYWdlID0gY2FyYXR1bGEgKQogaWYgY2FyYXR1bGEgYW5kIHBvc3RlciA6CiAgT29PTzBPTzBvME8gLiBzZXRBcnQgKCBJSWlpSUkxMTFpICggY2FyYXR1bGEgLCBwb3N0ZXIgKSApCiBpZiBsZW4gKCB2aWRlbyApID4gMCA6CiAgT29PTzBPTzBvME8gLiBzZXRJbmZvICggJ3ZpZGVvJyAsIHZpZGVvICkKIGlmIGlzUGxheWFibGUgOgogIE9vT08wT08wbzBPIC4gc2V0UHJvcGVydHkgKCAnSXNQbGF5YWJsZScgLCAndHJ1ZScgKQogcmV0dXJuIE9vT08wT08wbzBPCiBpZiAxMSAtIDExOiBJaUlJMWkxSQpkZWYgSUkxSWkxMWkxSWkxSSAoIHNhZ2FOYW1lICkgOgogSWkxMWkxaUlpSUkxMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdmYXZTYWdhJyApICkKIGlmIDYyIC0gNjI6IGlpSUlpMWkxSWlpIC8gaTFpSTEgJSBJSUlJCiBPbzAwbzBPMG9PbzAgPSBbIF0KIGlmIElpMTFpMWlJaUlJMTEgPT0gJycgb3IgSWkxMWkxaUlpSUkxMSA9PSAnZmFsc2UnIDoKICBPbzAwbzBPMG9PbzAgPSBbICggJ0HDsWFkaXIgYWwgTWVudScgLCAnWEJNQy5SdW5QbHVnaW4oJXM/YWN0aW9uPXRvX3NhZ2Emc2FnYT0lcyknICUgKAogSTFpSTExSSAsIHNhZ2FOYW1lICkgKSBdCiBlbGlmIHNhZ2FOYW1lID09IElpMTFpMWlJaUlJMTEgOgogIE9vMDBvME8wb09vMCA9IFsgKCAnRWxpbWluYXIgZGVsIE1lbnUnICwgJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj10b19zYWdhJnNhZ2E9ZmFsc2UpJyAlICgKIEkxaUkxMUkgKSApIF0KIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDEwMCAtIDEwMDogSUkgKiBPT29Pb08wbzBvME9PICsgT09PICogaWkxSTFpaTFJaUlpMSAqIE9PTwpkZWYgTzBvbzAwICggc2FnYU5hbWUgKSA6CiBpZiA4MCAtIDgwOiBJaUlJMUlpSSAqIGlpSUlpMWkxSWlpIC8gb09PIC8gSTFJaUkxSUlJMTFpIC8gT09PICsgbzAwb08wb28wTzBPMAogaWYgc2FnYU5hbWUgOgogIF9fc2V0dGluZ3NfXyAuIHNldFNldHRpbmcgKCAnZmF2U2FnYScgLCBzYWdhTmFtZSApCiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKICBpZiA4MSAtIDgxOiBJSSAtIGlpMUkxaWkxSWlJaTEgLyBJaTFJICsgb29vT29PCiAgaWYgNTEgLSA1MTogSWlJSTFJaUkgKyBJSSArIG9vMG8gLiBJSQogIGlmIDg2IC0gODY6IE9PTyAvIElpSUkxSWlJICogSWlJSTFJaUkgKiBvMDBvTzBvbzBPME8wCiAgaWYgOTAgLSA5MDogSTEgLSBvbzBvICUgT09vT29PMG8wbzBPTyAtIE9PTyAuIGkxaUkxIC8gSUlJSQpkZWYgSWlvb28gKCBpZEZpbGUgLCBpZFBhdGggLCBmaWxlTmFtZSAsIHRvX3dhdGNoICkgOgogaWYgdG9fd2F0Y2ggOgogIE9vMDBvME8wb09vMCA9ICggJ01hcmNhciBjb21vIHZpc3RvJyAsICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249dG9fd2F0Y2gmaWRGaWxlPSVzJmlkUGF0aD0lcyZmaWxlTmFtZT0lcyknICUgKAogSTFpSTExSSAsIGlkRmlsZSAsIGlkUGF0aCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggZmlsZU5hbWUgKSApICkKIGVsc2UgOgogIGlmIDEwIC0gMTA6IElJSUkKICBPbzAwbzBPMG9PbzAgPSAoICdNYXJjYXIgY29tbyBubyB2aXN0bycgLAogJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj10b191bndhdGNoJmlkRmlsZT0lcyZpZFBhdGg9JXMmZmlsZU5hbWU9JXMpJyAlICgKIEkxaUkxMUkgLCBpZEZpbGUgLCBpZFBhdGggLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGZpbGVOYW1lICkgKSApCiByZXR1cm4gT28wMG8wTzBvT28wCiBpZiA3MiAtIDcyOiBvT08gLSBPT08gLiBvb29Pb08KIGlmIDYwIC0gNjA6IG9vb09vTyAvIGlpMUkxaWkxSWlJaTEgKiBvb29Pb08KZGVmIGkxSUkxICggaWRGaWxlICwgaWRQYXRoICwgZmlsZU5hbWUgLCB0b193YXRjaCApIDoKIGZpbGVOYW1lID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBmaWxlTmFtZSApCiBpZiB0b193YXRjaCA6CiAgaWlJaUlpaWlJID0gMQogZWxzZSA6CiAgaWlJaUlpaWlJID0gMAogaWYgaW50ICggaWRGaWxlICkgPiAwIDoKICBJMUkgPSAidXBkYXRlIGZpbGVzIHNldCBwbGF5Q291bnQ9JXMgd2hlcmUgaWRGaWxlPSVzIEFORCBpZFBhdGg9JXMgQU5EIHN0ckZpbGVuYW1lPSclcyciICUgKAogaWlJaUlpaWlJICwgaWRGaWxlICwgaWRQYXRoICwgZmlsZU5hbWUgKQogZWxzZSA6CiAgSTFJID0gImluc2VydCBpbnRvIGZpbGVzIChpZEZpbGUsIGlkUGF0aCwgc3RyRmlsZW5hbWUsIHBsYXlDb3VudCwgbGFzdFBsYXllZCkgVkFMVUVTICglcywgJXMsICclcycsICVzLCAlcykiICUgKAogJyhzZWxlY3QgbWF4IChpZEZpbGUpICsxIGZyb20gZmlsZXMpJyAsIGlkUGF0aCAsIGZpbGVOYW1lICwgaWlJaUlpaWlJICwgImRhdGV0aW1lKCdub3cnKSIgKQogYW5vciAuIEkxaTFJMWlJMTFJICggSTFJICkKIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICJYQk1DLkNvbnRhaW5lci5SZWZyZXNoIiApCiBpZiA3OSAtIDc5OiBJSQogaWYgMTggLSAxODogSUkgKyBJMSAlIGlpSUlpMWkxSWlpIC0gSWkgKiBJSUlJIC4gSWlJSTFpMUkKZGVmIE8wTzAwMG8gKCApIDoKIGlJSWlJSUkxaSA9IFsgJyVzL2JyZWUuZmF2JyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZkJyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZwJyAlIG9Pb08gLCAnJXMvYnJlZS5mYXZzJyAlIG9Pb08gLCAnJXMvYnJlZS5kd24nICUgb09vTyAsICclcy9zZXR0aW5ncy54bWwnICUgb09vTyBdCiBpZiA5IC0gOTogaTFpSTEgLiBpMWlJMQogaWYgMSAtIDE6IGlpSUlpMWkxSWlpIC4gb29Pb29PME9PTyAvIG9vT29vTzBPT08KIGlmIDgyIC0gODI6IElpSUkxSWlJIC4gSUkgLiBJaUlJMWkxSSAtIEkxSWlJMUlJSTExaQogSUlJSUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnY29weVBhdGgnICkgKQogaW1wb3J0IHppcGZpbGUKIGltcG9ydCB0aW1lCiBpZiBJSUlJSSA6CiAgSUlJSUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIElJSUlJICkKICBpZiAzOSAtIDM5OiBvT08gKiBJSUlJICUgSWkxSSAtIG9vMG8gLyBPT29Pb08wbzBvME9PCiAgT09vMG8gPSAiJXMvUGFsYW50aXJfQmFja3VwXyVzLnppcCIgJSAoIElJSUlJICwgdGltZSAuIHN0cmZ0aW1lICggIiVkLSVtLSVZXyVIJU0lUyIgKSApCiAgT29PME8gPSB6aXBmaWxlIC4gWmlwRmlsZSAoIE9PbzBvICwgInciICkKICBmb3IgT29Pb09PbzBPTzAgaW4gaUlJaUlJSTFpIDoKICAgaWYgb3MgLiBwYXRoIC4gZXhpc3RzICggT29Pb09PbzBPTzAgKSA6CiAgICBvb28wMG8wTzBvMG8gPSBPb09vT09vME9PMCAuIHNwbGl0ICggJy8nICkKICAgIE9vTzBPIC4gd3JpdGUgKCBPb09vT09vME9PMCAsIG9vbzAwbzBPMG8wbyBbIGxlbiAoIG9vbzAwbzBPMG8wbyApIC0gMSBdICwgY29tcHJlc3NfdHlwZSA9IHppcGZpbGUgLiBaSVBfREVGTEFURUQgKQogIE9vTzBPIC4gY2xvc2UgKCApCiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ0NvcGlhIFJlYWxpemFkYSBlbiA6ICVzJyAlIE9PbzBvICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgMTAwMDAgKQogZWxzZSA6CiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ0VzdGFibGV6Y2EgbGEgcnV0YSBwYXJhIGxhIGNvcGlhJyAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDcwMDAgKQogIGlmIDQyIC0gNDI6IGkxaUkxIC8gaTFpSTEgKyBvb29Pb08gLyBvMDBvTzBvbzBPME8wCiAgaWYgOTAgLSA5MDogb28wbyAqIG9vMG8gJSBpaTFJMWlpMUlpSWkxCiAgaWYgODYgLSA4NjogT09vT29PMG8wbzBPTyAuIElpSUkxSWlJIC0gT09PIC0gSUlJSQpkZWYgb09Pb09PICggKSA6CiBpSUkxaUlJaUlpMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ2NvcHlQYXRoJyApICkKIElpSTFpSSA9IHhibWNndWkgLiBEaWFsb2cgKCApCiB0cnkgOgogIElJSUlJID0gSWlJMWlJIC4gYnJvd3NlICggdHlwZSA9IDEgLCBoZWFkaW5nID0gX19zZXR0aW5nc19fIC4gZ2V0TG9jYWxpemVkU3RyaW5nICggMzQwMDMgKSAsCiBzaGFyZXMgPSAnZmlsZXMnICwgbWFzayA9ICcuemlwJyAsIHVzZVRodW1icyA9IEZhbHNlICwgdHJlYXRBc0ZvbGRlciA9IEZhbHNlICwgZGVmYXVsdHQgPSBpSUkxaUlJaUlpMTFJICwKIGVuYWJsZU11bHRpcGxlID0gRmFsc2UgKQogZXhjZXB0IFR5cGVFcnJvciA6CiAgSUlJSUkgPSBJaUkxaUkgLiBicm93c2UgKCB0eXBlID0gMSAsIGhlYWRpbmcgPSBfX3NldHRpbmdzX18gLiBnZXRMb2NhbGl6ZWRTdHJpbmcgKCAzNDAwMyApICwKIHNfc2hhcmVzID0gJ2ZpbGVzJyAsIG1hc2sgPSAnLnppcCcgLCB1c2VUaHVtYnMgPSBGYWxzZSAsIHRyZWF0QXNGb2xkZXIgPSBGYWxzZSAsCiBkZWZhdWx0dCA9IGlJSTFpSUlpSWkxMUkgLAogZW5hYmxlTXVsdGlwbGUgPSBGYWxzZSApCiBpZiAnUGFsYW50aXJfQmFja3VwXycgaW4gSUlJSUkgOgogIGltcG9ydCB6aXBmaWxlCiAgaUkgPSB6aXBmaWxlIC4gWmlwRmlsZSAoIElJSUlJICwgJ3InICkKICBpSSAuIGV4dHJhY3RhbGwgKCBvT29PICkKICBpSSAuIGNsb3NlICggKQogIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsICdDb3BpYSBSZXN0YXVyYWRhIDogJXMnICUgSUlJSUkgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX0lORk8gLCA3MDAwICkKIGVsaWYgSUlJSUkgLiBlbmRzd2l0aCAoICcuemlwJyApIDoKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnRWwgZmljaGVybyBkZWJlIHNlciBQYWxhbnRpcl9CYWNrdXBfLi4uIEludmFsaWRvICVzJyAlIElJSUlJICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9XQVJOSU5HICwgNzAwMCApCiAgaWYgNCAtIDQ6IElpSUkxaTFJIC8gT09vT29PMG8wbzBPTyAtIElpMUkgLSBJMUlpSTFJSUkxMWkKICBpZiAyMiAtIDIyOiBvbzBvICogb09PIC4gSWkxSSAtIGkxaUkxIC0gSWkgLSBvMDBvTzBvbzBPME8wCiAgaWYgMjMgLSAyMzogaWkxSTFpaTFJaUlpMSArIG9vT29vTzBPT08gKyBPT29Pb08wbzBvME9PCiAgaWYgNjMgLSA2MzogSWkxSSAtIElpMUkgKiBpMWlJMSAuIElpIC0gbzAwb08wb28wTzBPMAogIGlmIDIgLSAyOiBvb29Pb08gKyBpaTFJMWlpMUlpSWkxIC4gSWlJSTFJaUkgJSBpMWlJMQpkZWYgSWlJSWlJICggaWQgLCB0eXBlICwgbm9tYnJlICwgdXJsICwgY2FyYXR1bGEgLCBwb3N0ZXIgLCByZW1vdmUgKSA6CiB0cnkgOgogIG5vbWJyZSA9IG5vbWJyZSAuIGVuY29kZSAoICd1dGYtOCcgLCAnaWdub3JlJyApCiBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgcGFzcwogIGlmIDcyIC0gNzI6IElJb29vTzBvb08wb28KIGlmIG5vdCBjYXJhdHVsYSA6CiAgY2FyYXR1bGEgPSAnTm9uZScKIGlmIG5vdCBwb3N0ZXIgOgogIHBvc3RlciA9ICdOb25lJwogaWYgbm90IHJlbW92ZSA6CiAgT28wMG8wTzBvT28wID0gKCAnRGVzY2FyZ2EgZW4gUGFsYW50aXInICwKICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249YWRkRG93bmxvYWQmaWQ9JXMmbm9tYnJlPSVzJnVybD0lcyZjYXJhdHVsYT0lcyZwb3N0ZXI9JXMmdHlwZT0lcyknICUgKAogSTFpSTExSSAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIHVybCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggY2FyYXR1bGEgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggcG9zdGVyICkgLCB0eXBlICkgKQogZWxzZSA6CiAgT28wMG8wTzBvT28wID0gKCAnQm9ycmFyIGRlc2NhcmdhJyAsCiAnWEJNQy5SdW5QbHVnaW4oJXM/YWN0aW9uPXJtRG93bmxvYWQmaWQ9JXMmbm9tYnJlPSVzJmNhcmF0dWxhPSVzJnBvc3Rlcj0lcyZ0eXBlPSVzKScgJSAoCiBJMWlJMTFJICwgaWQgLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIG5vbWJyZSApICwKIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggY2FyYXR1bGEgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggcG9zdGVyICkgLCB0eXBlICkgKQogIGlmIDY0IC0gNjQ6IE9Pb09vTzBvMG8wT08gLiBJSSAlIElJSUkKIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDE2IC0gMTY6IElpSUkxSWlJICogSTEgKiBJMQpkZWYgb29vbzBvICggb3B0aW9ucyApIDoKIGlmIDY2IC0gNjY6IEkxIC8gb29vT29PCiB0cnkgOgogIGkxSUkxMUlJMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25sb2FkUGF0aCcgKSApCiAgT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIG9vbzAgKCBpSWlpSWkxaTFpMWkxICkgKQogIGlmIDIzIC0gMjM6IElpMUkgJSBJSSAvIG9vb09vTwogIGlmIDgyIC0gODI6IGlpMUkxaWkxSWlJaTEgJSBJSW9vb08wb29PMG9vCiAgaWYgMTEgLSAxMTogT09PIC8gaTFpSTEgLSBvb09vb08wT09PIC8gb29vT29PCiAgaWYgOTAgLSA5MDogb28gKiBJSUlJICsgT09PICUgSUlJSSAtIG9PTwogIGlmIDcwIC0gNzA6IElJSUkgKyBpaTFJMWlpMUlpSWkxICogSWlJSTFpMUkgJSBvb09vb08wT09PICsgT09vT29PMG8wbzBPTyAtIEkxCiAgb3MgLiByZW1vdmUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBvcHRpb25zIFsgJ25vbWJyZScgXSApICkgKQogIE9PTzAwb08wME9vTzAgLiBwb3AgKCBvcHRpb25zIFsgJ25vbWJyZScgXSAsIE5vbmUgKQogIE9vMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBPbzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIE9PTzAwb08wME9vTzAgKSApCiAgaWYgNjIgLSA2Mjogb28wbyAlIG9vT29vTzBPT08gLSBpMWlJMSAvIGkxaUkxIC4gaWlJSWkxaTFJaWkKICBPbzAgLiBjbG9zZSAoICkKICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAiWEJNQy5Db250YWluZXIuUmVmcmVzaCIgKQogZXhjZXB0IDoKICB0cmFjZWJhY2sgLiBwcmludF9leGMgKCBmaWxlID0gc3lzIC4gc3Rkb3V0ICkKICB4Ym1jIC4gbG9nICggJ1thZGRvbi5QYWxhbnRpcl0gRXJyb3IgT3BzICVzJyAlIG9wdGlvbnMgKQogIHJldHVybgogIGlmIDgwIC0gODA6IE9Pb09vTzBvMG8wT08gLyBJSUlJICogSWkxSSAlIG9vb09vTyAuIG8wMG9PMG9vME8wTzAKZGVmIE9Pb08wb28wb28wMCAoIGRvd25sb2FkX2ZpbGUgKSA6CiBvMDBPMG8wMG8gPSBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01heE51bURvd25sb2FkcycgKQogaTEgPSBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ01heFNpemVEb3dubG9hZHMnICkKIGlmIDI5IC0gMjk6IElJICogSWkgKyBJSSAuIG9vICogSWlJSTFpMUkKIGlmIDk4IC0gOTg6IG9vT29vTzBPT08gJSBJSSAvIG9vIC8gSWlJSTFpMUkKIGlmIDU3IC0gNTc6IElJSUkgLiBJSQogaWYgNTMgLSA1MzogSUlJSSArIG9vICogaTFpSTEgLiBvT08gLSBJaUlJMUlpSSAuIElJSUkKIE9vMDBvMDAwTyA9IHNldCAoICkKIGkxSUkxMUlJMTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCBfX3NldHRpbmdzX18gLiBnZXRTZXR0aW5nICggJ0Rvd25sb2FkUGF0aCcgKSApCiBmb3IgT28wT28wIGluIGRvd25sb2FkX2ZpbGUgLiBrZXlzICggKSA6CiAgT28wMG8wMDBPIC4gYWRkICggT28wT28wICkKICBpZiA0MiAtIDQyOiBpaUlJaTFpMUlpaSAlIG8wMG9PMG9vME8wTzAgLSBPT29Pb08wbzBvME9PCiBpaWkgPSBzZXQgKCApCiBpZiAzNiAtIDM2OiBvb29Pb08KIE9PT28wMG9vbzBPbyA9IG9PbyAoIGNvbmZpcm1hdGlvbk1lc3NhZ2UgPSBGYWxzZSApCiBpZiAxNiAtIDE2OiBJSSAuIEkxSWlJMUlJSTExaQogT08gPSAwCiBpZiBPT09vMDBvb28wT28gOgogIGZvciBpaWlJaUlpMUkgaW4gb3MgLiBsaXN0ZGlyICggaTFJSTExSUkxMUkgKSA6CiAgIGlpaSAuIGFkZCAoIG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggaWlpSWlJaTFJICkgWyAwIF0gKQogICBpZiA1MCAtIDUwOiBJSSAtIEkxSWlJMUlJSTExaSAqIG9vT29vTzBPT08gLyBJSUlJIC4gb29Pb29PME9PTyAuIElpSUkxaTFJCiAgaWYgaW50ICggbzAwTzBvMDBvICkgPD0gbGVuICggT28wMG8wMDBPICYgc2V0ICggaWlpICkgKSBhbmQgaW50ICggbzAwTzBvMDBvICkgPCAxMSA6CiAgIG8wID0gJ01heGltbyBudW1lcm8gZGUgZGVzY2FyZ2FzIHN1cGVyYWRvJwogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogICByZXR1cm4gRmFsc2UKICAgaWYgNDYgLSA0Njogb28wbyAqIGlpMUkxaWkxSWlJaTEgLiBvb29Pb08gKiBvT08gJSBPT08KICBPTyA9IHN1bSAoIG9zIC4gcGF0aCAuIGdldHNpemUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgZiApICkgZm9yIGYgaW4gb3MgLiBsaXN0ZGlyICggaTFJSTExSUkxMUkgKSBpZiBvcyAuIHBhdGggLiBpc2ZpbGUgKCAnJXMlcycgJSAoIGkxSUkxMUlJMTFJICwgZiApICkgYW5kIG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggZiApIFsgMCBdIGluIE9vMDBvMDAwTyApCiAgaWYgNTcgLSA1NzogaTFpSTEgLSBJSUlJIC0gSUkgKiBpaUlJaTFpMUlpaSAqIElJSUkKICBpZiA0OSAtIDQ5OiBJMUlpSTFJSUkxMWkgKyBpaUlJaTFpMUlpaQogIGlmIGkxICE9ICc2JyBhbmQgaTEgIT0gJ0lsaW1pdGFkbycgYW5kIGkxICE9ICdVbmxpbWl0ZWQnIDoKICAgaWYgaTEgPT0gJzAnIDoKICAgIGkxID0gMTAyNAogICBlbGlmIGkxID09ICcxJyA6CiAgICBpMSA9IDEwMjQgKiAyCiAgIGVsaWYgaTEgPT0gJzInIDoKICAgIGkxID0gMTAyNCAqIDMKICAgZWxpZiBpMSA9PSAnMycgOgogICAgaTEgPSAxMDI0ICogNQogICBlbGlmIGkxID09ICc0JyA6CiAgICBpMSA9IDEwMjQgKiAxMAogICBlbGlmIGkxID09ICc1JyA6CiAgICBpMSA9IDEwMjQgKiAyMAogICBlbHNlIDoKICAgIGkxID0gaTEgLiByZXBsYWNlICggJ0dCJyAsICcnICkKICAgaWYgaW50ICggT08gKSAvIDEwNDg1NzYgPiBpbnQgKCBpMSApIDoKICAgIG8wID0gJ1RhbWHDsW8gbWF4aW1vIHBhcmEgZGVzY2FyZ2FzIHN1cGVyYWRvJwogICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKICAgIE9PT28wMG9vbzBPbyA9IEZhbHNlCiAgICBpZiAxOSAtIDE5OiBvb09vb08wT09PIC4gT09vT29PMG8wbzBPTyAvIElpICsgSUlJSQogIHJldHVybiBPT09vMDBvb28wT28KIGVsc2UgOgogIHJldHVybiBGYWxzZQogIGlmIDg3IC0gODc6IGlpMUkxaWkxSWlJaTEKICBpZiA2NSAtIDY1OiBPT08gLyBvbyAvIG9vICUgaWlJSWkxaTFJaWkKZGVmIElpSWlJSTFJMUlpICggb3B0aW9ucyApIDoKIE9PTzAwb08wME9vTzAgPSB7IH0KIGlmIDQ4IC0gNDg6IG9vb09vTyAqIElJb29vTzBvb08wb28gKiBJaSArIElJb29vTzBvb08wb28KIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGlJaWlJaTFpMWkxaTEgKSA6CiAgT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIG9vbzAgKCBpSWlpSWkxaTFpMWkxICkgKQogaWYgT09vTzBvbzBvbzAwICggT09PMDBvTzAwT29PMCApIDoKICBPbzBvMG9PID0gT29vb08wTyAoIHVuaWNvZGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIG9wdGlvbnMgWyAnbm9tYnJlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkgKSApCiAgSTExID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBPbzBvMG9PICkKICBpZiA3NCAtIDc0OiBJSUlJICogSWkgKiBpaUlJaTFpMUlpaSAtIElJb29vTzBvb08wb28KICBpMWlJSUlpaWkxICwgSWlJaUlpMWlJMSA9IG9zIC4gcGF0aCAuIHNwbGl0ZXh0ICggT28wbzBvTyApCiAgaWYgNTMgLSA1MzogSWlJSTFpMUkgLyBpaTFJMWlpMUlpSWkxIC8gbzAwb08wb28wTzBPMCAtIE9PTyAqIG9vT29vTzBPT08gKyBvbzBvCiAgaWYgT28wbzBvTyAuIGVuZHN3aXRoICggSWlJaUlpMWlJMSApIDoKICAgT28wbzBvTyA9IGkxaUlJSWlpaTEKICAgaWYgOTAgLSA5MDogSWlJSTFpMUkgKyBJSW9vb08wb29PMG9vIC8gb29vT29PICsgT09PICogSWkxSSAlIGlpSUlpMWkxSWlpCiAgT09PMDBvTzAwT29PMCBbIE9vMG8wb08gXSA9ICgKIG9wdGlvbnMgWyAnaWQnIF0gLCBPbzBvMG9PICwgb3B0aW9ucyBbICdjYXJhdHVsYScgXSAsIG9wdGlvbnMgWyAncG9zdGVyJyBdICwgb3B0aW9ucyBbICd0eXBlJyBdICkKICBPb09vT09vME9PMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBpZiA5NyAtIDk3OiBPT29Pb08wbzBvME9PICogSUkgLiBJMSArIEkxSWlJMUlJSTExaQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBqc29uIC4gZHVtcHMgKCBPT08wMG9PMDBPb08wICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiAgcmV0dXJuIFRydWUKIGVsc2UgOgogIHJldHVybiBGYWxzZQogeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKIGlmIDgyIC0gODI6IElJICsgaWkxSTFpaTFJaUlpMSAlIGlpSUlpMWkxSWlpIC4gSUkKIGlmIDU5IC0gNTk6IG9vb09vTyAqIElpSUkxSWlJIC8gSWlJSTFJaUkgKyBJSSAlIGlpMUkxaWkxSWlJaTEgJSBJSUlJCmRlZiBJaWkxb08wMG8wMDAwT08wTyAoICkgOgogaTFJaTExaSA9IFsgXQogaTFJSTExSUkxMUkgPSB4Ym1jIC4gdHJhbnNsYXRlUGF0aCAoIF9fc2V0dGluZ3NfXyAuIGdldFNldHRpbmcgKCAnRG93bmxvYWRQYXRoJyApICkKIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGlJaWlJaTFpMWkxaTEgKSA9PSBGYWxzZSA6CiAgT29Pb09PbzBPTzAgPSBvcGVuICggaUlpaUlpMWkxaTFpMSAsICJ3IiApCiAgT29Pb09PbzBPTzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIHsgfSApICkKICBpZiA4NiAtIDg2OiBJaUlJMUlpSQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBpZiA4IC0gODogb28wbyAtIElJICsgb28wbwogIGl0ZW1zID0ganNvbiAuIGxvYWRzICggb29vMCAoIGlJaWlJaTFpMWkxaTEgKSApCiAgaWYgMjUgLSAyNTogaWkxSTFpaTFJaUlpMSArIEkxIC8gb29vT29PCiAgZm9yIGlJaSAsIEkxaUlJMUlJMWlJSSBpbiBpdGVtcyAuIGNvcHkgKCApIC4gaXRlcml0ZW1zICggKSA6CiAgIE9vT29Pb28wMDAwbyA9IEkxaUlJMUlJMWlJSSBbIDAgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICBJSUlpaTFJMWlpID0gSTFpSUkxSUkxaUlJIFsgMSBdIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgaWYgNDIgLSA0Mjogb09PIC4gT09PIC8gSWlJSTFJaUkgJSBJSW9vb08wb29PMG9vCiAgIGlmIDcgLSA3OiBvbyAvIElpIC0gT09PCiAgIGlmIDI1IC0gMjU6IElJb29vTzBvb08wb28gLiBvT08gLyBJaUlJMWkxSSAvIElJSUkKICAgaWYgOTUgLSA5NTogb09PIC8gSUkgKiBpaTFJMWlpMUlpSWkxIC0gb28gKyBJaUlJMUlpSQogICBpMWlJMW9Pb09vME8wID0gb3MgLiBwYXRoIC4gc3BsaXRleHQgKCBpMUlJMTFJSTExSSApIFsgMCBdICsgcmUgLiBzdWIgKCByJyg/PCFcWylcXScgLCAnW11dJyAsIHJlIC4gc3ViICggcidcWycgLCAnW1tdJyAsIElJSWlpMUkxaWkgKSApICsgJy4qJwogICBPME9PTzBvbyA9IGdsb2IgLiBnbG9iICggaTFpSTFvT29PbzBPMCApCiAgIGlmIDkyIC0gOTI6IG9vT29vTzBPT08gLiBJMQogICBpZiBsZW4gKCBPME9PTzBvbyApID4gMCA6CiAgICBPME9PTzBvbyA9IE8wT09PMG9vIFsgMCBdCiAgICBJSUlpaTFJMWlpID0gSUlJaWkxSTFpaSArICggb3MgLiBwYXRoIC4gc3BsaXRleHQgKCBPME9PTzBvbyApIFsgMSBdICkgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICAgaWYgOTggLSA5ODogSWlJSTFJaUkKICAgZWxzZSA6CiAgICBPME9PTzBvbyA9ICcnCiAgICBpZiA5MiAtIDkyOiBvMDBvTzBvbzBPME8wIC0gT09PICogSWkKICAgaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIE8wT09PMG9vICkgOgogICAgaWYgOTcgLSA5NzogSUlvb29PMG9vTzBvbyAlIElJIC0gb28gLyBpMWlJMSAqIG9PTyAlIG9vCiAgICBpdGVtcyAuIHBvcCAoIElJSWlpMUkxaWkgLCBOb25lICkKICAgZWxzZSA6CiAgICBJMUlpSTExMTExMTEgPSBJMWlJSTFJSTFpSUkgWyAyIF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgIElpMTFJMTFJaTExSSA9IEkxaUlJMUlJMWlJSSBbIDMgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICAgb29vT08wT08wID0gSTFpSUkxSUkxaUlJIFsgNCBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgICBJSTFJSTFJMTEgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIElpMTFJMTFJaTExSSApCiAgICBJMUlpaWlJSUlJSTEgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIEkxSWlJMTExMTExMSApCiAgICBpZiA2IC0gNjogb09PICUgb29Pb29PME9PTyAqIG9vMG8gLiBPT08KICAgIG8wT09vME9vT29PbyA9IEZhbHNlCiAgICBpZiBsZW4gKCBPb09vT29vMDAwMG8gLiBzcGxpdCAoICctJyApICkgPT0gMyA6CiAgICAgbzBPT28wT29Pb09vID0gVHJ1ZQogICAgIGlmIDcxIC0gNzE6IG9vb09vTyAqIElpIC8gaWkxSTFpaTFJaUlpMSAtIG9vT29vTzBPT08KICAgICBpZiA3MiAtIDcyOiBvbzBvIC4gSWlJSTFJaUkgKiBJMUlpSTFJSUkxMWkgKiBvb09vb08wT09PICsgSWkgJSBJSUlJCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBJSUlpaTFJMWlpICwgY2FyYXR1bGEgPSBJMUlpaWlJSUlJSTEgLCBwb3N0ZXIgPSBJSTFJSTFJMTEgLCBpc1BsYXlhYmxlID0gbzBPT28wT29Pb09vICkKICAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIFsgSWlJSWlJICggaWQgPSBzdHIgKCBJMWlJSTFJSTFpSUkgWyAwIF0gKSAsIG5vbWJyZSA9IElJSWlpMUkxaWkgLCB1cmwgPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoICclcyVzJyAlICggaTFJSTExSUkxMUkgLCBJSUlpaTFJMWlpICkgKSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIHJlbW92ZSA9IFRydWUgLCB0eXBlID0gb29vT08wT08wICkgXSApCiAgICBJMUlpaWkgPSAnezB9P3sxfT1wbGF5TG9jYWwmcGF0aD17Mn0mdGl0PXszfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggTzBPT08wb28gKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggSUlJaWkxSTFpaSApICkKICAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgbm90IG8wT09vME9vT29PbyApICkKICAgIGlmIDI1IC0gMjU6IG8wMG9PMG9vME8wTzAgLiBvbwogIE9vMCA9IG9wZW4gKCBpSWlpSWkxaTFpMWkxICwgInciICkKICBpZiAyOCAtIDI4OiBPT08gLiBJMUlpSTFJSUkxMWkgLyBpaUlJaTFpMUlpaSArIElpMUkgKiBvT08gKyBvb29Pb08KICBPbzAgLiB3cml0ZSAoIGpzb24gLiBkdW1wcyAoIGl0ZW1zICkgKQogIE9vMCAuIGNsb3NlICggKQogdHJ5IDoKICBpZiA0NyAtIDQ3OiBvMDBvTzBvbzBPME8wICsgb28wbyAtIElJb29vTzBvb08wb28gLiBpMWlJMSAvIElpMUkKICBPT28wMDBPbyAoIEkxSUkgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiA5NiAtIDk2OiBvb09vb08wT09PIC4gbzAwb08wb28wTzBPMAogaWYgNzcgLSA3NzogaWlJSWkxaTFJaWkgKiBvb29Pb08gLiBJSQpkZWYgT29PMG9vT09PICggb3B0aW9ucyApIDoKIGlmIDIyIC0gMjI6IG8wMG9PMG9vME8wTzAgLiBvb09vb08wT09PIC0gaWkxSTFpaTFJaUlpMSAqIG9vCiBpZiBJaUlpSUkxSTFJaSAoIG9wdGlvbnMgKSA6CiAgaXRoaWwgLiBJSWkgKCBvcHRpb25zIFsgJ3VybCcgXSAsIG9wdGlvbnMgWyAnbm9tYnJlJyBdICwgaTExaSAsIG9wdGlvbnMgWyAnaWQnIF0gLCBvcHRpb25zIFsgJ3R5cGUnIF0gLCAnZG93bmxvYWQnICwgb3B0aW9ucyApCiAgaWYgNjUgLSA2NTogaWlJSWkxaTFJaWkKZGVmIG9PMG9PICggKSA6CiBpZiA0NSAtIDQ1OiBJaSAtIGlpSUlpMWkxSWlpIC4gb09PIC4gSWlJSTFJaUkgLyBvb29Pb08gKiBpaUlJaTFpMUlpaQogaWlpMUlpSTExMTEgPSB4Ym1jYWRkb24gLiBBZGRvbiAoIGlkID0gInNjcmlwdC5tb2R1bGUuc2ltcGxlLmRvd25sb2FkZXIiICkKIE8wTzBPME8wTyA9IGlpaTFJaUkxMTExIC4gZ2V0QWRkb25JbmZvICggJ3Byb2ZpbGUnICkKIGZvciBJMTExMTFJaWlJSUkxIGluIG9zIC4gbGlzdGRpciAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggTzBPME8wTzBPICkgKSA6CiAgdHJ5IDoKICAgaWYgMzggLSAzODogSWkgKyBpaTFJMWlpMUlpSWkxICsgSWkxSSAqIEkxSWlJMUlJSTExaSAuIElJICsgSUkKICAgb3MgLiByZW1vdmUgKCAnJXMlcycgJSAoIHhibWMgLiB0cmFuc2xhdGVQYXRoICggTzBPME8wTzBPICkgLCBJMTExMTFJaWlJSUkxICkgKQogIGV4Y2VwdCA6CiAgIGlmIDU3IC0gNTc6IG9vMG8gKyBPT29Pb08wbzBvME9PIC0gb28wbyAuIElpIC0gSUlJSQogICBvMCA9ICdObyBzZSBwdWVkZSBib3JyYXIgZWwgZmljaGVybyAlcyAnICUgSTExMTExSWlpSUlJMQogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogICBpZiA1IC0gNTogSUlJSSArIGlpMUkxaWkxSWlJaTEgKyBJaUlJMWkxSQogICBpZiAxMSAtIDExOiBPT29Pb08wbzBvME9PICsgb29vT29PIC0gb29Pb29PME9PTyAvIElJSUkgLiBvb09vb08wT09PCiAgIGlmIDk2IC0gOTY6IGlpSUlpMWkxSWlpIC4gb29Pb29PME9PTyAlIElpMUkgLiBpaUlJaTFpMUlpaQogICBpZiAxIC0gMTogSUlvb29PMG9vTzBvbyAlIE9Pb09vTzBvMG8wT08gJSBvb29Pb08gLiBvT08KIGlJMTExaSA9ICclcyVzJyAlICggeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCAnc3BlY2lhbDovL3RlbXAnICkgLCAnY29tbW9uY2FjaGUuZGInICkKIHRyeSA6CiAgb09vTzBPMDAwMDAgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGlJMTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJkZWxldGUgZnJvbSBEb3dubG9hZGVyIiApCiAgb09vTzBPMDAwMDAgLiBjb21taXQgKCApCiAgb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnTGltcGllemEgcmVhbGl6YWRhIGNvcnJlY3RhbWVudGUnICwgeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgNTAwMCApCiBleGNlcHQgOgogIHRyYWNlYmFjayAuIHByaW50X2V4YyAoIGZpbGUgPSBzeXMgLiBzdGRvdXQgKQogIG8wID0gJ05vIHNlIHB1ZWRlIGJvcnJhciBiZCBjb21tb25jYWNoZScKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogIGlmIDU0IC0gNTQ6IElJSUkgLiBvb09vb08wT09PICogT09PIC0gSWlJSTFJaUkKZGVmIG9PbyAoIGNvbmZpcm1hdGlvbk1lc3NhZ2UgPSBUcnVlICkgOgogbzAwTzBvMDBvID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYXhOdW1Eb3dubG9hZHMnICkKIGkxID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdNYXhTaXplRG93bmxvYWRzJyApCiBpSUkxaUlJaUlpMTFJID0gX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdEb3dubG9hZFBhdGgnICkKIGlmIDc3IC0gNzc6IElJICogSWlJSTFpMUkgJSBJMSArIEkxIC8gb09PCiBpZiBub3QgaUlJMWlJSWlJaTExSSA6CiAgaUlJMWlJSWlJaTExSSA9ICdkb3dubG9hZHMnCiBpMUlJMTFJSTExSSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggaUlJMWlJSWlJaTExSSApCiBpZiAyMSAtIDIxOiBJMSAuIG9vMG8gLyBJSUlJICUgSUkgLSBJMQogaWYgaTFJSTExSUkxMUkgLiBsb3dlciAoICkgLiBzdGFydHN3aXRoICggInNtYjovLyIgKSA6CiAgbzAgPSAnTGEgcnV0YSBTYW1iYSBubyBlc3TDoSBzb3BvcnRhZGEsIHNlbGVjY2lvbmUgb3RyYSBydXRhIHBhcmEgbGFzIGRlc2NhcmdhcycKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogaWYgbm90IG9zIC4gcGF0aCAuIGV4aXN0cyAoIGkxSUkxMUlJMTFJICkgOgogIHRyeSA6CiAgIG9zIC4gbWtkaXIgKCBpMUlJMTFJSTExSSApCiAgZXhjZXB0IDoKICAgbzAgPSAnTm8gZXhpc3RlIGxhIHJ1dGEgJXMgeSBubyBzZSBwdWVkZSBjcmVhci5cblJldmlzYSBsYSBjb25maWd1cmFjaW9uIHkgc2VsZWNjaW9uYSB1bmEgcnV0YSBjb24gcGVybWlzb3MgZGUgZXNjcml0dXJhJyAlIGlJSTFpSUlpSWkxMUkKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKICAgaWYgNzggLSA3ODogb09PCiB0cnkgOgogIE9vT29PT28wT08wID0gb3BlbiAoICclcy9ib2xzb24udGVzdCcgJSBpMUlJMTFJSTExSSAsICJ3IiApCiAgT29Pb09PbzBPTzAgLiB3cml0ZSAoICdUZXN0JyApCiAgT29Pb09PbzBPTzAgLiBjbG9zZSAoICkKICB0cnkgOgogICBvcyAuIHJlbW92ZSAoICclcy9ib2xzb24udGVzdCcgJSBpMUlJMTFJSTExSSApCiAgIGlmIGNvbmZpcm1hdGlvbk1lc3NhZ2UgOgogICAgbzAgPSAnUnV0YSBkZSBkZXNjYXJnYXMgY29ycmVjdGEnCiAgICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogICByZXR1cm4gVHJ1ZQogIGV4Y2VwdCA6CiAgIG8wID0gJ05vIHNlIHB1ZWRlIGJvcnJhciBlbiBsYSBjYXJwZXRhIHNlbGVjY2lvbmFkYScKICAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgbzAgLCB4Ym1jZ3VpIC4gTk9USUZJQ0FUSU9OX1dBUk5JTkcgLCA1MDAwICkKIGV4Y2VwdCA6CiAgbzAgPSAnTm8gc2UgcHVlZGUgZ3VhcmRhciBlbiBsYSBjYXJwZXRhIHNlbGVjY2lvbmFkYScKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCBvMCAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogcmV0dXJuIEZhbHNlCiBpZiA4NyAtIDg3OiBpaUlJaTFpMUlpaSAqIGlpMUkxaWkxSWlJaTEgLyBvT08gJSBPT08gLyBPT29Pb08wbzBvME9PCiBpZiAzOCAtIDM4OiBPT29Pb08wbzBvME9PICogSTEgLyBJaTFJCiBpZiA3MCAtIDcwOiBvb29Pb08gKiBJaUlJMUlpSSAuIElJIC4gSWkxSSAqIEkxICsgb29vT29PCiBpZiA3NyAtIDc3OiBvMDBvTzBvbzBPME8wICUgSTEKZGVmIE9PMG8wTzAgKCBpZCAsIHR5cGUgLCBub21icmUgLCB1cmwgLCBjYXJhdHVsYSAsIHBvc3RlciAsIGZhdiA9IGkxMWlpaSAsIHRleHQgPSAnJyAsIGZhdkxpdGVyYWwgPSAnJyAsIHJlZnJlc2ggPSBOb25lICkgOgogaWYgOTkgLSA5OTogb29Pb29PME9PTyAlIG9PTwogdHJ5IDoKICBub21icmUgPSBub21icmUgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogIHBhc3MKIGlmIG5vdCBjYXJhdHVsYSA6CiAgY2FyYXR1bGEgPSAnTm9uZScKIGlmIG5vdCBwb3N0ZXIgOgogIHBvc3RlciA9ICdOb25lJwogaWYgaWQgbm90IGluIGZhdiA6CiAgaWYgODkgLSA4OTogT09PCiAgT28wMG8wTzBvT28wID0gKCAnQcOxYWRpciBhIGZhdm9yaXRvcyAlcyBQYWxhbnRpcicgJSB0ZXh0ICwKICdYQk1DLlJ1blBsdWdpbiglcz9hY3Rpb249YWRkZmF2JXMmaWQ9JXMmbm9tYnJlPSVzJnVybD0lcyZjYXJhdHVsYT0lcyZwb3N0ZXI9JXMmdHlwZT0lcyZ0ZXh0PSVzKScgJSAoCiBJMWlJMTFJICwgZmF2TGl0ZXJhbCAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggdXJsICkgLAogYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBjYXJhdHVsYSApICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBwb3N0ZXIgKSAsIHR5cGUgLCB0ZXh0ICkgKQogZWxzZSA6CiAgT28wMG8wTzBvT28wID0gKCAnRWxpbWluYXIgZGUgZmF2b3JpdG9zICVzIFBhbGFudGlyJyAlIHRleHQgLAogJ1hCTUMuUnVuUGx1Z2luKCVzP2FjdGlvbj1ybWZhdiVzJmlkPSVzJm5vbWJyZT0lcyZ1cmw9JXMmY2FyYXR1bGE9JXMmcG9zdGVyPSVzJnJlZnJlc2g9JXMmdHlwZT0lcyZ0ZXh0PSVzKScgJSAoCiBJMWlJMTFJICwgZmF2TGl0ZXJhbCAsIGlkICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBub21icmUgKSAsIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggdXJsICkgLAogYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBjYXJhdHVsYSApICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBwb3N0ZXIgKSAsIHJlZnJlc2ggLCB0eXBlICwgdGV4dCApICkKIHJldHVybiBPbzAwbzBPMG9PbzAKIGlmIDEgLSAxOiBvbwogaWYgMzAgLSAzMDogb29Pb29PME9PTyAvIElpSUkxaTFJCmRlZiBPb09Pb09PMCAoIG9wdGlvbnMgLCBmYXZvcml0b3MgPSBpSWlJaWlpSWkxSTFJICkgOgogT09PMDBvTzAwT29PMCA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGZhdm9yaXRvcyApICkgKQogT09PMDBvTzAwT29PMCAuIHBvcCAoIG9wdGlvbnMgWyAnaWQnIF0gLCBOb25lICkKIE9vMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogT28wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIE9PTzAwb08wME9vTzAgKSApICkKIE9vMCAuIGNsb3NlICggKQogaWYgJ3JlZnJlc2gnIGluIG9wdGlvbnMgYW5kIG9wdGlvbnMgWyAncmVmcmVzaCcgXSA6CiAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggIlhCTUMuQ29udGFpbmVyLlJlZnJlc2giICkKICBpZiAzNSAtIDM1OiBvbzBvICUgaTFpSTEgLyBJaUlJMWkxSQogIGlmIDEzIC0gMTM6IElpSUkxaTFJCmRlZiBPMDAwMDAgKCBmYXZvcml0b3MgLCBmYXYgLCBmYXZMaXRlcmFsICwgdGV4dCApIDoKIGkxSWkxMWkgPSBbIF0KIGlmIG9zIC4gcGF0aCAuIGV4aXN0cyAoIGZhdm9yaXRvcyApID09IEZhbHNlIDoKICBPb09vT09vME9PMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIHsgfSApICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBpdGVtcyA9IGpzb24gLiBsb2FkcyAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb29vMCAoIGZhdm9yaXRvcyApICkgKQogIGZvciBpSWkgaW4gc29ydGVkICggaXRlbXMgLiBpdGVtcyAoICkgLCBrZXkgPSBsYW1iZGEgaWlpMUlpSSA6IGlpaTFJaUkgWyAxIF0gWyAxIF0gKSA6CiAgIEkxaUlJMUlJMWlJSSA9IGlJaSBbIDEgXQogICBPb09vT29vMDAwMG8gPSBJMWlJSTFJSTFpSUkgWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgSUlJaWkxSTFpaSA9IEkxaUlJMUlJMWlJSSBbIDEgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICB0cnkgOgogICAgaWYgNjYgLSA2Njogb09PICogb09PIC0gaWkxSTFpaTFJaUlpMSArIElpIC0gb09PCiAgICBJSUlpaTFJMWlpID0gSTFpSUkxSUkxaUlJIFsgMSBdIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0IDoKICAgIHBhc3MKICAgSTFJaWlpID0gSTFpSUkxSUkxaUlJIFsgMiBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgIEkxSWlJMTExMTExMSA9IEkxaUlJMUlJMWlJSSBbIDMgXSAuIGVuY29kZSAoICd1dGYtOCcgKQogICBJaTExSTExSWkxMUkgPSBJMWlJSTFJSTFpSUkgWyA0IF0gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgb29vT08wT08wID0gSTFpSUkxSUkxaUlJIFsgNSBdIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgIElJMUlJMUkxMSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggSWkxMUkxMUlpMTFJICkKICAgSTFJaWlpSUlJSUkxID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpSTExMTExMTEgKQogICBJSUlpaTFJMWlpID0gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJSUlpaTFJMWlpICkKICAgbzBPT28wT29Pb09vID0gRmFsc2UKICAgaWYgbGVuICggT29Pb09vbzAwMDBvIC4gc3BsaXQgKCAnLScgKSApID09IDMgYW5kIG5vdCAnZ3JvdXBJZCcgaW4gYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpaWkgKSA6CiAgICBvME9PbzBPb09vT28gPSBUcnVlCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IElJSWlpMUkxaWkgLCBjYXJhdHVsYSA9IEkxSWlpaUlJSUlJMSAsIHBvc3RlciA9IElJMUlJMUkxMSAsIGlzUGxheWFibGUgPSBvME9PbzBPb09vT28gKQogICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBbIE9PMG8wTzAgKCBpZCA9IHN0ciAoIEkxaUlJMUlJMWlJSSBbIDAgXSApICwgbm9tYnJlID0gSUlJaWkxSTFpaSAsIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIHJlZnJlc2ggPSBUcnVlICwgdHlwZSA9IG9vb09PME9PMCAsIGZhdiA9IGZhdiAsIHRleHQgPSB0ZXh0ICwgZmF2TGl0ZXJhbCA9IGZhdkxpdGVyYWwgKSBdICkKICAgaTFJaTExaSAuIGFwcGVuZCAoICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBJMUlpaWkgKSAsIE9vT08wT08wbzBPICwgbm90IG8wT09vME9vT29PbyApICkKIHRyeSA6CiAgaWYgNDQgLSA0NDogSUkgKyBpaTFJMWlpMUlpSWkxCiAgT09vMDAwT28gKCBJMWlJMWlpaUlpSTEgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiAzNSAtIDM1OiBvbzBvICsgSUlJSSAlIG9vMG8gJSBJSSAvIE9PTyAlIElJCiBpZiA4NCAtIDg0OiBvT08KZGVmIGlpb08wb28wME8wTyAoIG9wdGlvbnMgLCBmYXZvcml0b3MgPSBpSWlJaWlpSWkxSTFJICkgOgogaWlJSWlJSUlpID0geyB9CiBpZiBvcyAuIHBhdGggLiBleGlzdHMgKCBmYXZvcml0b3MgKSA9PSBGYWxzZSA6CiAgaWYgODkgLSA4OTogaWlJSWkxaTFJaWkgKiBJSSAuIG9vMG8gLyBJSQogIGlpSUlpSUlJaSBbIG9wdGlvbnMgWyAnaWQnIF0gXSA9ICgKIG9wdGlvbnMgWyAnaWQnIF0gLCBvcHRpb25zIFsgJ25vbWJyZScgXSAsIG9wdGlvbnMgWyAndXJsJyBdICwgb3B0aW9ucyBbICdjYXJhdHVsYScgXSAsIG9wdGlvbnMgWyAncG9zdGVyJyBdICwgb3B0aW9ucyBbICd0eXBlJyBdICkKICBPb09vT09vME9PMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vT29PT28wT08wIC4gd3JpdGUgKCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGpzb24gLiBkdW1wcyAoIGlpSUlpSUlJaSApICkgKQogIE9vT29PT28wT08wIC4gY2xvc2UgKCApCiBlbHNlIDoKICBPT08wMG9PMDBPb08wID0ganNvbiAuIGxvYWRzICggYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBvb28wICggZmF2b3JpdG9zICkgKSApCiAgT09PMDBvTzAwT29PMCBbIG9wdGlvbnMgWyAnaWQnIF0gXSA9ICggb3B0aW9ucyBbICdpZCcgXSAsIG9wdGlvbnMgWyAnbm9tYnJlJyBdICwgb3B0aW9ucyBbICd1cmwnIF0gLCBvcHRpb25zIFsgJ2NhcmF0dWxhJyBdICwgb3B0aW9ucyBbICdwb3N0ZXInIF0gLCBvcHRpb25zIFsgJ3R5cGUnIF0gKQogIE9vMCA9IG9wZW4gKCBmYXZvcml0b3MgLCAidyIgKQogIE9vMCAuIHdyaXRlICggYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBqc29uIC4gZHVtcHMgKCBPT08wMG9PMDBPb08wICkgKSApCiAgT28wIC4gY2xvc2UgKCApCiBpZiAndGV4dCcgaW4gb3B0aW9ucyA6CiAgbzBPbyA9IG9wdGlvbnMgWyAndGV4dCcgXQogZWxzZSA6CiAgbzBPbyA9ICcnCiB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAiWEJNQy5Db250YWluZXIuUmVmcmVzaCIgKQogaWlpSWlpMUlpSUkgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKQogaWlpSWlpMUlpSUkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwKICdGYXZvcml0byBhw7FhZGlkbyBhIFtDT0xPUiBnb2xkXSVzWy9DT0xPUl0gUGFsYW50aXInICUgKCBvME9vICkgLAogeGJtY2d1aSAuIE5PVElGSUNBVElPTl9JTkZPICwgMzAwMCApCiBpZiA4MyAtIDgzOiBPT08KZGVmIElJaWlJSTExMWkgKCBjYXJhdHVsYSAsIHBvc3RlciApIDoKIGlmIGNhcmF0dWxhID09IE5vbmUgOgogIGNhcmF0dWxhID0gJycKIGlmIHBvc3RlciA9PSBOb25lIDoKICBwb3N0ZXIgPSAnJwogcmV0dXJuIHsgJ2ljb24nIDogY2FyYXR1bGEgLCAnZmFuYXJ0JyA6IHBvc3RlciAsICd0aHVtYicgOiBjYXJhdHVsYSB9CiBpZiA0OSAtIDQ5OiBvT08gKyBpaUlJaTFpMUlpaSAqIG9vT29vTzBPT08gKyBPT29Pb08wbzBvME9PCiBpZiA4OCAtIDg4OiBvbzBvIC0gSUkgKyBJaUlJMUlpSSAuIElpMUkgJSBJaTFJIC8gaTFpSTEKIGlmIDg4IC0gODg6IE9PTyAvIGlpSUlpMWkxSWlpICogSUkKZGVmIE9PTzBvT08wTzBvTzAgKCBkaW1lbnNpb24gKSA6CiBpZiBkaW1lbnNpb24gOgogIElJaWlJID0gZGltZW5zaW9uIC4gc3BsaXQgKCAieCIgKQogIGlmIGxlbiAoIElJaWlJICkgPT0gMiA6CiAgIGlpMTFpMUkxMWkgPSBpbnQgKCBJSWlpSSBbIDAgXSApCiAgIGlJMUlpSTFJSWlJaSA9IGludCAoIElJaWlJIFsgMSBdICkKICAgaWYgaWkxMWkxSTExaSA9PSAwIG9yIGlJMUlpSTFJSWlJaSA9PSAwIDoKICAgIHJldHVybiAiIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gNzIwIGFuZCBpSTFJaUkxSUlpSWkgPD0gNDgwIDoKICAgIHJldHVybiAiW0NPTE9SIG9sZGxhY2VdKFNEKVsvQ09MT1JdIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gNzY4IGFuZCBpSTFJaUkxSUlpSWkgPD0gNTc2IDoKICAgIHJldHVybiAiW0NPTE9SIG1vY2Nhc2luXShIRClbL0NPTE9SXSIKICAgZWxpZiBpaTExaTFJMTFpIDw9IDk2MCBhbmQgaUkxSWlJMUlJaUlpIDw9IDU0NCA6CiAgICByZXR1cm4gIltDT0xPUiBwZWFjaHB1ZmZdKEhEKVsvQ09MT1JdIgogICBlbGlmIGlpMTFpMUkxMWkgPD0gMTI4MCBhbmQgaUkxSWlJMUlJaUlpIDw9IDcyMCA6CiAgICByZXR1cm4gIltDT0xPUiBzYW5keWJyb3duXSg3MjApWy9DT0xPUl0iCiAgIGVsc2UgOgogICAgcmV0dXJuICJbQ09MT1IgY2hvY29sYXRlXSgxMDgwKVsvQ09MT1JdIgogIGVsc2UgOgogICByZXR1cm4gIiIKIHJldHVybiAiIgogaWYgMTkgLSAxOTogb28wbyAvIG9vb09vTyAlIG8wMG9PMG9vME8wTzAgJSBPT29Pb08wbzBvME9PIC8gSUlJSQogaWYgMTUgLSAxNTogSWkxSSAuIGkxaUkxICsgSWkgLiBPT29Pb08wbzBvME9PICogSUlJSSAuIElJb29vTzBvb08wb28KZGVmIGkxSSAoIHVybCApIDoKIGlmIDM3IC0gMzc6IG9vMG8KIE9PME8wT09PID0gaXRoaWwgLiBpSUkxaUlJaUlpMTFJICggaTExaSAsIHVybCApCiBJMUlJaTEgPSBpdGhpbCAuIG9vMG8wMG9vTyAoIGkxMWkgLCB1cmwgKQogaWYgSTFJSWkxIDoKICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoICdQYWxhbnRpcicgLCAnVXN1YXJpbyBlbiAlcyAoJXMpIHZhbGlkYWRvJyAlICggdXJsICwgT08wTzBPT08gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgKSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogZWxzZSA6CiAgeGJtY2d1aSAuIERpYWxvZyAoICkgLiBub3RpZmljYXRpb24gKCAnUGFsYW50aXInICwgJ1VzdWFyaW8gZW4gJXMgKCVzKSB5IGNvbnRyYXNlw7FhIG5vIHbDoWxpZGFzJyAlICggdXJsICwgT08wTzBPT08gWyAwIF0gLiBlbmNvZGUgKCAndXRmLTgnICkgKSAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fV0FSTklORyAsIDUwMDAgKQogIGlmIDc0IC0gNzQ6IElJSUkgLSBJaTFJIC8gSUkKICBpZiA3IC0gNzogT09PCiAgaWYgMzggLSAzODogb29vT29PIC8gSTEgKiBJSW9vb08wb29PMG9vCmRlZiBPb09PMDBvbyAoIHNlcmllX3Npbm9wICwgc2VyaWVfY2FyYXR1bGEgLCBzZXJpZV9wb3N0ZXIgLCB0ZW1wX3Npbm9wICwgdGVtcF9jYXJhdHVsYSAsIHRlbXBfcG9zdGVyICkgOgogT09PMDBvTzAwT29PMCA9IFsgXQogaWYgdGVtcF9zaW5vcCA9PSBOb25lIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggc2VyaWVfc2lub3AgKQogZWxzZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHRlbXBfc2lub3AgKQogaWYgdGVtcF9jYXJhdHVsYSA9PSBOb25lIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggc2VyaWVfY2FyYXR1bGEgKQogZWxzZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHRlbXBfY2FyYXR1bGEgKQogaWYgdGVtcF9wb3N0ZXIgPT0gTm9uZSA6CiAgT09PMDBvTzAwT29PMCAuIGFwcGVuZCAoIHNlcmllX3Bvc3RlciApCiBlbHNlIDoKICBPT08wMG9PMDBPb08wIC4gYXBwZW5kICggdGVtcF9wb3N0ZXIgKQogcmV0dXJuIE9PTzAwb08wME9vTzAKIGlmIDMzIC0gMzM6IG9vMG8gKiBvbyAvIGlpSUlpMWkxSWlpIC8gT09PICogaWlJSWkxaTFJaWkKIGlmIDMgLSAzOiBvMDBvTzBvbzBPME8wICogT09vT29PMG8wbzBPTwogaWYgNSAtIDU6IElpSUkxSWlJICUgT09vT29PMG8wbzBPTwpkZWYgT29vMDBvMG9vMG8gKCBvcGVyYXRvciAsIHZhbHVlICwgcGFyYW1zICkgOgogb09vTzBPMDAwMDAgPSBzcWxpdGUzIC4gY29ubmVjdCAoIGkxMWkgKQogSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiBvbzAgPSAxCiBpZiAncGFnZScgaW4gcGFyYW1zIGFuZCAnY19wYWdlJyBpbiBwYXJhbXMgYW5kICdhbGZhJyBpbiBwYXJhbXMgOgogIG9vMCA9IGludCAoIHBhcmFtcyBbICdjX3BhZ2UnIF0gKQogIGlmIDIyIC0gMjI6IG9vb09vTyAqIG9vMG8gKiBJMSAuIEkxSWlJMUlJSTExaSArIElpSUkxSWlJCiAgaWYgNSAtIDU6IE9PTyAlIElpSUkxSWlJCiAgaWYgODMgLSA4MzogSWlJSTFpMUkKICBpZiA3NSAtIDc1OiBJSW9vb08wb29PMG9vIC4gSUlvb29PMG9vTzBvbyArIE9PTyAvIElpIC0gb29Pb29PME9PTwogIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICIgKyAiLCIgLiBqb2luICgKIElJaTExSWkxICkgKyBJSUlpMTEgKyAiIGZyb20gc2VyaWVzIHdoZXJlIGxvd2VyKGNhdGVnb3J5KSAiICsgb3BlcmF0b3IgKyAiID8gQU5EIGFsZmEgPj0nIiArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICgKIHBhcmFtcyBbICdhbGZhJyBdICkgKyAiJyBBTkQgYWN0aXZlID4gMCBBTkQgIiArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICgKIHBhcmFtcyBbICdwYWdlJyBdICkgKyAiIG9yZGVyIGJ5IGFsZmEgYXNjLCBub21icmUgYXNjIExJTUlUICIgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICggdmFsdWUgLCApICkKIGVsc2UgOgogIHBhcmFtcyBbICdjX3BhZ2UnIF0gPSAxCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKAogSUlpMTFJaTEgKSArIElJSWkxMSArICIgZnJvbSBzZXJpZXMgd2hlcmUgYWN0aXZlID4gMCBhbmQgbG93ZXIoY2F0ZWdvcnkpICIgKyBvcGVyYXRvciArICIgPyBvcmRlciBieSBhbGZhIGFzYywgbm9tYnJlIGFzYyBMSU1JVCAiICsgc3RyICgKIG9vbzBvb09vTzBPbyApICwgKCB2YWx1ZSAsICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaWYgNjMgLSA2MzogSUlJSSAtIGkxaUkxICogSTEgJSBJSSAtIG9vCiBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ2FsZmE9JyArIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggSWkxMTFJIFsgMCBdIFsgbGVuICggSUlpMTFJaTEgKSBdICkKIHBhcmFtcyBbICdjX3BhZ2UnIF0gPSBvbzAKIEkxSWlJaUkgKCBJaTExMUkgLCBGYWxzZSAsIFRydWUgLCBGYWxzZSAsIHBhcmFtcyApCiBpZiA2NiAtIDY2OiBJMSAuIG9PTyArIG9vb09vTyAqIGlpMUkxaWkxSWlJaTEgLiBPT08KIGlmIDU0IC0gNTQ6IElpSUkxaTFJICsgT09vT29PMG8wbzBPTyArIG9vT29vTzBPT08KZGVmIGlJMUlpaUlJMWlJICggZmllbGRzICwgdGFibGUgLCBjYXRlZ29yeUNvbmRpdGlvbiApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBmaWVsZHMgKSArICIgZnJvbSAiICsgdGFibGUgKyAiIHdoZXJlIGFjdGl2ZSA+IDAgJXMgb3JkZXIgYnkgdXBkYXRlZCBkZXNjIGxpbWl0ICVzIiAlICggY2F0ZWdvcnlDb25kaXRpb24gLCBzdHIgKCBvb28wb29Pb08wT28gKSApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIEkxSWlJaUkgKCBJaTExMUkgLCBUcnVlICwgVHJ1ZSAsIFRydWUgKQogaWYgNTYgLSA1NjogSTEgKiBpaTFJMWlpMUlpSWkxCiBpZiAyNSAtIDI1OiBJSW9vb08wb29PMG9vIC8gaTFpSTEgLyBJaSAuIElJSUkKZGVmIGkxMWlJSWkgKCBvcmRlciApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBJSWkxMUlpMSApICsgIiBmcm9tIHNlcmllcyB3aGVyZSBhY3RpdmUgPiAwIG9yZGVyIGJ5ICIgKyBvcmRlciArICIgZGVzYywgbm9tYnJlIGFzYyBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgKQogaWYgNDggLSA0ODogb29vT29PIC0gb28gLyBvMDBvTzBvbzBPME8wICUgSWkxSSAlIElpCmRlZiBPb29Pb09vb28gKCBvcmRlciAsIHBhcmFtcyApIDoKIGlmIDQ2IC0gNDY6IG9vb09vTyAqIE9PTyAvIElpSUkxaTFJIC4gSTFJaUkxSUlJMTFpIC0gSWkxSSAvIE9PTwogaWYgNDYgLSA0Njogb28wbyAlIG9vIC8gaTFpSTEKIGlmIDUyIC0gNTI6IG9vb09vTyAlIE9Pb09vTzBvMG8wT08gLSBpaUlJaTFpMUlpaSAtIG8wMG9PMG9vME8wTzAKIGlmIDUxIC0gNTE6IG9PTwogaWYgNzcgLSA3Nzogb29vT29PIC0gT09PIC0gSTEgKiBJMQogaWYgMTEgLSAxMTogSWkxSSAqIG9vIC8gT09vT29PMG8wbzBPTyAvIGlpSUlpMWkxSWlpCiBJaTExMUkgPSBPMDAwbzAwMG8wT28gKCAicGVsaXMiICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwKICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICJzdHJmdGltZSgnJVktJW0tJWQnLHVwZGF0ZWQpLCBwdW50b3MsIGNhdGVnb3J5LCBhY3RpdmUsIHRtZGIsIgogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdICwgWyBdICwgWyBdICwgb3JkZXIgLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBOb25lICwgTm9uZSAsIGluZm8gPSBwYXJhbXMgKQogaWYgOSAtIDk6IG8wMG9PMG9vME8wTzAgKiBvT08gKyBJaUlJMWkxSSAuIE9Pb09vTzBvMG8wT08gLiBJaTFJIC0gb28wbwpkZWYgSUlJSTFJICggc2VyaWVfYXR0ciAsIHR5cGUgKSA6CiBvT08wb08gPSBJSUkxMUlpICggKQogaWYgb09PMG9PIDoKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgaWYgOTEgLSA5MTogT09PIC0gSWlJSTFpMUkgJSBpaUlJaTFpMUlpaSAqIG9vT29vTzBPT08gLyBpaUlJaTFpMUlpaQogIG9PTzBvTyA9ICclJyArIG9PTzBvTyArICclJwogIE8wbzBvb29vMDAgPSAnJwogIGlmIHR5cGUgIT0gSWlpMSA6CiAgIE8wbzBvb29vMDAgPSAnIGdyb3VwIGJ5IGdyb3VwX2lkJwogIHRyeSA6CiAgIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAiU2VsZWN0ICIgKyAiLCIgLiBqb2luICgKIHNlcmllX2F0dHIgKSArIElJSWkxMSArICIgZnJvbSAiICsgdHlwZSArICIgd2hlcmUgYWN0aXZlID4gMCBhbmQgbm9tYnJlIGxpa2UgPyAiICsgTzBvMG9vb28wMCArICIgb3JkZXIgYnkgYWxmYSBhc2MsIG5vbWJyZSBhc2MiICwKICggdW5pY29kZSAoIG9PTzBvTyAuIGRlY29kZSAoICd1dGYtOCcgKSApICwgKSApCiAgZXhjZXB0IDoKICAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKAogc2VyaWVfYXR0ciApICsgSUlJaTExICsgIiBmcm9tICIgKyB0eXBlICsgIiB3aGVyZSBhY3RpdmUgPiAwIGFuZCBub21icmUgbGlrZSA/ICIgKyBPMG8wb29vbzAwICsgIiBvcmRlciBieSBhbGZhIGFzYywgbm9tYnJlIGFzYyIgLAogKCBPb29vTzBPICggdW5pY29kZSAoIG9PTzBvTyAuIGRlY29kZSAoICd1dGYtOCcgKSApICkgLiB1cHBlciAoICkgLCApICkKICBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKICBpZiBsZW4gKCBJaTExMUkgKSA9PSAwIDoKICAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgIiArICIsIiAuIGpvaW4gKCBzZXJpZV9hdHRyICkgKyAiIGZyb20gIiArIHR5cGUgKyAiIHdoZXJlIGFjdGl2ZSA+IDAgYW5kIG5vbWJyZSBsaWtlID8gIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBhc2MiICwKICggT29vb08wTyAoIHVuaWNvZGUgKCBvT08wb08gLiBkZWNvZGUgKCAndXRmLTgnICkgKSApIC4gdXBwZXIgKCApICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiAgaWYgdHlwZSA9PSBJaWkxIDoKICAgSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgKQogIGVsc2UgOgogICBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSB7ICdwdW50b3MnIDogJ3RydWUnICwgJ2Fubm8nIDogJ3RydWUnIH0gKQogICBpZiAxNyAtIDE3OiBJSSAqIElpCiAgIGlmIDI2IC0gMjY6IG8wMG9PMG9vME8wTzAgKyBPT08gKyBvbzBvIC8gb29vT29PIC0gaWkxSTFpaTFJaUlpMSAvIElJSUkKZGVmIE8wTzAwT29vTzAwTyAoIGF1ZGlvID0gTm9uZSAsIHRhYiA9ICdzZXJpZXMnICwgcGFyYW1zID0geyB9ICkgOgogaWYgbm90IGF1ZGlvIDoKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgYXVkaW8sY291bnQoYXVkaW8pIGZyb20gIiArIHRhYiArICIgd2hlcmUgYXVkaW8hPSdFUycgYW5kIGFjdGl2ZSA+IDAgZ3JvdXAgYnkgYXVkaW8gb3JkZXIgYnkgYXVkaW8iICkKICBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogIGkxSWkxMWkgPSBbIF0KICBvMDBvME8gPSB7IH0KICBmb3IgSUlJMUkxaUkxSTFpSSBpbiBJaTExMUkgOgogICBpZiAzMiAtIDMyOiBJSW9vb08wb29PMG9vICsgSUlJSQogICBmb3IgSUkxSTFJSUkxMUlpMSBpbiBJSUkxSTFpSTFJMWlJIFsgMCBdIC4gcmVwbGFjZSAoICdFUycgLCAnJyApIC4gc3BsaXQgKCAnIycgKSA6CiAgICBpZiBJSTFJMUlJSTExSWkxIGFuZCBJSTFJMUlJSTExSWkxIG5vdCBpbiBvMDBvME8gOgogICAgIG8wMG8wTyBbIElJMUkxSUlJMTFJaTEgXSA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICAgIGVsaWYgSUkxSTFJSUkxMUlpMSA6CiAgICAgbzAwbzBPIFsgSUkxSTFJSUkxMUlpMSBdID0gbzAwbzBPIFsgSUkxSTFJSUkxMUlpMSBdICsgSUlJMUkxaUkxSTFpSSBbIDEgXQogICAgIGlmIDY4IC0gNjg6IG9vT29vTzBPT08gLSBvbwogICAgIGlmIDg0IC0gODQ6IEkxSWlJMUlJSTExaSArIG9vT29vTzBPT08gKyBJSW9vb08wb29PMG9vICsgSWkgKiBvb29Pb08gLSBJMQogIGZvciBJSTFJMUlJSTExSWkxICwgaWlpTzAwME9vIGluIG8wMG8wTyAuIGl0ZXJpdGVtcyAoICkgOgogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdICglcyknICUgKCBpMUlpSTFpaWkgLCBJSTFJMUlJSTExSWkxICwgaWlpTzAwME9vICkKICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gJycgKQogICBpZiB0YWIgPT0gJ3NlcmllcycgOgogICAgSTFJaWlpID0gJ3swfT9hY3Rpb249c2VyaWVzQnlMYW5nJmxhbmc9ezF9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBJSTFJMUlJSTExSWkxIC4gZW5jb2RlICggJ3V0Zi04JyApICkKICAgZWxzZSA6CiAgICBJMUlpaWkgPSAnezB9P2FjdGlvbj1wZWxpc0J5TGFuZyZsYW5nPXsxfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgSUkxSTFJSUkxMUlpMSAuIGVuY29kZSAoICd1dGYtOCcgKSApCiAgIGlJaTFJaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgdHJ5IDoKICAgaWYgNzMgLSA3MzogSWkgLyBJMUlpSTFJSUkxMWkgLiBvbyAuIElJSUkgLiBJMUlpSTFJSUkxMWkKICAgT09vMDAwT28gKCBvMG8wMDAwTzAgKQogIGV4Y2VwdCA6CiAgIHBhc3MKICB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKICB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogZWxzZSA6CiAgcGFyYW1zIFsgJ3NxbF9saW1pdCcgXSA9ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApCiAgcGFyYW1zIFsgImFjdGlvbiIgXSA9ICdwZWxpc0J5TGFuZycKICBpZiAncGFnZScgaW4gcGFyYW1zIGFuZCAnY19wYWdlJyBpbiBwYXJhbXMgOgogICBpZiA2OCAtIDY4OiBJaSAvIElpSUkxaTFJICUgSWlJSTFpMUkgLyBJMQogICBwYXJhbXMgWyAiYWN0aW9uUGFyYW1zIiBdID0gJ2xhbmc9JyArIGF1ZGlvCiAgZWxzZSA6CiAgIHBhcmFtcyBbICJjX3BhZ2UiIF0gPSAxCiAgIHBhcmFtcyBbICJhY3Rpb25QYXJhbXMiIF0gPSAnbGFuZz0nICsgYXVkaW8KICAgaWYgNDcgLSA0NzogSUlvb29PMG9vTzBvbyAqIE9PTyArIEkxSWlJMUlJSTExaQogICBpZiA0NCAtIDQ0OiBJSUlJICUgSUkgKyBJSUlJIC8gSWlJSTFJaUkgLyBvT08gLyBpMWlJMQogICBpZiA0NyAtIDQ3OiBJaUlJMUlpSSAlIElJIC4gSUlvb29PMG9vTzBvbyAqIGkxaUkxIC4gSUlJSQogIHBhcmFtcyBbICJzcWxfY29uZCIgXSA9ICIgYWN0aXZlID4gMCBhbmQgYXVkaW8gbGlrZSAnJSIgKyBhdWRpbyAuIGRlY29kZSAoICd1dGYtOCcgKSArICIlJyIKICBpZiB0YWIgPT0gJ3NlcmllcycgOgogICBPTzBPb08wME8wbyA9IElJaTExSWkxIFsgOiBdCiAgIGlmIDc5IC0gNzk6IGlpMUkxaWkxSWlJaTEgKiBvbwogICBpZiA4MCAtIDgwOiBJaTFJIC4gb09PICogSUkgLSBPT29Pb08wbzBvME9PCiAgIGlmIDYgLSA2OiBvbzBvIC8gSTEgKiBpaTFJMWlpMUlpSWkxICsgaWkxSTFpaTFJaUlpMSAvIEkxCiAgIElpMTExSSA9IE8wMDBvMDAwbzBPbyAoICJzZXJpZXMiICwgSUlpMTFJaTEgLCBbIF0gLCBbIF0gLCBbICJub21icmUiIF0gLCBwYXJhbXMgKQogICBJMUlpSWlJICggSWkxMTFJICwgVHJ1ZSAsIFRydWUgLCBGYWxzZSAsIHBhcmFtcyApCiAgZWxzZSA6CiAgIHBhcmFtcyBbICJhY3Rpb24iIF0gPSAncGVsaXNCeUxhbmcnCiAgIHBhcmFtcyBbICJzcWxfZ3JvdXAiIF0gPSAnIGdyb3VwX2lkICcKICAgcGFyYW1zIFsgInB1bnRvcyIgXSA9ICd0cnVlJwogICBwYXJhbXMgWyAiYW5ubyIgXSA9ICd0cnVlJwogICBpZiBwYXJhbXMgWyAiY19wYWdlIiBdID4gMSA6CiAgICBwYXJhbXMgWyAic3FsX2NvbmQiIF0gPSBwYXJhbXMgWyAic3FsX2NvbmQiIF0gKyAnIGFuZCAnICsgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBwYXJhbXMgWyAicGFnZSIgXSApCiAgICBpZiAyMiAtIDIyOiBJSUlJIC0gSUkgLSBJMSAtIG9vb09vTyArIEkxICUgSWlJSTFpMUkKICAgSWkxMTFJID0gTzAwMG8wMDBvME9vICggInBlbGlzIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbIF0gLCBbIF0gLCBbICJub21icmUiIF0gLCBwYXJhbXMgKQogICBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogICBpZiA4MiAtIDgyOiBJSSAtIG9vT29vTzBPT08gLyBvbyAvIElJIC4gT09vT29PMG8wbzBPTwogICBpZiA3NSAtIDc1OiBvbzBvCmRlZiBvT09PMG8gKCBwYXJhbXMgLCB0eXBlICkgOgogaWYgJ2xldHJhJyBpbiBwYXJhbXMgOgogIGkxaWkgPSBwYXJhbXMgWyAnbGV0cmEnIF0KIGVsc2UgOgogIGkxaWkgPSBOb25lCiBJMWlpMWlpaUkgPSB7ICdBJyA6ICd1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMTkyIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMTk4JyAsCiAnRScgOiAndW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIwMCBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIwMycgLAogJ0knIDogJ3VuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSAyMDQgQU5EIHVuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA8PSAyMDcnICwKICdPJyA6ICd1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjEwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjE0JyAsCiAnVScgOiAndW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDIxNyBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDIyMCcgfQogb29PT29vT08wME8gPSAnITAtOS4uJwogSUlpMUlpMWkxMTFpID0gJ3VuaWNvZGUodXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpKSA+PSA2NSBBTkQgdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpIDw9IDkwJwogaWYgdHlwZSA9PSAnc2VyaWUnIDoKICBvT29vID0gSUlpMTFJaTEKICBvT29vIC4gYXBwZW5kICggIkNBU0UgV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMTkyIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMTk4IFRoZW4gJ0EnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjA0IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjA3IFRoZW4gJ0knV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjAwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjAzIFRoZW4gJ0UnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjE3IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjIwIFRoZW4gJ1UnV2hlbiB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPj0gMjEwIEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gMjE0IFRoZW4gJ08nIFdIRU4gdW5pY29kZSh1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkpID49IDY1IEFORCB1bmljb2RlKHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSkgPD0gOTAgVEhFTiB1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkgRUxTRSAnITAtOS4uJyAgRU5EIGFsZmEgIiApCiAgSTFJaWlJSTExID0gJycKIGVsc2UgOgogIG9Pb28gPSBPME9vMG9PTwogIEkxSWlpSUkxMSA9ICdncm91cCBieSBncm91cF9pZCcKIGlmIG5vdCBpMWlpIDoKICBJSWkgPSAiIiAuIGpvaW4gKCBbICJXaGVuICIgKyBJMUlpaUlpICsgIiBUaGVuICciICsgaWlpMUlpSSArICInIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkKICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgSUlpSWlpMUlpSTFpID0gb09vTzBPMDAwMDAgLiBjdXJzb3IgKCApCiAgSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoCiAic2VsZWN0IGFsZmEsIGNvdW50IChhbGZhKSBmcm9tIChzZWxlY3QgQ0FTRSAiICsgSUlpICsgIiBXSEVOICIgKyBJSWkxSWkxaTExMWkgKyAiIFRIRU4gdXBwZXIoc3Vic3RyKG5vbWJyZSwgMSwgMSkpIEVMU0UgJyEwLTkuLicgIEVORCBhbGZhLCBub21icmUsICIgKyB0eXBlICsgIl9pZCBmcm9tICIgKyB0eXBlICsgInMgd2hlcmUgYWN0aXZlID4gMCApIGdyb3VwIGJ5IGFsZmEgb3JkZXIgYnkgYWxmYSIgKQogIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiAgaTFJaTExaSA9IFsgXQogIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgIGkxaWkgPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgIGlpaU8wMDBPbyA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXNbL0NPTE9SXSAoJXMpJyAlICggaTFJaUkxaWlpICwgaTFpaSAsIGlpaU8wMDBPbyApCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9ICcnICkKICAgSTFJaWlpID0gJ3swfT9hY3Rpb249ezF9c0J5QVombGV0cmE9ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCB0eXBlICwgaTFpaSApCiAgIGlJaTFJaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgdHJ5IDoKICAgaWYgNCAtIDQ6IElJICogSWlJSTFJaUkgLiBvb29Pb08gKiBJMQogICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiAgZXhjZXB0IDoKICAgcGFzcwogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBlbHNlIDoKICBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICBwYXJhbXMgWyAnYWN0aW9uJyBdID0gdHlwZSArICdzQnlBWicKICBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJycKICBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKICBwYXJhbXMgWyAnYW5ubycgXSA9ICd0cnVlJwogIHBhcmFtcyBbICJwdW50b3MiIF0gPSAidHJ1ZSIKICBwYXJhbXMgWyAibGV0cmEiIF0gPSBpMWlpCiAgcGFyYW1zIFsgJ2FjdGlvblBhcmFtcycgXSA9ICdsZXRyYT0nICsgaTFpaQogIGlmICdwYWdlJyBpbiBwYXJhbXMgYW5kICdjX3BhZ2UnIGluIHBhcmFtcyA6CiAgIG9vMCA9IGludCAoIHBhcmFtcyBbICdjX3BhZ2UnIF0gKQogICBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHBhcmFtcyBbICdwYWdlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkKICAgcGFyYW1zIFsgImNfcGFnZSIgXSA9IG9vMAogICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogICBpZiBpMWlpIGluIEkxaWkxaWlpSSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSBJMWlpMWlpaUkgWyBpMWlpIF0gKyAnIE9SJwogICBlbGlmIGkxaWkgPT0gb29PT29vT08wME8gOgogICAgSTFpaTFpaWlJIFsgaTFpaSBdID0gIkFORCIgLiBqb2luICggWyAiIE5PVCAoICIgKyBJMUlpaUlpICsgIikgIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkgKyAiIEFORCBOT1QgKCIgKyBJSWkxSWkxaTExMWkgKyAiKSBPUiIKICAgZWxzZSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSAnJwogICBPMG8wb29vbzAwID0gJycKICAgaWYgdHlwZSA9PSAncGVsaScgOgogICAgb09vbyA9IGlpSTExMTFJSWlpSQogICAgTzBvMG9vb28wMCA9ICcgZ3JvdXAgYnkgZ3JvdXBfaWQnCiAgICBpZiA4OSAtIDg5OiBJSW9vb08wb29PMG9vICsgaTFpSTEgLiBJaUlJMUlpSQogICAgaWYgNDUgLSA0NTogT09PCiAgIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKAogInNlbGVjdCAiICsgIiwiIC4gam9pbiAoIG9Pb28gKSArICIgZnJvbSAiICsgdHlwZSArICJzIHdoZXJlIGFjdGl2ZSA+IDAgQU5EICggIiArIEkxaWkxaWlpSSBbCiBpMWlpIF0gKyAiIHVwcGVyKHN1YnN0cihub21icmUsIDEsIDEpKSA9PSA/KSBhbmQgY2F0ZWdvcnkgbm90IGluICgnRG9jdW1lbnRhbCcsICdNdXNpY2EnKSBhbmQgIiArIHBhcmFtcyBbICdzcWxfY29uZCcgXSArICIgIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgLAogKCBpMWlpICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogICBpZiB0eXBlID09ICdwZWxpJyA6CiAgICBPb29PMDBPT28wT09PICggSWkxMTFJICwgdHlwZSA9ICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKICAgZWxzZSA6CiAgICBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ2FsZmEgPicgKyBpMWlpCiAgICBJMUlpSWlJICggSWkxMTFJICwgVHJ1ZSAsIFRydWUgLCBGYWxzZSApCiAgZWxzZSA6CiAgIG9vMCA9IDEKICAgcGFyYW1zIFsgImNfcGFnZSIgXSA9IG9vMAogICBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiAgIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogICBpZiBpMWlpIGluIEkxaWkxaWlpSSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSBJMWlpMWlpaUkgWyBpMWlpIF0gKyAnIE9SJwogICBlbGlmIGkxaWkgPT0gb29PT29vT08wME8gOgogICAgSTFpaTFpaWlJIFsgaTFpaSBdID0gIkFORCIgLiBqb2luICggWyAiIE5PVCAoICIgKyBJMUlpaUlpICsgIikgIiBmb3IgaWlpMUlpSSAsIEkxSWlpSWkgaW4gSTFpaTFpaWlJIC4gaXRlcml0ZW1zICggKSBdICkgKyAiIEFORCBOT1QgKCIgKyBJSWkxSWkxaTExMWkgKyAiKSBPUiIKICAgZWxzZSA6CiAgICBJMWlpMWlpaUkgWyBpMWlpIF0gPSAnJwogICBPMG8wb29vbzAwID0gJycKICAgaWYgdHlwZSA9PSAncGVsaScgOgogICAgb09vbyA9IGlpSTExMTFJSWlpSQogICAgTzBvMG9vb28wMCA9ICcgZ3JvdXAgYnkgZ3JvdXBfaWQnCiAgICBpZiAyOCAtIDI4OiBJaUlJMUlpSSArIEkxICUgaWkxSTFpaTFJaUlpMQogICBJSWlJaWkxSWlJMWkgLiBleGVjdXRlICgKICJzZWxlY3QgIiArICIsIiAuIGpvaW4gKCBvT29vICkgKyAiIGZyb20gIiArIHR5cGUgKyAicyB3aGVyZSBhY3RpdmUgPiAwIGFuZCBjYXRlZ29yeSBub3QgaW4gKCdEb2N1bWVudGFsJywgJ011c2ljYScpIEFORCAoICIgKyBJMWlpMWlpaUkgWwogaTFpaSBdICsgIiB1cHBlcihzdWJzdHIobm9tYnJlLCAxLCAxKSkgPT0gPykgIiArIE8wbzBvb29vMDAgKyAiIG9yZGVyIGJ5IG5vbWJyZSBsaW1pdCAiICsgc3RyICggb29vMG9vT29PME9vICkgLAogKCBpMWlpICwgKSApCiAgIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogICBvT29PME8wMDAwMCAuIGNsb3NlICggKQogICBpZiB0eXBlID09ICdwZWxpJyA6CiAgICBPb29PMDBPT28wT09PICggSWkxMTFJICwgdHlwZSA9ICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKICAgZWxzZSA6CiAgICBpZiAyNSAtIDI1OiBJSUlJIC4gSWkxSSAlIG8wMG9PMG9vME8wTzAgLyBvMDBvTzBvbzBPME8wIC4gSUlJSQogICAgSTFJaUlpSSAoIElpMTExSSAsIFRydWUgLCBUcnVlICwgRmFsc2UgLCBwYXJhbXMgKQogICAgaWYgODggLSA4ODogT09PIC8gSUkgLyBpaTFJMWlpMUlpSWkxIC0gSWkxSSAvIEkxCiAgICBpZiAxIC0gMTogT09vT29PMG8wbzBPTyAuIElpSUkxaTFJICogaWlJSWkxaTFJaWkgKyBpMWlJMQpkZWYgSTFJMWkxaTExSTFpICggb3B0aW9uICkgOgogSTFJSWlJMTFJSUkgPSBbIF0KIGlmICJTZXJpZXMiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19zZXJpZXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9oSFFCYWFXLnBuZycgLAogJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdGYXZvcml0YXMnICwgb09PTzBPMCA6ICdsaXN0ZmF2cycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1RrelZIMXQucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzJyAsIG9PT08wTzAgOiBJaWkxICwgJ2ljbycgOiBJaWkxICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgNEsnICwgb09PTzBPMCA6ICdzZXJpZXNfNGsnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9hQ1NEZHZ2LnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcyAzRCcgLCBvT09PME8wIDogJ3Nlcmllc18zZCcgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL09CbUFIUnQucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAoKICAjIEkxSWlJMUlJSTExaSAuIElpMUkgLSBJaUlJMWkxSSAlIGlpSUlpMWkxSWlpICogSWkxSQogIHsgJ3RpdGxlJyA6ICdEaWJ1am9zJyAsIG9PT08wTzAgOiAnc2VyaWVzX2RpYnVqb3MnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9SNklvZ0R6LnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1JldHJvJyAsIG9PT08wTzAgOiAnc2VyaWVzX3JldHJvJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vU3VLZG5UQy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnVGVsZW5vdmVsYXMnICwgb09PTzBPMCA6ICd0ZWxlbm92ZWxhcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1F1VlRJbDEucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIEEtWicgLCBvT09PME8wIDogJ3Nlcmllc0J5QVonICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS90QW5wZ2dBLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ090cm9zIElkaW9tYXMnICwgb09PTzBPMCA6ICdzZXJpZXNCeUxhbmcnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9Bblo2TVlzLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ03DoXMgVmlzdGFzJyAsIG9PT08wTzAgOiAnc2VyaWVzX21hc192aXN0YXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9TQkJVMllmLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ01hcyBWaXN0YXMgw5psdGltbyBNZXMnICwgb09PTzBPMCA6ICdzZXJpZXNfbWFzX3Zpc3Rhc19tZXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS95Ymo4TDFwLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBTZXJpZScgLCBvT09PME8wIDogJ3NlYXJjaFNlcmllJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vSWJBOFdQbS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGVsaWYgIlBlbGlzIiA9PSBvcHRpb24gOgogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdSZWNpZW50ZXMnICwgb09PTzBPMCA6ICd1bHRpbWFzX3BlbGlzJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vM3I0emRtVi5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdGYXZvcml0YXMnICwgb09PTzBPMCA6ICdsaXN0ZmF2cCcgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL2VqWlhRZ1YucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ0NpbmUgNEsnICwgb09PTzBPMCA6ICdzYWdhX2RldGFpbCZzYWdhPSVzJyAlIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggJ0NpbmUgNEsnICkgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzI5UWUzV3AucG5nJyAsCiAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdDaW5lIDNEJyAsIG9PT08wTzAgOiAnc2FnYV9kZXRhaWwmc2FnYT0lcycgJSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoICdDaW5lIDNEJyApICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS85RjZTbUt5LnBuZycgLAogJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBvMDBPMG8wME9PTzAgKCBJMUlJaUkxMUlJSSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgQS1aJyAsIG9PT08wTzAgOiAncGVsaXNCeUFaJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vSGlsTFhJSy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnR2VuZXJvJyAsIG9PT08wTzAgOiAnbGlzdF9nZW5lcm9zJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vUnp6WlJZUy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdwb3IgQcOxbycgLCBvT09PME8wIDogJ2FueW8nICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9URUlES3ZkLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ090cm9zIElkaW9tYXMnICwgb09PTzBPMCA6ICdwZWxpc0J5TGFuZycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL21MdzZrRTkucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2FnYXMnICwgb09PTzBPMCA6ICdzYWdhcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzJ0VUpjN2EucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1RvcCAoQcOxbyknICwgb09PTzBPMCA6ICdhbnlvX3RvcCcgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL0U3SGZ0eFUucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ1JlY2llbnRlcyAoQcOxbyknICwgb09PTzBPMCA6ICd1bHRpbWFzX3BlbGlzX2FueW8nICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9OeHQ0WWprLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ03DoXMgVmlzdGFzJyAsIG9PT08wTzAgOiAncGVsaXNfbWFzX3Zpc3RhcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1dTbVNINW0ucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTcOhcyBWaXN0YXMgw5psdGltbyBNZXMnICwgb09PTzBPMCA6ICdwZWxpc19tYXNfdmlzdGFzX21lcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1loRE1vcW0ucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIFBlbGknICwgb09PTzBPMCA6ICdzZWFyY2hQZWxpJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vQXM1c1FhVC5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGVsaWYgIkRpYnVqb3MiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnRmF2b3JpdG9zJyAsIG9PT08wTzAgOiAnbGlzdGZhdmQnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9YQ3p6WFF4LnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdTZXJpZXMgRGlidWpvcycgLCBvT09PME8wIDogJ3Nlcmllc19kaWJ1am9zJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vUjZJb2dEei5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnUGVsaXMgRGlidWpvcycgLCBvT09PME8wIDogJ3BlbGlfaW5mJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vOTZReVRBMy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnRXNwZWNpYWwgRGlzbmV5JyAsIG9PT08wTzAgOiAnc2FnYV9kZXRhaWwmc2FnYT0lcycgJSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoICdFc3BlY2lhbCBEaXNuZXknICkgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzVxSXpNSmMucG5nJyAsCiAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdUb3AgUGVsaXMgRGlidWpvcycgLCBvT09PME8wIDogJ3RvcF9wZWxpX2luZicgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL29lZzdUYlkucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgRGlidWpvcyBSZWNpZW50ZXMnICwgb09PTzBPMCA6ICdsYXN0X3BlbGlfaW5mJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vR1dZMzRXMC5wbmcnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKAogeyAndGl0bGUnIDogJ03DoXMgVmlzdGFzJyAsIG9PT08wTzAgOiAncGVsaXNfZGlidWpvc19tYXNfdmlzdGFzJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vMnBMT3lIRS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnTcOhcyBWaXN0YXMgw5psdGltbyBNZXMnICwgb09PTzBPMCA6ICdwZWxpc19kaWJ1am9zX21hc192aXN0YXNfbWVzJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vNkZyTG5VUi5wbmcnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBlbGlmICJIZXJyYW1pZW50YXMiID09IG9wdGlvbiA6CiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnTGltcGlhciBUZW1wb3JhbGVzJyAsIG9PT08wTzAgOiAnY2xlYW4nICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9VRGN5azA3LnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0NyZWFyIENvcGlhIEZhdm9yaXRvcycgLCBvT09PME8wIDogJ2NyZWF0ZUNvcHknICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS8ybmFERDhOLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1Jlc3RhdXJhciBGYXZvcml0b3MnICwgb09PTzBPMCA6ICdyZXN0b3JlQ29weScgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL0QxbWxjeUsucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQWJyaXIgQWp1c3RlcycgLCBvT09PME8wIDogJ29wZW5TZXR0aW5ncycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzh3RVNTQ0sucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgRXh0ZW5kZWQgSW5mbycgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPXNjcmlwdC5leHRlbmRlZGluZm8nICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS85bjVqd2w3LnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIHJlc29sdmV1cmwnICwgb09PTzBPMCA6ICdpbnN0YWxsJyAsICdvcHRpb25zJyA6ICcmb3B0aW9ucz1zY3JpcHQubW9kdWxlLnJlc29sdmV1cmwnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9zalF0NlByLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIFNpbXBsZSBEb3dubG9hZGVyJyAsIG9PT08wTzAgOiAnaW5zdGFsbCcgLCAnb3B0aW9ucycgOiAnJm9wdGlvbnM9c2NyaXB0Lm1vZHVsZS5zaW1wbGUuZG93bmxvYWRlcicgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL3hFS0RlV3gucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgQWRkIFRvIExpYicgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPWNvbnRleHQuYWRkdG9saWInICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS84cGxJcWxBLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0luc3RhbGFyIEFncmVnbyBDb250ZW5pZG8nICwgb09PTzBPMCA6ICdpbnN0YWxsJyAsICdvcHRpb25zJyA6ICcmb3B0aW9ucz1jb250ZXh0LmFncmVnYWNvbnRlbmlkbycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL3EzMG4xUmkucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSW5zdGFsYXIgQ29tbW9uIFBsdWdpbiBDYWNoZScgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPXNjcmlwdC5jb21tb24ucGx1Z2luLmNhY2hlJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vQXFLMnJIdS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdJbnN0YWxhciBQbHVnaW4gWW91VHViZScgLCBvT09PME8wIDogJ2luc3RhbGwnICwgJ29wdGlvbnMnIDogJyZvcHRpb25zPXBsdWdpbi52aWRlby55b3V0dWJlJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vNWU3YUk3Sy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGVsaWYgIkFuaW1lIiA9PSBvcHRpb24gOgogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdQZWxpcyBBbmltZScgLCBvT09PME8wIDogJ3BlbGlfYW5pbWUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9VTWVia3RHLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdTZXJpZXMgQW5pbWUnICwgb09PTzBPMCA6ICdzZXJpZXNfYW5pbWUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9UcGxJRFBkLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIGlmIDc2IC0gNzY6IG9vICUgSWkxSSAtIElpCiAgaWYgMjYgLSAyNjogT09vT29PMG8wbzBPTyAuIG9vMG8KICBpZiA4NCAtIDg0OiBpaTFJMWlpMUlpSWkxICsgSUlvb29PMG9vTzBvbyArIG8wMG9PMG9vME8wTzAKICBpZiA4IC0gODogSWkxSSAqIEkxICogSWlJSTFJaUkgLyBvT08gKyBJSW9vb08wb29PMG9vCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUmVjaWVudGVzJyAsIG9PT08wTzAgOiAndWx0aW1hc19zZXJpZXNfYW5pbWUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9IQ1k4bXdRLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogZWxpZiAiRG9jdW1lbnRhbCIgPT0gb3B0aW9uIDoKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnRG9jdW1lbnRhbGVzIEEvWicgLCBvT09PME8wIDogJ3Nlcmllc19kb2N1bWVudGFsZXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9NUGZiOEVnLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1JlY2llbnRlcycgLCBvT09PME8wIDogJ3VsdGltb3NfZG9jdW1lbnRhbGVzJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vVDRUdHZmaS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGVsaWYgIk11c2ljYSIgPT0gb3B0aW9uIDoKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdNdXNpY2EgQS9aJyAsIG9PT08wTzAgOiAnc2VyaWVzX211c2ljYScgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzI2WXRiSlUucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUmVjaWVudGUnICwgb09PTzBPMCA6ICd1bHRpbWFzX211c2ljYXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9HR3hZa2VaLnBuZycgLAogJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBpZiAxNyAtIDE3OiBvT08KIGVsc2UgOgogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0Zhdm9yaXRvcycgLCBvT09PME8wIDogJ2xpc3RmYXYnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS8xbEs2NWpuLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIGlmIDQ4IC0gNDg6IGlpSUlpMWkxSWlpIC0gT09vT29PMG8wbzBPTwogIGlmIDMxIC0gMzE6IG8wMG9PMG9vME8wTzAgLyBJaTFJICUgSUlJSQogIGlmIDI5IC0gMjk6IElpIC4gb28gLiBPT29Pb08wbzBvME9PIC0gSWlJSTFJaUkKICBpZiA5OCAtIDk4OiBJaUlJMUlpSSArIElJb29vTzBvb08wb28gJSBvbzBvICsgSWlJSTFJaUkKICBpZiA1MiAtIDUyOiBJSW9vb08wb29PMG9vCiAgaWYgMTQgLSAxNDogb29vT29PIC0gaWlJSWkxaTFJaWkKICBpZiA0NiAtIDQ2OiBPT29Pb08wbzBvME9PICUgaTFpSTEgLSBvMDBvTzBvbzBPME8wIC0gbzAwb08wb28wTzBPMAogIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzJyAsIG9PT08wTzAgOiAncGVsaXNfbWVudScgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzlqQ0lZOHAucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzJyAsIG9PT08wTzAgOiAnc2VyaWVzX21lbnUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9FcFFuOFVzLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIEkxSUlpSTExSUlJIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6ICdEaWJ1am9zJyAsIG9PT08wTzAgOiAnZGlidWpvc19tZW51JyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vRlp6Znhoai5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnQW5pbWUnICwgb09PTzBPMCA6ICdhbmltZV9tZW51JyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vSVhKYm5uRi5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdNdXNpY2EnICwgb09PTzBPMCA6ICdtdXNpY2FfbWVudScgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzlWNDdYWWcucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnRG9jdW1lbnRhbGVzJyAsIG9PT08wTzAgOiAnZG9jdW1lbnRhbGVzX21lbnUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9ESENlcW5sLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogIGlmIDcgLSA3OiBPT08gLyBJMQogIGlmIDE1IC0gMTU6IElJb29vTzBvb08wb28gJSBJSUlJCiAgaWYgNzkgLSA3OTogSTEgLiBPT29Pb08wbzBvME9PCiAgaWYgNjYgLSA2Njogb29vT29PIC8gSWlJSTFpMUkKICBpZiA0NiAtIDQ2OiBvbyAuIElpSUkxaTFJIC8gaWkxSTFpaTFJaUlpMSAuIG9vb09vTyAvIElpSUkxSWlJIC0gb09PCiAgaWYgMjQgLSAyNDogb29Pb29PME9PTyAlIG9PTwogIGlmIDQ5IC0gNDk6IElJSUkgLiBvbyAlIElJSUkgJSBPT29Pb08wbzBvME9PICUgT09PIC4gSUkKICBpZiA5NSAtIDk1OiBJSSAvIGkxaUkxICUgSWkxSQogIGlmIDQ4IC0gNDg6IG8wMG9PMG9vME8wTzAgJSBpaTFJMWlpMUlpSWkxICogSTFJaUkxSUlJMTFpICUgSTEgKyBvb29Pb08gKyBJSQogIGlmIDM4IC0gMzg6IGlpMUkxaWkxSWlJaTEKICBpZiA4MyAtIDgzOiBJaTFJCiAgaWYgNDggLSA0ODogaWlJSWkxaTFJaWkKICBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoCiB7ICd0aXRsZScgOiAnVHV0b3JpYWxlcycgLCBvT09PME8wIDogJ3NhZ2FfZGV0YWlsJnNhZ2E9JXMnICUgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCAnVHV0b3JpYWxlcycgKSAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vUXliNkt3Vy5wbmcnICwKICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiAgSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnSGVycmFtaWVudGFzJyAsIG9PT08wTzAgOiAnaGVycmFtaWVudGFzX21lbnUnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9zOVJHck1vLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogcmV0dXJuIEkxSUlpSTExSUlJCiBpZiAzNCAtIDM0OiBpaUlJaTFpMUlpaSAuIG9vICUgb29Pb29PME9PTwogaWYgOSAtIDk6IEkxSWlJMUlJSTExaSAlIEkxSWlJMUlJSTExaSArIG9PTyArIG9PTwogaWYgMzYgLSAzNjogaWlJSWkxaTFJaWkgKiBpMWlJMQpkZWYgb09PT28gKCApIDoKIEkxSUlpSTExSUlJID0gWyBdCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMnICwgb09PTzBPMCA6IElpaTEgLCAnaWNvJyA6IElpaTEgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIEEtWicgLCBvT09PME8wIDogJ3Nlcmllc0J5QVonICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS90QW5wZ2dBLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIEluZmFudGlsZXMnICwgb09PTzBPMCA6ICdzZXJpZXNfZGlidWpvcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1I2SW9nRHoucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdTZXJpZXMgUmV0cm8nICwgb09PTzBPMCA6ICdzZXJpZXNfcmV0cm8nICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9TdUtkblRDLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIDRLJyAsIG9PT08wTzAgOiAnc2VyaWVzXzRrJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vYUNTRGR2di5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NlcmllcyAzRCcgLCBvT09PME8wIDogJ3Nlcmllc18zZCcgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL09CbUFIUnQucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdGYXZvcml0b3MnICwgb09PTzBPMCA6ICdsaXN0ZmF2JyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vMWxLNjVqbi5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzIEEtWicgLCBvT09PME8wIDogJ3BlbGlzQnlBWicgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL0hpbExYSUsucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyAoR2VuZXJvKScgLCBvT09PME8wIDogJ2xpc3RfZ2VuZXJvcycgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tL1J6elpSWVMucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdQZWxpcyAoQcOxbyknICwgb09PTzBPMCA6ICdhbnlvJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vVEVJREt2ZC5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzIERpYnVqb3MnICwgb09PTzBPMCA6ICdwZWxpX2luZicgLCAnaWNvJyA6ICdodHRwczovL2kuaW1ndXIuY29tLzk2UXlUQTMucG5nJyAsICdmYW4nIDogJ2ZhbmFydF9wYWxhbnRpcicgfSApCiBJMUlJaUkxMUlJSSAuIGFwcGVuZCAoIHsgJ3RpdGxlJyA6ICdUb3AgUGVsaXMgKEHDsW8pJyAsIG9PT08wTzAgOiAnYW55b190b3AnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9FN0hmdHhVLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnVG9wIFBlbGlzIERpYnVqb3MnICwgb09PTzBPMCA6ICd0b3BfcGVsaV9pbmYnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9vZWc3VGJZLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnUGVsaXMgRGlidWpvcyBSZWNpZW50ZXMnICwgb09PTzBPMCA6ICdsYXN0X3BlbGlfaW5mJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vR1dZMzRXMC5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1BlbGlzIFJlY2llbnRlcycgLCBvT09PME8wIDogJ3VsdGltYXNfcGVsaXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS8zcjR6ZG1WLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnU2VyaWVzIFJlY2llbnRlcycgLCBvT09PME8wIDogJ3VsdGltYXNfc2VyaWVzJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vaEhRQmFhVy5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ1NhZ2FzJyAsIG9PT08wTzAgOiAnc2FnYXMnICwgJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS8ydFVKYzdhLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInIH0gKQogSTFJSWlJMTFJSUkgLiBhcHBlbmQgKCB7ICd0aXRsZScgOiAnQnVzY2FyIFBlbGknICwgb09PTzBPMCA6ICdzZWFyY2hQZWxpJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vQXM1c1FhVC5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIEkxSUlpSTExSUlJIC4gYXBwZW5kICggeyAndGl0bGUnIDogJ0J1c2NhciBTZXJpZScgLCBvT09PME8wIDogJ3NlYXJjaFNlcmllJyAsICdpY28nIDogJ2h0dHBzOi8vaS5pbWd1ci5jb20vSWJBOFdQbS5wbmcnICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKIGlmIDU2IC0gNTY6IG9vMG8gKiBvbyAlIGlpSUlpMWkxSWlpICsgb29Pb29PME9PTyAtIElJSUkgKyBJMUlpSTFJSUkxMWkKIGlmIDQyIC0gNDI6IElJIC0gb29vT29PICUgb28KIHJldHVybiBJMUlJaUkxMUlJSQogaWYgNjIgLSA2MjogSTEKIGlmIDg1IC0gODU6IElpIC4gaWlJSWkxaTFJaWkgLiBPT29Pb08wbzBvME9PCmRlZiBJMUlpMTFJSTFpaTEgKCBmdW5jdGlvbl9tZW51ICkgOgogaWYgMTkgLSAxOTogT09vT29PMG8wbzBPTwogSTFJSWlJMTFJSUkgPSBmdW5jdGlvbl9tZW51CiBpMUlpMTFpID0gWyBdCiBmb3Igb29vT29vMDAwbzAgaW4gSTFJSWlJMTFJSUkgOgogIGlmIG9vb09vbzAwMG8wIFsgJ2ljbycgXSAuIGxvd2VyICggKSAuIHN0YXJ0c3dpdGggKCAnaHR0cCcgKSA6CiAgIEkxSWlJMTExMTExMSA9IG9vb09vbzAwMG8wIFsgJ2ljbycgXQogIGVsc2UgOgogICBJMUlpSTExMTExMTEgPSAnJXMvJXMucG5nJyAlICggaWlpMTFpMUlJaSAsIG9vb09vbzAwMG8wIFsgJ2ljbycgXSApCiAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gJ1tDT0xPUiAlc11bQl0lc1svQl1bL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIG9vb09vbzAwMG8wIFsgJ3RpdGxlJyBdICkgLCBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsCiBwb3N0ZXIgPSAnJXMvJXMuanBnJyAlICggaWlpMTFpMUlJaSAsIG9vb09vbzAwMG8wIFsgJ2ZhbicgXSApICkKICBpZiAnb3B0aW9ucycgaW4gb29vT29vMDAwbzAgOgogICBJMUlpaWkgPSAnezB9P3sxfT17Mn17M30nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBvb29Pb28wMDBvMCBbIG9PT08wTzAgXSAsIG9vb09vbzAwMG8wIFsgJ29wdGlvbnMnIF0gKQogIGVsc2UgOgogICBJMUlpaWkgPSAnezB9P3sxfT17Mn0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBvb29Pb28wMDBvMCBbIG9PT08wTzAgXSApCiAgaUlpMUlpID0gVHJ1ZQogIGlmICdpc1NhZ2EnIGluIG9vb09vbzAwMG8wIGFuZCBvb29Pb28wMDBvMCBbICdpc1NhZ2EnIF0gPT0gJ3RydWUnIDoKICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggSUkxSWkxMWkxSWkxSSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICggb29vT29vMDAwbzAgWyAndGl0bGUnIF0gKSApICkKICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgaWYgMTcgLSAxNzogbzAwb08wb28wTzBPMAogIE9PbzAwME9vICggTzBPMDAwMDAwT28gKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiAxOCAtIDE4OiBJSUlJIC4gSUlvb29PMG9vTzBvbyAqIG9vT29vTzBPT08gKiBPT29Pb08wbzBvME9PICUgSUlJSSAtIG9vT29vTzBPT08KZGVmIE9PbzAwME9vICggdmlldyApIDoKIGlmIHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdFbmFibGVWaWV3JyApICkgPT0gJ3RydWUnIGFuZCB2aWV3ICE9ICdub25lJyA6CiAgaWYgNzIgLSA3MjogaWlJSWkxaTFJaWkgJSBvMDBvTzBvbzBPME8wICogb28gKyBJSW9vb08wb29PMG9vIC8gSUkKICBpZiA0NCAtIDQ0OiBpaTFJMWlpMUlpSWkxICUgSWkxSQogIGlmIDEzIC0gMTM6IElpIC0gSWlJSTFJaUkKICBpZiA4IC0gODogSWlJSTFpMUkKICBpZiA5NSAtIDk1OiBPT29Pb08wbzBvME9PIC4gb28wbwogIGlmIDYwIC0gNjA6IG9vMG8gKiBJaUlJMUlpSSArIG9vT29vTzBPT08gJSBvb09vb08wT09PCiAgaWYgOTMgLSA5MzogSUkgJSBvbzBvIC0gSTFJaUkxSUlJMTFpIC8gb29Pb29PME9PTyAvIG9PTwogIGlmIDgzIC0gODM6IEkxCiAgaWYgNDYgLSA0NjogSUlvb29PMG9vTzBvbyAtIElJSUkgKyBPT08gJSBpMWlJMQogIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICJDb250YWluZXIuU2V0Vmlld01vZGUoJXMpIiAlIHN0ciAoIHZpZXcgKSApCiAgaWYgMTEgLSAxMTogSUkgKyBvbzBvCmRlZiBvMDBPMG8wME9PTzAgKCBjYXRlZ29yaWVzICkgOgogSWkxMWkxaUlpSUkxMSA9IHhibWMgLiB0cmFuc2xhdGVQYXRoICggX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdmYXZTYWdhJyApICkKIGlmIElpMTFpMWlJaUlJMTEgIT0gJycgYW5kIElpMTFpMWlJaUlJMTEgIT0gJ2ZhbHNlJyA6CiAgaWYgOTAgLSA5MDogb29Pb29PME9PTyArIGlpMUkxaWkxSWlJaTEgLSBJSW9vb08wb29PMG9vIC4gSTFJaUkxSUlJMTFpIC4gb29Pb29PME9PTyArIE9PTwogIGkxaTExMWlpaWlJSUkgPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggSWkxMWkxaUlpSUkxMSApICwgaWNvbkltYWdlID0gJ2h0dHBzOi8vaS5pbWd1ci5jb20vMnRVSmM3YS5wbmcnICkKICBjYXRlZ29yaWVzIC4gYXBwZW5kICgKIHsgJ3RpdGxlJyA6IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggSWkxMWkxaUlpSUkxMSApICwgb09PTzBPMCA6ICdzYWdhX2RldGFpbCZzYWdhPSVzJyAlIElpMTFpMWlJaUlJMTEgLAogJ2ljbycgOiAnaHR0cHM6Ly9pLmltZ3VyLmNvbS8ydFVKYzdhLnBuZycgLCAnZmFuJyA6ICdmYW5hcnRfcGFsYW50aXInICwgJ2lzU2FnYScgOiAndHJ1ZScgfSApCiAgaWYgNDQgLSA0NDogb28gKiBvbyAlIElJSUkgKiBJSSAqIElpMUkgLiBJSUlJCiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAic2VsZWN0IGVzcGVjaWFsIGZyb20gdmVyc2lvbiIgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaWYgSWkxMTFJIFsgMCBdIGlzIG5vdCBOb25lIGFuZCBJaTExMUkgWyAwIF0gWyAwIF0gaXMgbm90IE5vbmUgOgogIE9vMG8wTyA9IElpMTExSSBbIDAgXSBbIDAgXSAuIHNwbGl0ICggJyMnICkKICBJMWlJSTFJSTFpSUkgPSAwCiAgZm9yIGlpaTFJaUkgaW4geHJhbmdlICggMCAsIGxlbiAoIE9vMG8wTyApIC8gMiApIDoKICAgaWYgMjQgLSAyNDogSUkgKyBvT08gJSBvMDBvTzBvbzBPME8wCiAgIGlmIDIxIC0gMjE6IElJb29vTzBvb08wb28gLSBpaTFJMWlpMUlpSWkxICogSUlJSSAvIGkxaUkxICsgbzAwb08wb28wTzBPMAogICBjYXRlZ29yaWVzIC4gYXBwZW5kICggeyAndGl0bGUnIDogT28wbzBPIFsgaWlpMUlpSSAqIDIgXSAsIG9PT08wTzAgOiAnc2FnYV9kZXRhaWwmc2FnYT0lcycgJSBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIE9vMG8wTyBbIGlpaTFJaUkgKiAyIF0gKSAsICdpY28nIDogT28wbzBPIFsgKCBpaWkxSWlJICogMiApICsgMSBdICwgJ2ZhbicgOiAnZmFuYXJ0X3BhbGFudGlyJyB9ICkKICAgaWYgNjMgLSA2Mzogb29Pb29PME9PTyAlIE9Pb09vTzBvMG8wT08KZGVmIGlpaUkxMUkxSTExMTEgKCBwYXJhbXMgKSA6CiBpZiA3NiAtIDc2OiBJMUlpSTFJSUkxMWkgLyBJaSArIGkxaUkxIC4gT09PIC8gSWkxSSAqIElpSUkxSWlJCiBpSUlJSTEgPSB4Ym1jIC4gZ2V0Q29uZFZpc2liaWxpdHkgKCAnU3lzdGVtLkhhc0FkZG9uKCVzKScgJSBwYXJhbXMgWyAnb3B0aW9ucycgXSApCiBpZiBpSUlJSTEgOgogIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggJ1BhbGFudGlyJyAsICdFbCBhZGRvbiB5YSBlc3RhYmEgaW5zdGFsYWRvJyAsIHhibWNndWkgLiBOT1RJRklDQVRJT05fSU5GTyAsIDUwMDAgKQogZWxzZSA6CiAgaWYgMTggLSAxODogaWkxSTFpaTFJaUlpMSAqIEkxIC4gb28wbwogIGlmIDgzIC0gODM6IElpIC8gb09PCiAgaWYgNTAgLSA1MDogb09PICogSWlJSTFpMUkgKiBJSUlJICogSWlJSTFpMUkgKiBJaUlJMUlpSQogIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICd4Ym1jLmluc3RhbGxhZGRvbiglcyknICUgcGFyYW1zIFsgJ29wdGlvbnMnIF0gLCBUcnVlICkKICBpZiAyNCAtIDI0OiBJaSAuIG9vb09vTyArIEkxICogb28wbyAqIElJb29vTzBvb08wb28gLyBJMQogIGlmIDc5IC0gNzk6IG9vT29vTzBPT08gLSBvT08gKyBPT29Pb08wbzBvME9PIC0gb29vT29PIC4gb28gKiBvbwogIGlmIDcyIC0gNzI6IEkxSWlJMUlJSTExaSAlIG9vCmRlZiBpSWlJSWkxSWlpMWkgKCBwYXJhbXMgKSA6CiBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSAnYWN0aXZlID4gMCAgYW5kIGdyb3VwX2lkID0gJyArIHBhcmFtcyBbICdncm91cElkJyBdCiBJaTExMUkgPSBPMDAwbzAwMG8wT28gKCAicGVsaXMiICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwKICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICJzdHJmdGltZSgnJVktJW0tJWQnLHVwZGF0ZWQpLCBwdW50b3MsIGNhdGVnb3J5LCBhY3RpdmUsIHRtZGIiCiBdICwgWyBdICwgWyBdICwgWyAndGFncyBhc2MnIF0gLCBwYXJhbXMgKQogeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAibW92aWVzIiApCiBPT28wMDBPbyAoIE9PME8wICkKIGlmIGxlbiAoIElpMTExSSApID4gMCA6CiAgaTFJaTExaSA9IFsgXQogIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgIE9vMDBvME8wb09vMCA9IFsgXQogICBPb29vb08wMDBPT28gPSBJSUkxSTFpSTFJMWlJIFsgOCBdCiAgIGlmIGlzaW5zdGFuY2UgKCBPb29vb08wMDBPT28gLCB1bmljb2RlICkgOgogICAgT29vb29PMDAwT09vID0gT29vb29PMDAwT09vIC4gZW5jb2RlICggJ3V0Zi04JyApCiAgIEkxSWlJMTExMTExMSA9IElJSTFJMWlJMUkxaUkgWyAxMSBdCiAgIElpMTFJMTFJaTExSSA9IElJSTFJMWlJMUkxaUkgWyAxMiBdCiAgIG9vMDBvT09vT29PbyA9IGl0aGlsIC4gSTFpMSAoIElJSTFJMWlJMUkxaUkgWyA2IF0gKQogICBpZiBvbzAwb09Pb09vT28gPT0gJ2RyaXZlJyBvciBvbzAwb09Pb09vT28gPT0gJ0RyaXZlJyA6CiAgICBvbzAwb09Pb09vT28gPSAnVGVhbScKICAgaWYgb28wMG9PT29Pb09vID09ICdvbnVwbG9hZHMnIG9yIG9vMDBvT09vT29PbyA9PSAnT251cGxvYWRzJyA6CiAgICBvbzAwb09Pb09vT28gPSAnW0NPTE9SIGxpZ2h0Ymx1ZV1bQl0yWWVhclsvQl1bL0NPTE9SXScKICAgaWYgb28wMG9PT29Pb09vID09ICdkZmlsZScgb3Igb28wMG9PT29Pb09vID09ICdEZmlsZScgb3Igb28wMG9PT29Pb09vID09ICdzYXJ1Y2gnIG9yIG9vMDBvT09vT29PbyA9PSAnU2FydWNoJyBvciBvbzAwb09Pb09vT28gPT0gJ2pldGxvYWQnIG9yIG9vMDBvT09vT29PbyA9PSAnSmV0bG9hZCcgb3Igb28wMG9PT29Pb09vID09ICdwb3lib3gnIG9yIG9vMDBvT09vT29PbyA9PSAnUG95Ym94JyA6CiAgICBvbzAwb09Pb09vT28gPSAnW0NPTE9SIGxpZ2h0Ymx1ZV1bQl1PY2VhblsvQl1bL0NPTE9SXScKICAgaWYgb28wMG9PT29Pb09vID09ICdnb2ZpbGUnIG9yIG9vMDBvT09vT29PbyA9PSAnR29maWxlJyBvciBvbzAwb09Pb09vT28gPT0gJ25vZmlsZScgb3Igb28wMG9PT29Pb09vID09ICdOb2ZpbGUnIG9yIG9vMDBvT09vT29PbyA9PSAncGl4ZWxkcmFpbicgb3Igb28wMG9PT29Pb09vID09ICdQaXhlbGRyYWluJyBvciBvbzAwb09Pb09vT28gPT0gJ2ZpbGVzY2RuJyBvciBvbzAwb09Pb09vT28gPT0gJ0ZpbGVzY2RuJyBvciBvbzAwb09Pb09vT28gPT0gJ3VzZXJzY2xvdWQnIG9yIG9vMDBvT09vT29PbyA9PSAnVXNlcnNjbG91ZCcgb3Igb28wMG9PT29Pb09vID09ICdkZXNpdXBsb2FkJyBvciBvbzAwb09Pb09vT28gPT0gJ0Rlc2l1cGxvYWQnIG9yIG9vMDBvT09vT29PbyA9PSAndXBmaWxlJyBvciBvbzAwb09Pb09vT28gPT0gJ1VwZmlsZScgb3Igb28wMG9PT29Pb09vID09ICdndGZpbGUnIG9yIG9vMDBvT09vT29PbyA9PSAnR3RmaWxlJyBvciBvbzAwb09Pb09vT28gPT0gJzlmaWxlcycgb3Igb28wMG9PT29Pb09vID09ICc5RmlsZXMnIG9yIG9vMDBvT09vT29PbyA9PSAnbWVnYXVwJyBvciBvbzAwb09Pb09vT28gPT0gJ01lZ2F1cCcgb3Igb28wMG9PT29Pb09vID09ICdkYnVwbG9hZCcgb3Igb28wMG9PT29Pb09vID09ICdEYnVwbG9hZCcgb3Igb28wMG9PT29Pb09vID09ICd0aGVmaWxlc2xvY2tlcicgb3Igb28wMG9PT29Pb09vID09ICdUaGVmaWxlc2xvY2tlcicgOgogICAgb28wMG9PT29Pb09vID0gJ1tDT0xPUiBvcmFuZ2VyZWRdW0JdSDI2NVsvQl1bL0NPTE9SXScKICAgaWYgb28wMG9PT29Pb09vID09ICd1cHRvc3RyZWFtJyBvciBvbzAwb09Pb09vT28gPT0gJ1VwdG9zdHJlYW0nIG9yIG9vMDBvT09vT29PbyA9PSAnYXJjaGl2ZScgb3Igb28wMG9PT29Pb09vID09ICdBcmNoaXZlJyBvciBvbzAwb09Pb09vT28gPT0gJ3VwdG9ib3gnIG9yIG9vMDBvT09vT29PbyA9PSAnVXB0b2JveCcgOgogICAgb28wMG9PT29Pb09vID0gJ1tDT0xPUiBnb2xkXVtCXVRvcFsvQl1bL0NPTE9SXScKICAgb29vbzAwID0gJ1tDT0xPUiAlc11TZXJ2aWRvcjogJXMgWy9DT0xPUl0nICUgKCBJMTExaTExSTFJICwgb28wMG9PT29Pb09vICkKICAgaWYgSUlJMUkxaUkxSTFpSSBbIDMgXSA6CiAgICBvb29vMDAgPSBvb29vMDAgKyAnW0NPTE9SICVzXSAoJXMpIFsvQ09MT1JdJyAlICggaWlpMUlJICwgc3RyICggSUlJMUkxaUkxSTFpSSBbIDMgXSAuIHJlcGxhY2UgKCAnIycgLCAnICcgKSApICkKICAgaWYgbm90IEkxSWlJMTExMTExMSA6CiAgICBJMUlpSTExMTExMTEgPSBOb25lCiAgIGlmIG5vdCBJaTExSTExSWkxMUkgOgogICAgSWkxMUkxMUlpMTFJID0gTm9uZQogICBpZiBJSUkxSTFpSTFJMWlJIFsgMSBdICE9ICdFUycgOgogICAgb29vbzAwID0gb29vbzAwICsgJyBbQ09MT1IgJXNdKCVzKVsvQ09MT1JdICcgJSAoIG8wTzBvTzAgLCBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMSBdIC4gcmVwbGFjZSAoICcjJyAsICcgJyApICkgKQogICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBvb29vMDAgLCBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsCiBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCB2aWRlbyA9IHsgJ3RpdGxlJyA6IE9vb29vTzAwME9PbyAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA5IF0gLCAncGxvdCcgOiBJSUkxSTFpSTFJMWlJIFsgMTAgXSB9ICwgaXNQbGF5YWJsZSA9IFRydWUgKQogICBpZiA4NiAtIDg2OiBvMDBvTzBvbzBPME8wCiAgIEkxSWlpaSA9ICd7MH0/YWN0aW9uPXsxfSZpZD17Mn0mbGluPXszfSZ0aXQ9ezR9JnR5cGU9ezV9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCAncGxheScgLCBJSUkxSTFpSTFJMWlJIFsgMCBdICwgSUlJMUkxaUkxSTFpSSBbIDYgXSAsCiBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoCiB1bmljb2RlICggT29vb29PMDAwT09vICwgb29vT09PICkgLiBlbmNvZGUgKAogb29vT09PICkgKSAsICdwZWxpcycgKQogICBpZiBsZW4gKCBJSUkxSTFpSTFJMWlJICkgPiAxNiBhbmQgSUlJMUkxaUkxSTFpSSBbIDE2IF0gPT0gMiBhbmQgX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdhY3RpdmVEb3dubG9hZCcgKSA6CiAgICBPbzAwbzBPMG9PbzAgLiBhcHBlbmQgKAogSWlJSWlJICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMCBdICkgLCBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMSBdICkgLCBJSUkxSTFpSTFJMWlJIFsgMiBdICkgLCB0eXBlID0gJ3BlbGlzJyAsCiBub21icmUgPSBPb29vb08wMDBPT28gLAogdXJsID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsCiBjYXJhdHVsYSA9IEkxSWlJMTExMTExMSAsIHBvc3RlciA9IElpMTFJMTFJaTExSSAsIHJlbW92ZSA9IEZhbHNlICkgKQogICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBPbzAwbzBPMG9PbzAgKQogICBpZiA3MiAtIDcyOiBPT29Pb08wbzBvME9PICUgSWkxSSArIElpICUgSWlJSTFpMUkgLyBvT08gLyBJaQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIEZhbHNlICkgKQogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiAgaWYgMTAwIC0gMTAwOiBvb09vb08wT09PICsgSUlvb29PMG9vTzBvbyAlIG9vCmRlZiBJSUlJaTFJaUkgKCBhY3Rpb25WYWx1ZSAsIHJvdyAsIHVybCAsIHBhdGggKSA6CiBvME9vb09PT28wID0gTm9uZQogT29PbzBvb08wb28wTyA9IHsgfQogaWYgMjIgLSAyMjogSUkKIHRyeSA6CiAgT29PT09vT09PICwgb08wbzAwME9Pb09PMCA9IGFub3IgLiBJMWkxSTFpSTExSSAoCiAnc2VsZWN0IGZpbGVzLmlkRmlsZSwgaWRQYXRoLCBzdHJGaWxlbmFtZSwgcGxheUNvdW50LCBpVmlkZW9XaWR0aHx8IngifHxpVmlkZW9IZWlnaHQsaVN0cmVhbVR5cGUgZnJvbSBmaWxlcyBsZWZ0IGpvaW4gc3RyZWFtZGV0YWlscyBvbiBzdHJlYW1kZXRhaWxzLmlkRmlsZSA9IGZpbGVzLmlkRmlsZSB3aGVyZSBpZFBhdGg9KFNlbGVjdCBpZFBhdGggZnJvbSBwYXRoIHdoZXJlIHN0clBhdGg9InBsdWdpbjovL3BsdWdpbi52aWRlby5wYWxhbnRpci8iKSBhbmQgc3RyRmlsZW5hbWUgbGlrZSAicGx1Z2luOi8vcGx1Z2luLnZpZGVvLnBhbGFudGlyLz9hY3Rpb249JXMmJXMiJyAlICgKIGFjdGlvblZhbHVlICwgcGF0aCApICkKICBmb3Igb09Pb29vIGluIG9PMG8wMDBPT29PTzAgOgogICBpZiA3NiAtIDc2OiBvT08gLiBJMUlpSTFJSUkxMWkgLyBJSW9vb08wb29PMG9vICUgT09vT29PMG8wbzBPTwogICBPb09vMG9vTzBvbzBPIFsgb09Pb29vIFsgMiBdIF0gPSBvT09vb28KIGV4Y2VwdCA6CiAgcGFzcwogIGlmIDE2IC0gMTY6IG9vCiBpZiBhY3Rpb25WYWx1ZSA9PSBJaUlJaTFJMUlpIG9yIGFjdGlvblZhbHVlID09ICdsaXN0X3RlbXAnIG9yIGFjdGlvblZhbHVlID09ICd2aWV3X3RlbXAnIDoKICBpZiB1cmwgaW4gT29PbzBvb08wb28wTyA6CiAgIGlmIE9vT28wb29PMG9vME8gWyB1cmwgXSBbIDMgXSA+IDAgOgogICAgbzBPb29PT09vMCA9IElpb29vICggT29PbzBvb08wb28wTyBbIHVybCBdIFsgMCBdICwgT29PbzBvb08wb28wTyBbIHVybCBdIFsgMSBdICwgT29PbzBvb08wb28wTyBbIHVybCBdIFsgMiBdICwgRmFsc2UgKQogICBlbHNlIDoKICAgIG8wT29vT09PbzAgPSBJaW9vbyAoIE9vT28wb29PMG9vME8gWyB1cmwgXSBbIDAgXSAsIE9vT28wb29PMG9vME8gWyB1cmwgXSBbIDEgXSAsIE9vT28wb29PMG9vME8gWyB1cmwgXSBbIDIgXSAsIFRydWUgKQogICAgaWYgMjQgLSAyNDogaWlJSWkxaTFJaWkgLiBJaQogICAgaWYgNjEgLSA2MTogb28wbwogICAgaWYgNTIgLSA1MjogT09PIC4gT09PIC4gSWkgLyBpMWlJMSAvIElpMUkgJSBvMDBvTzBvbzBPME8wCiAgICBpZiA2NCAtIDY0OiBpaUlJaTFpMUlpaSAvIG9vMG8KICBlbHNlIDoKICAgaWYgNjQgLSA2NDogSWlJSTFpMUkgKyBJMUlpSTFJSUkxMWkKICAgbzBPb29PT09vMCA9IElpb29vICggMCAsIE9PbzBvbyAsIHVybCAsIFRydWUgKQogcmV0dXJuIG8wT29vT09PbzAKIGlmIDgzIC0gODM6IG9vMG8gKiBJSUlJICsgSWkxSSAtIGlpSUlpMWkxSWlpCiBpZiA3MSAtIDcxOiBJaUlJMWkxSSAlIE9PTyAqIG9vT29vTzBPT08gJSBJaTFJIC4gaWlJSWkxaTFJaWkKZGVmIE9vb08wME9PbzBPT08gKCByb3dzID0gWyBdICwgdHlwZSA9IElpaTEgLCBjYXJhdCA9IE5vbmUgLCBwb3N0ZSA9IE5vbmUgLCBpbmZvID0geyB9ICkgOgogdHJ5IDoKICBpZiB0eXBlID09IElpaTEgOgogICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIGlpSUlpaUlJMSAsICJlcGlzb2RlcyIgKQogICBPT28wMDBPbyAoIGlpMWkxaWkxSSApCiAgZWxzZSA6CiAgIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggaWlJSWlpSUkxICwgIm1vdmllcyIgKQogICBPT28wMDBPbyAoIE9PME8wICkKIGV4Y2VwdCA6CiAgcGFzcwogIGlmIDE4IC0gMTg6IE9Pb09vTzBvMG8wT08gLiBJaTFJCiBPb09vMG9vTzBvbzBPID0geyB9CiBpZiAzMSAtIDMxOiBJaTFJICUgSWlJSTFpMUkgKyBvb29Pb08gLiBJSW9vb08wb29PMG9vCiBpZiAyOCAtIDI4OiBvb09vb08wT09PIC0gb29vT29PICUgSWkKIGlmIDIxIC0gMjE6IEkxSWlJMUlJSTExaSAtIElpSUkxaTFJIC0gSUkgLyBvb29Pb08KIGlmIDU4IC0gNTg6IE9PTyAtIEkxICogb29vT29PICsgaTFpSTEgKyBpMWlJMQogaWYgMzQgLSAzNDogT09vT29PMG8wbzBPTyAqIElpSUkxaTFJIC4gb28KIGlmIDQgLSA0OiBPT29Pb08wbzBvME9PCiBpZiAxMDAgLSAxMDA6IEkxSWlJMUlJSTExaQogaWYgMzkgLSAzOTogT09PICUgSTEgLiBvMDBvTzBvbzBPME8wCiBpZiA4MyAtIDgzOiBJSW9vb08wb29PMG9vIC4gSUkgKyBvbzBvIC0gb28wbwogaTFpMTFpSWkxSTEgPSB7IH0KIGkxSWkxMWkgPSBbIF0KIE8wMG8wbzAwID0gJycKIGlmIGxlbiAoIHJvd3MgKSA+IDAgOgogIGZvciBJSUkxSTFpSTFJMWlJIGluIHJvd3MgOgogICBpZiAzNSAtIDM1OiBpMWlJMSAuIElJSUkgLiBpaUlJaTFpMUlpaQogICBPbzAwbzBPMG9PbzAgPSBbIF0KICAgb29vTzBvbzBvMG8gPSBsZW4gKCBJSUkxSTFpSTFJMWlJICkKICAgb08wMDBPTzAwb28gPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgIG8wMDBvT29PMG9vID0gSUlJMUkxaUkxSTFpSSBbIDEgXQogICBPT08wME9PTzAwb28gPSBJSUkxSTFpSTFJMWlJIFsgMiBdCiAgIElpSWkxSTExaWlpaSA9IElJSTFJMWlJMUkxaUkgWyA2IF0KICAgaWYgNjYgLSA2NjogSUkgLyBpMWlJMSAvIE9PTyAqIG9vb09vTyAqIElJSUkgLiBvMDBvTzBvbzBPME8wCiAgIGlmIDU0IC0gNTQ6IElpSUkxaTFJIC4gaTFpSTEgLyBJSW9vb08wb29PMG9vICsgSWkxSQogICBpZiA1MiAtIDUyOiBJSUlJICsgSUkgLiBJSUlJICsgb28gKiBJaUlJMWkxSSAqIG9vMG8KICAgaWYgOTIgLSA5MjogSWkxSSAqIG9vMG8gLiBpMWlJMSAtIG9vb09vTwogICBvb29vMDAgPSBJSUkxSTFpSTFJMWlJIFsgOCBdCiAgIE9vb29vME8wT28gPSBJSUkxSTFpSTFJMWlJIFsgOSBdCiAgIElpaUlpSTEgPSBJSUkxSTFpSTFJMWlJIFsgMTAgXQogICBJMUlpSTExMTExMTEgPSBJSUkxSTFpSTFJMWlJIFsgMTEgXQogICBJaTExSTExSWkxMUkgPSBJSUkxSTFpSTFJMWlJIFsgMTIgXQogICBpZiBvb29vMDAgOgogICAgT29vb29PMDAwT09vID0gb29vbzAwCiAgICBpZiB0eXBlID09ICdzZXJpZXMnIDoKICAgICBvb29vMDAgPSAnW0NPTE9SICVzXSAlc1svQ09MT1JdJyAlICggTzAwTzAwMCAsIG9vb28wMCApCiAgICBlbHNlIDoKICAgICBvb29vMDAgPSAnW0NPTE9SICVzXSAlc1svQ09MT1JdJyAlICggTzBPT08gLCBvb29vMDAgKQogICBlbHNlIDoKICAgIE9vb29vTzAwME9PbyA9IHN0ciAoIG8wMDBvT29PMG9vICkgKyAneCcgKyBPT08wME9PTzAwb28KICAgIG9vb28wMCA9IHN0ciAoIG8wMDBvT29PMG9vICkgKyAneCcgKyBPT08wME9PTzAwb28KICAgTzAwbzBvMDAgPSBPb29vb08wMDBPT28KICAgaWYgODcgLSA4NzogSWlJSTFJaUkKICAgaWYgb29vTzBvbzBvMG8gPj0gMjEgOgogICAgT28wbyA9IElJSTFJMWlJMUkxaUkgWyAyMCBdCiAgICBpZiAyIC0gMjogaWkxSTFpaTFJaUlpMSAqIG9vT29vTzBPT08gKyBvMDBvTzBvbzBPME8wIC0gSTFJaUkxSUlJMTFpICsgSTFJaUkxSUlJMTFpIC8gSWlJSTFpMUkKICAgZWxzZSA6CiAgICBPbzBvID0gSUlJMUkxaUkxSTFpSSBbIDMgXQogICAgaWYgOTYgLSA5NjogSUkgLiBpaTFJMWlpMUlpSWkxIC0gaWkxSTFpaTFJaUlpMSArIG9vMG8gJSBJaSAqIElpSUkxaTFJCiAgIGlmIE9vMG8gYW5kIE9vMG8gIT0gJ05vbmUnIDoKICAgIG9vb28wMCA9IG9vb28wMCArICdbQ09MT1IgJXNdICglcykgWy9DT0xPUl0nICUgKCBpaWkxSUkgLCBzdHIgKCAiICIgLiBqb2luICggc2V0ICggT28wbyAuIHNwbGl0ICggJyMnICkgKSApICkgKQogICBpZiBpbmZvIGFuZCAncHVudG9zJyBpbiBpbmZvIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTQgXSA6CiAgICBvb29vMDAgPSBvb29vMDAgKyAnW0NPTE9SIGxpZ2h0Ymx1ZV0gKCVzKSBbL0NPTE9SXScgJSBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMTQgXSApCiAgIGlmIGluZm8gYW5kICdhbm5vJyBpbiBpbmZvIGFuZCBPb29vbzBPME9vIDoKICAgIG9vb28wMCA9IG9vb28wMCArICdbQ09MT1IgbGlnaHR5ZWxsb3ddICglcykgWy9DT0xPUl0nICUgc3RyICggT29vb28wTzBPbyApCiAgICBpZiA5NCAtIDk0OiBJaUlJMUlpSSAlIElpICsgT09PCiAgIGlmIG9vb08wb28wbzBvID49IDIyIGFuZCB0eXBlID09ICdwZWxpcycgOgogICAgaWYgNzQgLSA3NDogSTEgLyBJSUlJIC0gSWlJSTFpMUkgLyBvb29Pb08gLSBvb29Pb08KICAgIGlpMUkxaWkxID0gc2V0ICggSUlJMUkxaUkxSTFpSSBbIDIxIF0gLiBzcGxpdCAoICcjJyApICkKICAgIGlmIDY0IC0gNjQ6IGkxaUkxCiAgICBpZiAoICdFUycgbm90IGluIGlpMUkxaWkxIGFuZCBsZW4gKCBpaTFJMWlpMSApID09IDEgKSBvciBsZW4gKCBpaTFJMWlpMSApID49IDIgOgogICAgIG9vb28wMCA9IG9vb28wMCArICcgW0NPTE9SICVzXSglcylbL0NPTE9SXSAnICUgKCBvME8wb08wICwgc3RyICggIiAiIC4gam9pbiAoIGlpMUkxaWkxICkgKSApCiAgIGlmIGluZm8gYW5kICdkYXRlJyBpbiBpbmZvIDoKICAgIG9vb28wMCA9IG9vb28wMCArICcgKCVzKSAnICUgc3RyICggSUlJMUkxaUkxSTFpSSBbIDEzIF0gKQogICBpZiBub3QgSTFJaUkxMTExMTExIDoKICAgIEkxSWlJMTExMTExMSA9IGNhcmF0CiAgIGlmIG5vdCBJaTExSTExSWkxMUkgOgogICAgSWkxMUkxMUlpMTFJID0gcG9zdGUKICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gb29vbzAwICwgY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLAogcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgdmlkZW8gPSB7ICd0aXRsZScgOiBvb29vMDAgLCAneWVhcicgOiBPb29vbzBPME9vICwgJ3Bsb3QnIDogSWlpSWlJMSB9ICwgaXNQbGF5YWJsZSA9IFRydWUgKQogICBpZiAyMSAtIDIxOiBPT29Pb08wbzBvME9PIC0gSUkKICAgaWYgaXNpbnN0YW5jZSAoIE9vb29vTzAwME9PbyAsIHVuaWNvZGUgKSA6CiAgICBPb29vb08wMDBPT28gPSBPb29vb08wMDBPT28gLiBlbmNvZGUgKCAndXRmLTgnICkKICAgIGlmIDg2IC0gODY6IElpMUkgLyBpMWlJMQogICBPb09PbyA9IHR5cGUKICAgaWYgMzggLSAzODogSWlJSTFpMUkKICAgSWlpaUkgPSAncGxheScKICAgaWYgNzUgLSA3NTogb09PCiAgIGlmIG9vb08wb28wbzBvID4gMjAgYW5kIElJSTFJMWlJMUkxaUkgWyAxOSBdID4gMSA6CiAgICBJaWlpSSA9IElpSUlpMUkxSWkKICAgIGlmIDI0IC0gMjQ6IElpSUkxSWlJIC0gaWkxSTFpaTFJaUlpMSAqIG8wMG9PMG9vME8wTzAgLSBJSW9vb08wb29PMG9vCiAgICBpZiBJSUkxSTFpSTFJMWlJIFsgMTggXSA6CiAgICAgT29PT28gPSBPb09PbyArICcmZ3JvdXBJZD0nICsgc3RyICggSUlJMUkxaUkxSTFpSSBbIDE4IF0gKQogICAgIGlmIDUxIC0gNTE6IE9PTyArIG9PTyAvIG9vb09vTyAtIG9vT29vTzBPT08gLiBJaUlJMUlpSSAtIG9vCiAgIEkxSWlpaSA9ICd7MH0/YWN0aW9uPXsxfSZpZD17Mn0mbGluPXszfSZ0aXQ9ezR9JnR5cGU9ezV9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBJaWlpSSAsIG9PMDAwT08wMG9vICwgSWlJaTFJMTFpaWlpICwKIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICgKIHVuaWNvZGUgKCBPb29vb08wMDBPT28gLCBvb29PT08gKSAuIGVuY29kZSAoCiBvb29PT08gKSApICwgT29PT28gKQogICBpZiA2NCAtIDY0OiBpaTFJMWlpMUlpSWkxCiAgIGlmIHR5cGUgPT0gJ3BlbGlzJyBhbmQgeGJtYyAuIGdldENvbmRWaXNpYmlsaXR5ICggJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQuZXh0ZW5kZWRpbmZvKScgKSBhbmQgSUlJMUkxaUkxSTFpSSBbIDE3IF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxNyBdIC4gc3RhcnRzd2l0aCAoICdodHRwczovL3d3dy50aGVtb3ZpZWRiLm9yZycgKSA6CiAgICBPbzAwbzBPMG9PbzAgLiBhcHBlbmQgKCAoICJFeHRlbmRlZEluZm8iICwgIlhCTUMuUnVuU2NyaXB0KHNjcmlwdC5leHRlbmRlZGluZm8saW5mbz1leHRlbmRlZGluZm8saWQ9JXMsbmFtZT0lcykiICUgKCBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMTcgXSAuIHNwbGl0ICggJy8nICkgWyAtIDEgXSAuIHNwbGl0ICggJy0nICkgWyAwIF0gKSAsIE9vb29vTzAwME9PbyApICkgKQogICAgaWYgNzUgLSA3NTogSUlJSSAqIGlpMUkxaWkxSWlJaTEgKiBJSW9vb08wb29PMG9vIC8gT09PIC0gSUkKICAgT29PT29vT08gPSBJSUlJaTFJaUkgKCBJaWlpSSAsIElJSTFJMWlJMUkxaUkgLCBJMUlpaWkgLCAnaWQ9JyArIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAwIF0gKSArICclJyApCiAgIGlmIDcwIC0gNzA6IElpSUkxSWlJCiAgIGlmIE9vT09vb09PIDoKICAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoIE9vT09vb09PICkKICAgIGlmIDc2IC0gNzY6IElpMUkgJSBJMSAlIE9PTyAuIG8wMG9PMG9vME8wTzAgLiBvbzBvIC0gSTFJaUkxSUlJMTFpCiAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBvTzAwME9PMDBvbyApICwgc3RyICggbzAwMG9Pb08wb28gKSAsIE9PTzAwT09PMDBvbyApICwgdHlwZSA9IHR5cGUgLCBub21icmUgPSBvb29vMDAgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwgcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgZmF2ID0gaTExaWlpICwgZmF2TGl0ZXJhbCA9ICcnICkgKQogICBpZiB0eXBlID09ICdzZXJpZXMnIDoKICAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBvTzAwME9PMDBvbyApICwgc3RyICggbzAwMG9Pb08wb28gKSAsIE9PTzAwT09PMDBvbyApICwgdHlwZSA9IHR5cGUgLCBub21icmUgPSBvb29vMDAgLCB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLCBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCBmYXYgPSBpMTEgLCB0ZXh0ID0gJ1NlcmllcycgLCBmYXZMaXRlcmFsID0gJ3MnICkgKQogICAgaWYgNTkgLSA1OTogT09vT29PMG8wbzBPTyAlIElpSUkxaTFJICogb28wbyAqIEkxSWlJMUlJSTExaSAtIElpSUkxSWlJCiAgICBpZiA5OCAtIDk4OiBpaUlJaTFpMUlpaSArIEkxSWlJMUlJSTExaSAvIG9vb09vTwogICAgaWYgNDMgLSA0MzogSUlJSQogICAgaWYgNjAgLSA2MDogT09vT29PMG8wbzBPTyAqIGlpMUkxaWkxSWlJaTEgLiBJaUlJMUlpSQogICAgaWYgNjIgLSA2MjogSTFJaUkxSUlJMTFpCiAgICBpZiA5OCAtIDk4OiBJaUlJMUlpSSArIElpSUkxaTFJIC8gaWlJSWkxaTFJaWkKICAgaWYgbGVuICggSUlJMUkxaUkxSTFpSSApID4gMTUgYW5kICdEaWJ1am9zJyBpbiBJSUkxSTFpSTFJMWlJIFsgMTUgXSA6CiAgICBpZiA1NyAtIDU3OiBPT29Pb08wbzBvME9PIC8gaWkxSTFpaTFJaUlpMSAlIG8wMG9PMG9vME8wTzAKICAgIE9vMDBvME8wb09vMCAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBvTzAwME9PMDBvbyApICwgc3RyICggbzAwMG9Pb08wb28gKSAsIE9PTzAwT09PMDBvbyApICwgdHlwZSA9IHR5cGUgLCBub21icmUgPSBvb29vMDAgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwgcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgZmF2ID0gb29JSUlJICwgdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgKSApCiAgIGVsc2UgOgogICAgT28wMG8wTzBvT28wIC4gYXBwZW5kICgKIE9PMG8wTzAgKCBpZCA9ICclcy0lcy0lcycgJSAoIHN0ciAoIG9PMDAwT08wMG9vICkgLCBzdHIgKCBvMDAwb09vTzBvbyApICwgT09PMDBPT08wMG9vICkgLCB0eXBlID0gdHlwZSAsIG5vbWJyZSA9IG9vb28wMCAsCiB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJMUlpSTExMTExMTEgLCBwb3N0ZXIgPSBJaTExSTExSWkxMUkgLCBmYXYgPSBJaWlJaTExaUlJSTEgLCB0ZXh0ID0gJ1BlbGlzJyAsIGZhdkxpdGVyYWwgPSAncCcgKSApCiAgICBpZiAyMyAtIDIzOiBJSUlJICUgSUkKICAgIGlmIDQxIC0gNDE6IGlpMUkxaWkxSWlJaTEgLyBPT08KICAgaWYgSUlJMUkxaUkxSTFpSSBbIDE2IF0gPT0gMiBhbmQgX19zZXR0aW5nc19fIC4gZ2V0U2V0dGluZyAoICdhY3RpdmVEb3dubG9hZCcgKSBhbmQgSWlpaUkgIT0gSWlJSWkxSTFJaSA6CiAgICBPbzAwbzBPMG9PbzAgLiBhcHBlbmQgKAogSWlJSWlJICggaWQgPSAnJXMtJXMtJXMnICUgKCBzdHIgKCBvTzAwME9PMDBvbyApICwgc3RyICggbzAwMG9Pb08wb28gKSAsIE9PTzAwT09PMDBvbyApICwgdHlwZSA9IHR5cGUgLCBub21icmUgPSBPb29vb08wMDBPT28gLAogdXJsID0gSWlJaTFJMTFpaWlpICwKIGNhcmF0dWxhID0gSTFJaUkxMTExMTExICwgcG9zdGVyID0gSWkxMUkxMUlpMTFJICwgcmVtb3ZlID0gRmFsc2UgKSApCiAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIE9vMDBvME8wb09vMCApCiAgIGlmIDU1IC0gNTU6IElJb29vTzBvb08wb28gJSBJSUlJICogSUlvb29PMG9vTzBvbwogICBpZiA2NiAtIDY2OiBJMUlpSTFJSUkxMWkKICAgaWYgMjEgLSAyMTogSTEKICAgaWYgMyAtIDM6IG9vT29vTzBPT08gKiBJSW9vb08wb29PMG9vCiAgIGlmIDI0IC0gMjQ6IElJSUkgKiBPT08gLSBpaUlJaTFpMUlpaSAlIE9Pb09vTzBvMG8wT08KICAgaWYgSWlpaUkgPT0gSWlJSWkxSTFJaSA6CiAgICBpSWkxSWkgPSBUcnVlCiAgIGVsc2UgOgogICAgaUlpMUlpID0gRmFsc2UKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgIGlmIDI4IC0gMjg6IElpMUkKICAgaWYgODIgLSA4MjogSTEgJSBvT08gLyBvbyAtIG9PTyAtIG8wMG9PMG9vME8wTzAgLSBvbwogICBpZiAzOCAtIDM4OiBvbzBvICsgSUlvb29PMG9vTzBvbwogICBpZiAyMyAtIDIzOiBvbzBvICUgT09PICUgb29vT29PIC8gb28gLyBJMUlpSTFJSUkxMWkKICAgaWYgODkgLSA4OTogSUkgLSBvMDBvTzBvbzBPME8wIC4gSUkgKyBJSUlJICogT09vT29PMG8wbzBPTwogICBpZiA1MCAtIDUwOiBJaTFJICogb28wbyAlIGkxaUkxICogb28wbwogICBpZiA1MyAtIDUzOiBJSSAqIElpSUkxaTFJCiAgIGlmIDEzIC0gMTM6IElpCiAgIGlmIDY3IC0gNjc6IGlpMUkxaWkxSWlJaTEgLSBpaUlJaTFpMUlpaSAtIEkxSWlJMUlJSTExaSArIElJb29vTzBvb08wb28KICBpZiBsZW4gKCByb3dzICkgPj0gb29vMG9vT29PME9vIDoKICAgaWYgJ2NfcGFnZScgaW4gaW5mbyBhbmQgJ2FjdGlvbicgaW4gaW5mbyBhbmQgJ2FjdGlvblBhcmFtcycgaW4gaW5mbyA6CiAgICBJaUkxSUlpaTEgPSBpbnQgKCBpbmZvIFsgJ2NfcGFnZScgXSApCiAgICBJaUkxSUlpaTEgPSBJaUkxSUlpaTEgKyAxCiAgICB0cnkgOgogICAgIE8wMG8wbzAwID0gTzAwbzBvMDAgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgIHBhc3MKICAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9ICdQw6FnaW5hIFNpZ3VpZW50ZSAoJXMpID4nICUgc3RyICggSWlJMUlJaWkxICkgKQogICAgSTFJaWlpID0gJ3swfT97MX09ezJ9JmNfcGFnZT17M30mcGFnZT17NH0mezV9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgaW5mbyBbICdhY3Rpb24nIF0gLCBzdHIgKCBJaUkxSUlpaTEgKSAsCiBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoCiAibm9tYnJlID4gJyIgKyBPMDBvMG8wMCArICInIiApICwgaW5mbyBbICdhY3Rpb25QYXJhbXMnIF0gKQogICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBUcnVlICkgKQogICAgaWYgODMgLSA4Mzogb09PIC0gSUkgJSBJaUlJMWkxSQogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggaWlJSWlpSUkxICwgaTFJaTExaSAsIGxlbiAoIGkxSWkxMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogaWYgMSAtIDE6IG9vMG8gLSBpaTFJMWlpMUlpSWkxIC4gaWkxSTFpaTFJaUlpMSAqIElpSUkxaTFJIC8gbzAwb08wb28wTzBPMAogaWYgNjcgLSA2NzogbzAwb08wb28wTzBPMAogaWYgNzEgLSA3MTogb09PIC4gSTFJaUkxSUlJMTFpICsgSTEgKiBvbyArIGlpMUkxaWkxSWlJaTEKZGVmIEkxSWlJaUkgKCByb3dzICwgY2F0ZWdvcnkgPSBOb25lICwgbGFuZyA9IE5vbmUgLCBkYXRlID0gTm9uZSAsIHBhcmFtcyA9IHsgfSApIDoKIGkxSWkxMWkgPSBbIF0KIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAidHZzaG93cyIgKQogIE9PbzAwME9vICggb08wTzBvMG9vTyApCiBleGNlcHQgOgogIHBhc3MKICBpZiAyOCAtIDI4OiBvMDBvTzBvbzBPME8wICUgT09vT29PMG8wbzBPTyAuIE9PTyAuIElJIC0gaWkxSTFpaTFJaUlpMSAlIG9vMG8KICBpZiAzOCAtIDM4OiBPT29Pb08wbzBvME9PICsgT09PICsgSWlJSTFpMUkgLSBvT08gJSBvbyAtIG9vb09vTwogZm9yIElJSTFJMWlJMUkxaUkgaW4gcm93cyA6CiAgaTFpMTExaWlpaSA9IFsgXQogIE9vT29Pb28wMDAwbyA9IElJSTFJMWlJMUkxaUkgWyAwIF0KICBPMDBvMG8wMCA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICBPb28wT09Pb29PMDAgPSBJSUkxSTFpSTFJMWlJIFsgMiBdCiAgSUkxMWlJSTExMTExMSA9ICcnCiAgaWlPT09vTzBvMCA9ICcnCiAgaTFJMTFpSWlpID0gJycKICBpZiA0NyAtIDQ3OiBJMSAuIG9vIC8gaWlJSWkxaTFJaWkgJSBJMUlpSTFJSUkxMWkgKiBJMSAuIE9Pb09vTzBvMG8wT08KICBpZiBjYXRlZ29yeSBhbmQgSUlJMUkxaUkxSTFpSSBbIDEwIF0gIT0gJ0dlbmVyYWwnIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTAgXSAhPSAnUGVsaWN1bGEnIDoKICAgaWlPT09vTzBvMCA9ICdbQ09MT1IgJXNdKCVzKSBbL0NPTE9SXScgJSAoIElJSWkxMTExaUkgLCBJSUkxSTFpSTFJMWlJIFsgMTAgXSAuIHJlcGxhY2UgKCAnIycgLCAnLCAnICkgKQogIGlmIGxhbmcgOgogICBpaTFJMWlpMSA9IHNldCAoIElJSTFJMWlJMUkxaUkgWyA5IF0gLiBzcGxpdCAoICcjJyApICkKICAgaWYgKCAnRVMnIG5vdCBpbiBpaTFJMWlpMSBhbmQgbGVuICggaWkxSTFpaTEgKSA9PSAxICkgb3IgbGVuICggaWkxSTFpaTEgKSA+PSAyIDoKICAgIElJMTFpSUkxMTExMTEgPSAnW0NPTE9SICVzXSglcykgWy9DT0xPUl0nICUgKCBvME8wb08wICwgSUlJMUkxaUkxSTFpSSBbIDkgXSAuIHJlcGxhY2UgKCAnIycgLCAnICcgKSApCiAgICBpZiA0NyAtIDQ3OiBJMUlpSTFJSUkxMWkgJSBJaUlJMWkxSSAlIEkxICsgaTFpSTEKICAgIGlmIDc2IC0gNzY6IElJb29vTzBvb08wb28gLyBJaUlJMWkxSSAuIElpICogSUlvb29PMG9vTzBvbwogIGlmIE9vbzBPT09vb08wMCBhbmQgSUlJMUkxaUkxSTFpSSBbIDggXSA9PSAnTicgOgogICBJSUlpaTExMWkxSTFpID0gaXRoaWwgLiBJaTFJSWlJMTFpSTEgKCBPb28wT09Pb29PMDAgKQogICBpZiBJSUlpaTExMWkxSTFpID09ICd5dCcgOgogICAgSWlJSUkxMTFpID0gaXRoaWwgLiBvTzBPbzAwICggT29vME9PT29vTzAwICkKICAgIGZvciBpaWkxSWlJIGluIHhyYW5nZSAoIDAgLCBsZW4gKCBJaUlJSTExMWkgKSApIDoKICAgICBpZiBsZW4gKCBJaUlJSTExMWkgKSA8PSAxIDoKICAgICAgT09vT09vID0gJycKICAgICBlbHNlIDoKICAgICAgT09vT09vID0gIiAoIiArIHN0ciAoIGlpaTFJaUkgKyAxICkgKyAiKSIKICAgICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lcyBbL0NPTE9SXSAlcyAlcyAlcycgJSAoIGkxSWlJMWlpaSAsIE8wMG8wbzAwICsgT09vT09vICwgSUkxMWlJSTExMTExMSAsIGlpT09Pb08wbzAgLCBpMUkxMWlJaWkgKQogICAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLAogcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsIHZpZGVvID0geyAndGl0bGUnIDogSUlJMUkxaUkxSTFpSSBbIDMgXSAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA0IF0gLCAncGxvdCcgOiBJSUkxSTFpSTFJMWlJIFsgNSBdIH0gKQogICAgIGlmIDk3IC0gOTc6IG9vICsgb28wbyAqIG8wMG9PMG9vME8wTzAgLyBJaUlJMUlpSSAvIG9PTwogICAgIGlmIHhibWMgLiBnZXRDb25kVmlzaWJpbGl0eSAoICdTeXN0ZW0uSGFzQWRkb24oc2NyaXB0LmV4dGVuZGVkaW5mbyknICkgYW5kIElJSTFJMWlJMUkxaUkgWyAxMiBdIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTIgXSAuIHN0YXJ0c3dpdGggKCAnaHR0cHM6Ly93d3cudGhlbW92aWVkYi5vcmcnICkgOgogICAgICBpZiA4NCAtIDg0OiBPT29Pb08wbzBvME9PICUgT09vT29PMG8wbzBPTwogICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggKCAiRXh0ZW5kZWRJbmZvIiAsCiAiWEJNQy5SdW5TY3JpcHQoc2NyaXB0LmV4dGVuZGVkaW5mbyxpbmZvPWV4dGVuZGVkdHZpbmZvLGlkPSVzLG5hbWU9JXMpIiAlICgKIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3BsaXQgKCAnLycgKSBbIC0gMSBdIC4gc3BsaXQgKCAnLScgKSBbIDAgXSApICwgTzAwbzBvMDAgKSApICkKICAgICAgaWYgNTEgLSA1MTogbzAwb08wb28wTzBPMCArIG9vICUgSWkgKyBvb09vb08wT09PIC0gSTEKICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggT29Pb09vbzAwMDBvICkgLCB0eXBlID0gJ3NlcmllcycgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgdXJsID0gSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwKIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gKSApCiAgICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIE9vT29Pb28wMDAwbyApICwgdHlwZSA9ICdzZXJpZXMnICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJaUlJSTExMWkgWyBpaWkxSWlJIF0gLAogY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwgcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsIGZhdiA9IGkxMSAsCiB0ZXh0ID0gJ1NlcmllcycgLCBmYXZMaXRlcmFsID0gJ3MnICkgKQogICAgIGlmICdEaWJ1am9zJyBpbiBJSUkxSTFpSTFJMWlJIFsgMTAgXSA6CiAgICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwKIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCBmYXYgPSBvb0lJSUkgLAogdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgICAgaTFJaTExaSAuIGFwcGVuZCAoICggSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwgT29PTzBPTzBvME8gLCBUcnVlICkgKQogICBlbHNlIDoKICAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzIFsvQ09MT1JdICVzICVzICVzJyAlICggaTFJaUkxaWlpICwgTzAwbzBvMDAgLCBJSTExaUlJMTExMTExICwgaWlPT09vTzBvMCAsIGkxSTExaUlpaSApCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwKIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLCB2aWRlbyA9IHsgJ3RpdGxlJyA6IElJSTFJMWlJMUkxaUkgWyAzIF0gLCAneWVhcicgOiBJSUkxSTFpSTFJMWlJIFsgNCBdICwgJ3Bsb3QnIDogSUlJMUkxaUkxSTFpSSBbIDUgXSB9ICkKICAgIEkxSWlpaSA9ICd7MH0/ezF9PXZpZXdfc2VyaWUmc2VyaWVfaWQ9ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgT29Pb09vbzAwMDBvICkKICAgIGlmIDM5IC0gMzk6IEkxSWlJMUlJSTExaSAqIG9vIC8gT09vT29PMG8wbzBPTyAlIElpSUkxSWlJICsgT09vT29PMG8wbzBPTwogICAgaWYgeGJtYyAuIGdldENvbmRWaXNpYmlsaXR5ICggJ1N5c3RlbS5IYXNBZGRvbihzY3JpcHQuZXh0ZW5kZWRpbmZvKScgKSBhbmQgSUlJMUkxaUkxSTFpSSBbIDEyIF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3RhcnRzd2l0aCAoICdodHRwczovL3d3dy50aGVtb3ZpZWRiLm9yZycgKSA6CiAgICAgaWYgODUgLSA4NTogb09PICUgSUlvb29PMG9vTzBvbyAvIElpSUkxaTFJCiAgICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoICggIkV4dGVuZGVkSW5mbyIgLAogIlhCTUMuUnVuU2NyaXB0KHNjcmlwdC5leHRlbmRlZGluZm8saW5mbz1leHRlbmRlZHR2aW5mbyxpZD0lcyxuYW1lPSVzKSIgJSAoCiBzdHIgKCBJSUkxSTFpSTFJMWlJIFsgMTIgXSAuIHNwbGl0ICggJy8nICkgWyAtIDEgXSAuIHNwbGl0ICggJy0nICkgWyAwIF0gKSAsIE8wMG8wbzAwICkgKSApCiAgICAgaWYgODYgLSA4NjogaWlJSWkxaTFJaWkgLyBJMSAqIElJb29vTzBvb08wb28KICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLCBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICkgKQogICAgaWYgNjQgLSA2NDogaTFpSTEgLiBpaUlJaTFpMUlpaSArIElJCiAgICBpZiAnRGlidWpvcycgaW4gSUlJMUkxaUkxSTFpSSBbIDEwIF0gOgogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLAogcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsIGZhdiA9IG9vSUlJSSAsIHRleHQgPSAnRGlidWpvcycgLCBmYXZMaXRlcmFsID0gJ2QnICkgKQogICAgZWxzZSA6CiAgICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoCiBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHR5cGUgPSAnc2VyaWVzJyAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IElJSTFJMWlJMUkxaUkgWyA2IF0gLAogcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsIGZhdiA9IGkxMSAsIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICBPb09PME9PMG8wTyAuIGFkZENvbnRleHRNZW51SXRlbXMgKCBpMWkxMTFpaWlpICkKICAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKICBlbHNlIDoKICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdJXMgWy9DT0xPUl0gJXMgJXMgJXMnICUgKCBpMUlpSTFpaWkgLCBPMDBvMG8wMCAsIElJMTFpSUkxMTExMTEgLCBpaU9PT29PMG8wICwgaTFJMTFpSWlpICkKICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsCiBwb3N0ZXIgPSBJSUkxSTFpSTFJMWlJIFsgNyBdICwgdmlkZW8gPSB7ICd0aXRsZScgOiBJSUkxSTFpSTFJMWlJIFsgMyBdICwgJ3llYXInIDogSUlJMUkxaUkxSTFpSSBbIDQgXSAsICdwbG90JyA6IElJSTFJMWlJMUkxaUkgWyA1IF0gfSApCiAgIEkxSWlpaSA9ICd7MH0/ezF9PXNlcmllJnNlcmllX2lkPXsyfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgb09PTzBPMCAsIE9vT29Pb28wMDAwbyApCiAgIGlmIDM0IC0gMzQ6IEkxCiAgIGlmIHhibWMgLiBnZXRDb25kVmlzaWJpbGl0eSAoICdTeXN0ZW0uSGFzQWRkb24oc2NyaXB0LmV4dGVuZGVkaW5mbyknICkgYW5kIElJSTFJMWlJMUkxaUkgWyAxMiBdIGFuZCBJSUkxSTFpSTFJMWlJIFsgMTIgXSAuIHN0YXJ0c3dpdGggKCAnaHR0cHM6Ly93d3cudGhlbW92aWVkYi5vcmcnICkgOgogICAgaWYgMjMgLSAyMzogaWlJSWkxaTFJaWkgKyBvb09vb08wT09PCiAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggKCAiRXh0ZW5kZWRJbmZvIiAsCiAiWEJNQy5SdW5TY3JpcHQoc2NyaXB0LmV4dGVuZGVkaW5mbyxpbmZvPWV4dGVuZGVkdHZpbmZvLGlkPSVzLG5hbWU9JXMpIiAlICgKIHN0ciAoIElJSTFJMWlJMUkxaUkgWyAxMiBdIC4gc3BsaXQgKCAnLycgKSBbIC0gMSBdIC4gc3BsaXQgKCAnLScgKSBbIDAgXSApICwgTzAwbzBvMDAgKSApICkKICAgIGlmIDU5IC0gNTk6IEkxIC0gb09PICogb29Pb29PME9PTwogICAgaWYgMTcgLSAxNzogSWkKICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9IHN0ciAoIE9vT29Pb28wMDAwbyApICwgdHlwZSA9ICdzZXJpZXMnICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIHVybCA9IEkxSWlpaSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gKSApCiAgIGlmICdEaWJ1am9zJyBpbiBJSUkxSTFpSTFJMWlJIFsgMTAgXSA6CiAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gc3RyICggT29Pb09vbzAwMDBvICkgLCB0eXBlID0gJ3NlcmllcycgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBJSUkxSTFpSTFJMWlJIFsgNiBdICwgcG9zdGVyID0gSUlJMUkxaUkxSTFpSSBbIDcgXSAsCiBmYXYgPSBvb0lJSUkgLCB0ZXh0ID0gJ0RpYnVqb3MnICwgZmF2TGl0ZXJhbCA9ICdkJyApICkKICAgZWxzZSA6CiAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICgKIE9PMG8wTzAgKCBpZCA9IHN0ciAoIE9vT29Pb28wMDAwbyApICwgdHlwZSA9ICdzZXJpZXMnICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIHVybCA9IEkxSWlpaSAsIGNhcmF0dWxhID0gSUlJMUkxaUkxSTFpSSBbIDYgXSAsIHBvc3RlciA9IElJSTFJMWlJMUkxaUkgWyA3IF0gLAogZmF2ID0gaTExICwgdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyApICkKICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKICAgaWYgMjUgLSAyNTogb28gLiBpaUlJaTFpMUlpaQogaWYgbGVuICggcm93cyApID49IG9vbzBvb09vTzBPbyA6CiAgaWYgJ2NfcGFnZScgaW4gcGFyYW1zIGFuZCAnYWN0aW9uJyBpbiBwYXJhbXMgOgogICBpZiA1MyAtIDUzOiBPT29Pb08wbzBvME9PIC4gSTFJaUkxSUlJMTFpIC4gSUkKICAgdHJ5IDoKICAgIE8wMG8wbzAwID0gTzAwbzBvMDAgLiBlbmNvZGUgKCAndXRmLTgnICwgJ2lnbm9yZScgKQogICBleGNlcHQgKCBVbmljb2RlRW5jb2RlRXJyb3IgLCBVbmljb2RlRGVjb2RlRXJyb3IgKSA6CiAgICBwYXNzCiAgIElpSTFJSWlpMSA9IGludCAoIHBhcmFtcyBbICdjX3BhZ2UnIF0gKQogICBJaUkxSUlpaTEgPSBJaUkxSUlpaTEgKyAxCiAgIE9vT08wT08wbzBPID0gTzAwMDAwME8wT29PbyAoIG5vbWJyZSA9ICdQw6FnaW5hIFNpZ3VpZW50ZSAoJXMpID4nICUgc3RyICggSWlJMUlJaWkxICkgKQogICBJMUlpaWkgPSAnezB9P3sxfT17Mn0mY19wYWdlPXszfSZwYWdlPXs0fSZ7NX0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBwYXJhbXMgWyAnYWN0aW9uJyBdICwgc3RyICggSWlJMUlJaWkxICkgLAoKICAgIyBvMDBvTzBvbzBPME8wIC8gT09PIC8gSWlJSTFpMUkgKyBPT08gLSBPT29Pb08wbzBvME9PCiAgIGJhc2U2NCAuIHVybHNhZmVfYjY0ZW5jb2RlICgKICJub21icmUgPiAnIiArIE8wMG8wbzAwICsgIiciICkgLCBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdICkKICAgaWYgNzQgLSA3NDogb28gKiBPT29Pb08wbzBvME9PIC8gSWkxSSAqIEkxCiAgIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgVHJ1ZSApICkKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDU5IC0gNTk6IG9vb09vTyAqIElJSUkKIGlmIDYyIC0gNjI6IG8wMG9PMG9vME8wTzAgLyBPT08gLiBpaUlJaTFpMUlpaSAqIElJSUkgLiBJaQogaWYgMTggLSAxODogb28wbwpkZWYgb09PMDAgKCBzZXJpZV9pZCApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoCiAiU0VMRUNUIHNlcmllcy5zZXJpZV9pZCwgc2VyaWVzX3RlbXAudGVtcF9pZCwgc2VyaWVzX3RlbXAubGluaywgc2VyaWVzLm5vbWJyZSwgc2VyaWVzLmFubm8sIHNlcmllcy5zaW5vcHNpcywgc2VyaWVzLmNhcmF0dWxhLCBzZXJpZXMucG9zdGVyLCBzZXJpZXNfdGVtcC5zaW5vcHNpcywgc2VyaWVzX3RlbXAuY2FyYXR1bGEsIHNlcmllc190ZW1wLnBvc3Rlciwgc2VyaWVzX3RlbXAuaGFzX2VwaXNvZGVzLCBzZXJpZXNfdGVtcC5ub21icmUsIHNlcmllcy5saW5rLCAncXVhbGl0eScsICdxdWFsaXR5Jywgc2VyaWVzLmNhdGVnb3J5ICwgc2VyaWVzX3RlbXAuYWN0aXZlIEZST00gc2VyaWVzIExFRlQgSk9JTiBzZXJpZXNfdGVtcCBPTiBzZXJpZXMuc2VyaWVfaWQgPSBzZXJpZXNfdGVtcC5zZXJpZV9pZCB3aGVyZSBzZXJpZXMuc2VyaWVfaWQ9PyBPUkRFUiBCWSBzZXJpZXNfdGVtcC50ZW1wX2lkIiAsCiAoIHNlcmllX2lkICwgKSApCiBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKIG9Pb08wTzAwMDAwIC4gY2xvc2UgKCApCiBpMUlpMTFpID0gWyBdCiBpMWkxMTFpaWlpID0gWyBdCiBpSWlJMWlJSUlJMWkgPSBGYWxzZQogaWYgbGVuICggSWkxMTFJICkgPiAwIDoKICBvb29Pb28wMDBvMCA9IElpMTExSSBbIDAgXSBbIDE2IF0KICBpZiAxMSAtIDExOiBvbzBvCiAgaWYgSWkxMTFJIFsgMCBdIFsgMTMgXSA6CiAgIElJSWlpMTExaTFJMWkgPSBpdGhpbCAuIElpMUlJaUkxMWlJMSAoIElpMTExSSBbIDAgXSBbIDEzIF0gKQogICBpZiBJSUlpaTExMWkxSTFpID09ICd5dCcgOgogICAgSWlJSUkxMTFpID0gaXRoaWwgLiBvTzBPbzAwICggSWkxMTFJIFsgMCBdIFsgMTMgXSApCiAgICBmb3IgaWlpMUlpSSBpbiB4cmFuZ2UgKCAwICwgbGVuICggSWlJSUkxMTFpICkgKSA6CiAgICAgaWYgbGVuICggSWlJSUkxMTFpICkgPD0gMSA6CiAgICAgIE9Pb09PbyA9ICcnCiAgICAgZWxzZSA6CiAgICAgIE9Pb09PbyA9ICIgKCIgKyBzdHIgKCBpaWkxSWlJICsgMSApICsgIikiCiAgICAgaUkxMWlpSWkxSTFpSSA9ICdbQ09MT1IgJXNdTGlzdGEgZGUgQ2Fww610dWxvcyAlcyBbL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIE9Pb09PbyApCiAgICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwKIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSAsCiB2aWRlbyA9IHsgJ3RpdGxlJyA6IElpMTExSSBbIDAgXSBbIDMgXSAsICd5ZWFyJyA6IElpMTExSSBbIDAgXSBbIDQgXSAsICdwbG90JyA6IElpMTExSSBbIDAgXSBbIDUgXSB9ICkKICAgICBpZiAyNSAtIDI1OiBJaUlJMWkxSSAlIElpICUgSWkxSSAtIElpSUkxSWlJICsgbzAwb08wb28wTzBPMAogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBzZXJpZV9pZCApICwgdHlwZSA9IElpaTEgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IElpSUlJMTExaSBbIGlpaTFJaUkgXSAsIGNhcmF0dWxhID0gSWkxMTFJIFsgMCBdIFsgNiBdICwKIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSApICkKICAgICBpZiBvb29Pb28wMDBvMCA9PSAnRGlidWpvcycgOgogICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggc2VyaWVfaWQgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwgY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLCBmYXYgPSBvb0lJSUkgLAogdGV4dCA9ICdEaWJ1am9zJyAsIGZhdkxpdGVyYWwgPSAnZCcgLAogcG9zdGVyID0gSWkxMTFJIFsgMCBdIFsgNyBdICkgKQogICAgIGVsc2UgOgogICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzLXYnICUgc3RyICggc2VyaWVfaWQgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwgY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLCBmYXYgPSBpMTEgLAogdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyAsCiBwb3N0ZXIgPSBJaTExMUkgWyAwIF0gWyA3IF0gKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgICAgaTFJaTExaSAuIGFwcGVuZCAoICggSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwgT29PTzBPTzBvME8gLCBUcnVlICkgKQogICBlbHNlIDoKICAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXUxpc3RhIGRlIENhcMOtdHVsb3MgWy9DT0xPUl0nICUgaTFJaUkxaWlpCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLAogcG9zdGVyID0gSWkxMTFJIFsgMCBdIFsgNyBdICwKIHZpZGVvID0geyAndGl0bGUnIDogSWkxMTFJIFsgMCBdIFsgMyBdICwgJ3llYXInIDogSWkxMTFJIFsgMCBdIFsgNCBdICwKICdwbG90JyA6ICdUb2RvcyBsb3MgZXBpc29kaW9zIGRlIGxhIHNlcmllJyB9ICkKICAgIEkxSWlpaSA9ICd7MH0/ezF9PXZpZXdfc2VyaWUmc2VyaWVfaWQ9ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgc2VyaWVfaWQgKQogICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcy12JyAlIHN0ciAoIHNlcmllX2lkICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLCB1cmwgPSBJMUlpaWkgLAogY2FyYXR1bGEgPSBJaTExMUkgWyAwIF0gWyA2IF0gLCBwb3N0ZXIgPSBJaTExMUkgWyAwIF0gWyA3IF0gKSApCiAgICBpZiBvb29Pb28wMDBvMCA9PSAnRGlidWpvcycgOgogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBzZXJpZV9pZCApICwgdHlwZSA9IElpaTEgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IElpMTExSSBbIDAgXSBbIDYgXSAsIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSAsIGZhdiA9IG9vSUlJSSAsCiB0ZXh0ID0gJ0RpYnVqb3MnICwgZmF2TGl0ZXJhbCA9ICdkJyApICkKICAgIGVsc2UgOgogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMtdicgJSBzdHIgKCBzZXJpZV9pZCApICwgdHlwZSA9IElpaTEgLCBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IElpMTExSSBbIDAgXSBbIDYgXSAsIHBvc3RlciA9IElpMTExSSBbIDAgXSBbIDcgXSAsIGZhdiA9IGkxMSAsCiB0ZXh0ID0gJ1NlcmllcycgLCBmYXZMaXRlcmFsID0gJ3MnICkgKQogICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgICBpZiA1OCAtIDU4OiBvMDBvTzBvbzBPME8wICogaWlJSWkxaTFJaWkgLyBPT08KICAgIGlmIDQ2IC0gNDY6IElpSUkxaTFJICsgb28wbyAlIElJSUkKICAgIGlmIDY5IC0gNjk6IElpSUkxSWlJCiAgICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIFRydWUgKSApCiBmb3IgSUlJMUkxaUkxSTFpSSBpbiBJaTExMUkgOgogIG9vb09vbzAwMG8wID0gSUlJMUkxaUkxSTFpSSBbIDE2IF0KICBpMWkxMTFpaWlpID0gWyBdCiAgaUlpSTFpSUlJSTFpID0gRmFsc2UKICBPb09vT29vMDAwMG8gPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgaWlpaUkxSTExSTExSSA9IElJSTFJMWlJMUkxaUkgWyAxIF0KICBpZiA1NiAtIDU2OiBvMDBvTzBvbzBPME8wICogSTEgKyBJSUlJIC8gb09PCiAgaWYgSUlJMUkxaUkxSTFpSSBbIDEyIF0gOgogICBPT28wMCA9IElJSTFJMWlJMUkxaUkgWyAxMiBdCiAgZWxzZSA6CiAgIE9PbzAwID0gJyVzICVzJyAlICggJ1RlbXBvcmFkYScgLCBpaWlpSTFJMTFJMTFJICkKICBPME8gPSBPb09PMDBvbyAoIElJSTFJMWlJMUkxaUkgWyA1IF0gLCBJSUkxSTFpSTFJMWlJIFsgNiBdICwgSUlJMUkxaUkxSTFpSSBbIDcgXSAsIElJSTFJMWlJMUkxaUkgWyA4IF0gLCBJSUkxSTFpSTFJMWlJIFsgOSBdICwgSUlJMUkxaUkxSTFpSSBbIDEwIF0gKQogIGlmIElJSTFJMWlJMUkxaUkgWyAyIF0gYW5kIElJSTFJMWlJMUkxaUkgWyAxNyBdID4gMCA6CiAgIGlJaTFJaSA9IFRydWUKICAgaUlpSTFpSUlJSTFpID0gVHJ1ZQogICBJSUlpaTExMWkxSTFpID0gaXRoaWwgLiBJaTFJSWlJMTFpSTEgKCBJSUkxSTFpSTFJMWlJIFsgMiBdICkKICAgaWYgSUlJaWkxMTFpMUkxaSA9PSAneXQnIDoKICAgIElpSUlJMTExaSA9IGl0aGlsIC4gb08wT28wMCAoIElJSTFJMWlJMUkxaUkgWyAyIF0gKQogICAgZm9yIGlpaTFJaUkgaW4geHJhbmdlICggMCAsIGxlbiAoIElpSUlJMTExaSApICkgOgogICAgIGlmIGxlbiAoIElpSUlJMTExaSApIDw9IDEgOgogICAgICBPT29PT28gPSAnJwogICAgIGVsc2UgOgogICAgICBPT29PT28gPSAiICgiICsgc3RyICggaWlpMUlpSSArIDEgKSArICIpIgogICAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKCBpMUlpSTFpaWkgLCBPT28wMCArIE9Pb09PbyApCiAgICAgT29PTzBPTzBvME8gPSBPMDAwMDAwTzBPb09vICggbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIGNhcmF0dWxhID0gTzBPIFsgMSBdICwKIHBvc3RlciA9IE8wTyBbIDIgXSAsCiB2aWRlbyA9IHsgJ3RpdGxlJyA6IElJSTFJMWlJMUkxaUkgWyAzIF0gLCAneWVhcicgOiBJSUkxSTFpSTFJMWlJIFsgNCBdICwgJ3Bsb3QnIDogTzBPIFsgMCBdIH0gKQogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcy12JyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBpaWlpSTFJMTFJMTFJICkgKSAsIHR5cGUgPSBJaWkxICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJaUlJSTExMWkgWyBpaWkxSWlJIF0gLCBjYXJhdHVsYSA9IE8wTyBbIDEgXSAsIHBvc3RlciA9IE8wTyBbIDIgXSApICkKICAgICBpZiBvb29Pb28wMDBvMCA9PSAnRGlidWpvcycgOgogICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzJXMtdicgJSAoIHN0ciAoIE9vT29Pb28wMDAwbyApICwgc3RyICggaWlpaUkxSTExSTExSSApICkgLCB0eXBlID0gSWlpMSAsCiBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IElpSUlJMTExaSBbIGlpaTFJaUkgXSAsIGNhcmF0dWxhID0gTzBPIFsgMSBdICwgcG9zdGVyID0gTzBPIFsgMiBdICwKIGZhdiA9IG9vSUlJSSAsIHRleHQgPSAnRGlidWpvcycgLCBmYXZMaXRlcmFsID0gJ2QnICkgKQogICAgIGVsc2UgOgogICAgICBpMWkxMTFpaWlpIC4gYXBwZW5kICggT08wbzBPMCAoIGlkID0gJyVzJXMtdicgJSAoIHN0ciAoIE9vT29Pb28wMDAwbyApICwgc3RyICggaWlpaUkxSTExSTExSSApICkgLCB0eXBlID0gSWlpMSAsCiBub21icmUgPSBpSTExaWlJaTFJMWlJICwKIHVybCA9IElpSUlJMTExaSBbIGlpaTFJaUkgXSAsIGNhcmF0dWxhID0gTzBPIFsgMSBdICwgcG9zdGVyID0gTzBPIFsgMiBdICwKIGZhdiA9IGkxMSAsIHRleHQgPSAnU2VyaWVzJyAsIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgICAgaTFJaTExaSAuIGFwcGVuZCAoICggSWlJSUkxMTFpIFsgaWlpMUlpSSBdICwgT29PTzBPTzBvME8gLCBUcnVlICkgKQogICBlbHNlIDoKICAgIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzWy9DT0xPUl0nICUgKCBpMUlpSTFpaWkgLCBPT28wMCApCiAgICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBPME8gWyAxIF0gLAogcG9zdGVyID0gTzBPIFsgMiBdICwKIHZpZGVvID0geyAndGl0bGUnIDogSUlJMUkxaUkxSTFpSSBbIDMgXSAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA0IF0gLCAncGxvdCcgOiBPME8gWyAwIF0gfSApCiAgICBJMUlpaWkgPSAnezB9P3sxfT12aWV3X3RlbXAmc2VyaWVfaWQ9ezJ9JnRlbXBfaWQ9ezN9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBvT09PME8wICwgT29Pb09vbzAwMDBvICwgaWlpaUkxSTExSTExSSApCiAgICBpZiAzMCAtIDMwOiBvb29Pb08gLiBJMUlpSTFJSUkxMWkKICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcy12JyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBpaWlpSTFJMTFJMTFJICkgKSAsIHR5cGUgPSBJaWkxICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IE8wTyBbIDEgXSAsIHBvc3RlciA9IE8wTyBbIDIgXSApICkKICAgIGlmIG9vb09vbzAwMG8wID09ICdEaWJ1am9zJyA6CiAgICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzLXYnICUgKCBzdHIgKCBPb09vT29vMDAwMG8gKSAsIHN0ciAoIGlpaWlJMUkxMUkxMUkgKSApICwgdHlwZSA9IElpaTEgLAogbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsCiB1cmwgPSBJMUlpaWkgLCBjYXJhdHVsYSA9IE8wTyBbIDEgXSAsIHBvc3RlciA9IE8wTyBbIDIgXSAsIGZhdiA9IG9vSUlJSSAsCiB0ZXh0ID0gJ0RpYnVqb3MnICwgZmF2TGl0ZXJhbCA9ICdkJyApICkKICAgIGVsc2UgOgogICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcy12JyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBpaWlpSTFJMTFJMTFJICkgKSAsIHR5cGUgPSBJaWkxICwKIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwgY2FyYXR1bGEgPSBPME8gWyAxIF0gLCBwb3N0ZXIgPSBPME8gWyAyIF0gLCBmYXYgPSBpMTEgLAogdGV4dCA9ICdTZXJpZXMnICwgZmF2TGl0ZXJhbCA9ICdzJyApICkKICAgICBpZiAxNyAtIDE3OiBJSW9vb08wb29PMG9vIC4gSWlJSTFpMUkgKiBJSSAqIEkxCiAgICAgaWYgODMgLSA4Mzogb29vT29PICUgSTFJaUkxSUlJMTFpICogSTFJaUkxSUlJMTFpIC8gSWlJSTFpMUkgLSBvb09vb08wT09PICsgb29Pb29PME9PTwogICAgIGlmIDY5IC0gNjk6IEkxICogSTEKICAgICBpZiA5OSAtIDk5OiBJSUlJIC8gb09PICogaWlJSWkxaTFJaWkgLyBJaUlJMWkxSQogICAgT29PTzBPTzBvME8gLiBhZGRDb250ZXh0TWVudUl0ZW1zICggaTFpMTExaWlpaSApCiAgICBpZiA3MyAtIDczOiBJSSAuIElpSUkxaTFJICsgSWkgLiBPT08KICAgIGlmIDk3IC0gOTc6IElpMUkgLiBJMSAlIGkxaUkxICsgSUlvb29PMG9vTzBvbyAvIElJSUkKICAgIGlmIDg0IC0gODQ6IElJICsgSWkxSSAqIEkxSWlJMUlJSTExaQogICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiAgaWYgSUlJMUkxaUkxSTFpSSBbIDExIF0gPT0gJ1knIDoKICAgaTFpMTExaWlpaSA9IFsgXQogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lcyBbL0NPTE9SXScgJSAoIGkxSWlJMWlpaSAsIE9PbzAwICkKICAgaWYgSUlJMUkxaUkxSTFpSSBbIDIgXSA6CiAgICBpSTExaWlJaTFJMWlJID0gJyVzIFtDT0xPUiAlc10oQWx0ZXJuYXRpdm8pWy9DT0xPUl0nICUgKCBpSTExaWlJaTFJMWlJICwgaTExaWkgKQogICBPb09PME9PMG8wTyA9IE8wMDAwMDBPME9vT28gKCBub21icmUgPSBpSTExaWlJaTFJMWlJICwgY2FyYXR1bGEgPSBPME8gWyAxIF0gLAogcG9zdGVyID0gTzBPIFsgMiBdICwKIHZpZGVvID0geyAndGl0bGUnIDogSUlJMUkxaUkxSTFpSSBbIDMgXSAsICd5ZWFyJyA6IElJSTFJMWlJMUkxaUkgWyA0IF0gLCAncGxvdCcgOiBPME8gWyAwIF0gfSApCiAgIEkxSWlpaSA9ICd7MH0/ezF9PWxpc3RfdGVtcCZzZXJpZV9pZD17Mn0mdGVtcF9pZD17M30mY2FyYXR1bGE9ezR9JnBvc3Rlcj17NX0nIC4gZm9ybWF0ICggSTFpSTExSSAsIG9PT08wTzAgLCBPb09vT29vMDAwMG8gLCBpaWlpSTFJMTFJMTFJICwKIE8wTyBbIDEgXSAsIE8wTyBbIDIgXSApCiAgIGlmIDk2IC0gOTY6IElpMUkgLyBJaTFJICUgb28KICAgaTFpMTExaWlpaSAuIGFwcGVuZCAoIE9PMG8wTzAgKCBpZCA9ICclcyVzJyAlICggc3RyICggT29Pb09vbzAwMDBvICkgLCBzdHIgKCBpaWlpSTFJMTFJMTFJICkgKSAsIHR5cGUgPSBJaWkxICwgbm9tYnJlID0gaUkxMWlpSWkxSTFpSSAsIHVybCA9IEkxSWlpaSAsCiBjYXJhdHVsYSA9IE8wTyBbIDEgXSAsIHBvc3RlciA9IE8wTyBbIDIgXSApICkKICAgaWYgb29vT29vMDAwbzAgPT0gJ0RpYnVqb3MnIDoKICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcycgJSAoIHN0ciAoIE9vT29Pb28wMDAwbyApICwgc3RyICggaWlpaUkxSTExSTExSSApICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gTzBPIFsgMSBdICwgcG9zdGVyID0gTzBPIFsgMiBdICwgZmF2ID0gb29JSUlJICwgdGV4dCA9ICdEaWJ1am9zJyAsCiBmYXZMaXRlcmFsID0gJ2QnICkgKQogICBlbHNlIDoKICAgIGkxaTExMWlpaWkgLiBhcHBlbmQgKCBPTzBvME8wICggaWQgPSAnJXMlcycgJSAoIHN0ciAoIE9vT29Pb28wMDAwbyApICwgc3RyICggaWlpaUkxSTExSTExSSApICkgLCB0eXBlID0gSWlpMSAsIG5vbWJyZSA9IGlJMTFpaUlpMUkxaUkgLAogdXJsID0gSTFJaWlpICwKIGNhcmF0dWxhID0gTzBPIFsgMSBdICwgcG9zdGVyID0gTzBPIFsgMiBdICwgZmF2ID0gaTExICwgdGV4dCA9ICdTZXJpZXMnICwKIGZhdkxpdGVyYWwgPSAncycgKSApCiAgICBpZiA4MiAtIDgyOiBPT08KICAgIGlmIDQwIC0gNDA6IE9Pb09vTzBvMG8wT08KICAgIGlmIDQ2IC0gNDY6IEkxIC0gaWkxSTFpaTFJaUlpMSAlIG9PTyAuIGlpSUlpMWkxSWlpIC0gSWlJSTFpMUkgKyBJMUlpSTFJSUkxMWkKICAgIGlmIDU0IC0gNTQ6IG9PTyArIG9vICogSWkxSQogICAgaWYgNjQgLSA2NDogaWlJSWkxaTFJaWkgLyBvbyArIE9Pb09vTzBvMG8wT08gJSBJaUlJMWkxSSAvIE9Pb09vTzBvMG8wT08gLiBJaTFJCiAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIGkxaTExMWlpaWkgKQogICBpZiAzOSAtIDM5OiBpaTFJMWlpMUlpSWkxCiAgIGlmIDMxIC0gMzE6IG8wMG9PMG9vME8wTzAgKiBJaUlJMUlpSSAqIElJSUkgKyBJaUlJMUlpSSAuIElJCiAgIGlmIDgyIC0gODI6IG9vMG8gLSBJSSAlIElJb29vTzBvb08wb28gLSBJMUlpSTFJSUkxMWkgJSBJaUlJMUlpSSAuIE9Pb09vTzBvMG8wT08KICAgaWYgNCAtIDQ6IG9PTwogICBpSWkxSWkgPSBUcnVlCiAgIGlJaUkxaUlJSUkxaSA9IFRydWUKICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiB0cnkgOgogIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggaWlJSWlpSUkxICwgInR2c2hvd3MiICkKICBPT28wMDBPbyAoIG9PME8wbzBvb08gKQogZXhjZXB0IDoKICBwYXNzCiBpZiBpSWlJMWlJSUlJMWkgOgogIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBlbHNlIDoKICB4Ym1jIC4gbG9nICggIlthZGRvbi5QYWxhbnRpci0lc106IE5vIGluZm8gZm91bmQgZm9yIHNlcmllICVzICIgJSAoIElpSWkgLCBzZXJpZV9pZCApICkKICBpZiA5MCAtIDkwOiBJaSArIGkxaUkxICUgbzAwb08wb28wTzBPMAogIGlmIDgxIC0gODE6IElpSUkxaTFJIC8gbzAwb08wb28wTzBPMCArIG9vb09vTyAvIG9vMG8KICBpZiA0MyAtIDQzOiBvb09vb08wT09PCmRlZiBvME8wME9PICggc2VyaWVfaWQgLCB0ZW1wX2lkICwgY2FyYXR1bGEgLCBwb3N0ZXIgKSA6CiBJaTExMUkgPSBPMDAwbzAwMG8wT28gKCAiY2FwaXR1bG9zIiAsIFsgInNlcmllX2lkIiAsICJ0ZW1wX2lkIiAsICJjYXBpdHVsb19pZCIgLCAiJyciICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsCiAibm9tYnJlIiAsICJhbm5vIiAsICJzaW5vcHNpcyIgLCAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAidXBkYXRlZCIgLCAiJ1Rlc3QnIiAsICInVGVzdCciICwgImFjdGl2ZSIgXSAsIFsgInNlcmllX2lkIiAsICJ0ZW1wX2lkIiBdICwKIFsgc2VyaWVfaWQgLCB0ZW1wX2lkIF0gLCBbICdjYXBpdHVsb3Mubm9tYnJlJyAsICdjYXBpdHVsb3MuY2FwaXR1bG9faWQnIF0gLCBwYXJhbXMgPSB7ICdzcWxfY29uZCcgOiAnIGFjdGl2ZSA+IDAnIH0gKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsIElpaTEgLCBjYXJhdHVsYSAsIHBvc3RlciApCiBpZiAyMSAtIDIxOiBJaUlJMUlpSSAuIElpIC4gSWlJSTFpMUkKIGlmIDY3IC0gNjc6IElpMUkgLSBvT08gLyBvbzBvIC4gb29vT29PCiBpZiA4NCAtIDg0OiBJMQpkZWYgb09vT09vMG9PMG9vMG8gKCBzZXJpZV9pZCAsIHRlbXBfaWQgKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKAogIlNFTEVDVCBzZXJpZXMuc2VyaWVfaWQsIHNlcmllc190ZW1wLnRlbXBfaWQsICcnLCAnJywgJycsICcnLCBzZXJpZXNfdGVtcC5saW5rLCAncXVhbGl0eScsIHNlcmllcy5ub21icmUsIHNlcmllc190ZW1wLmFubm8sIHNlcmllcy5zaW5vcHNpcywgc2VyaWVzLmNhcmF0dWxhLCBzZXJpZXMucG9zdGVyLCBzZXJpZXNfdGVtcC5zaW5vcHNpcywgc2VyaWVzX3RlbXAuY2FyYXR1bGEsIHNlcmllc190ZW1wLnBvc3Rlciwgc2VyaWVzLmNhdGVnb3J5LCBzZXJpZXMuYWN0aXZlIEZST00gc2VyaWVzIElOTkVSIEpPSU4gc2VyaWVzX3RlbXAgT04gc2VyaWVzLnNlcmllX2lkPXNlcmllc190ZW1wLnNlcmllX2lkIHdoZXJlIHNlcmllc190ZW1wLnNlcmllX2lkPT8gQU5EIHNlcmllc190ZW1wLnRlbXBfaWQ9PyIgLAogKCBzZXJpZV9pZCAsIHRlbXBfaWQgLCApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDg1IC0gODU6IGkxaUkxICUgb09PICogaWlJSWkxaTFJaWkKIE8wTyA9IE9vT08wMG9vICggSWkxMTFJIFsgMCBdIFsgMTAgXSAsIElpMTExSSBbIDAgXSBbIDExIF0gLCBJaTExMUkgWyAwIF0gWyAxMiBdICwgSWkxMTFJIFsgMCBdIFsgMTMgXSAsIElpMTExSSBbIDAgXSBbIDE0IF0gLCBJaTExMUkgWyAwIF0gWyAxNSBdICkKIE9PT09vMDBvb09PMDBvID0gaXRoaWwgLiBvb08wTzBPICggSWkxMTFJIFsgMCBdIFsgNiBdICwgaTExaSAsIHNlcmllX2lkICwgdGVtcF9pZCApCiBJMW9PbzAgPSBbIE5vbmUgXSAqIGxlbiAoIE9PT09vMDBvb09PMDBvICkKIGlmIDQyIC0gNDI6IG8wMG9PMG9vME8wTzAgLiBJaSAuIEkxSWlJMUlJSTExaSAtIElJb29vTzBvb08wb28KIGZvciBpaWkxSWlJIGluIHhyYW5nZSAoIDAgLCBsZW4gKCBPT09PbzAwb29PTzAwbyApICkgOgogIGlmIDMgLSAzOiBJaTFJIC8gb29Pb29PME9PTyArIElJSUkgLiBpMWlJMQogIEkxb09vMCBbIGlpaTFJaUkgXSA9IGxpc3QgKCBJaTExMUkgWyAwIF0gWyA6IGxlbiAoIElpMTExSSBbIDAgXSApIF0gKQogIEkxb09vMCBbIGlpaTFJaUkgXSBbIDEwIF0gPSBPME8gWyAwIF0KICBJMW9PbzAgWyBpaWkxSWlJIF0gWyAxMSBdID0gTzBPIFsgMSBdCiAgSTFvT28wIFsgaWlpMUlpSSBdIFsgMTIgXSA9IE8wTyBbIDIgXQogIEkxb09vMCBbIGlpaTFJaUkgXSBbIDYgXSA9IE9PT09vMDBvb09PMDBvIFsgaWlpMUlpSSBdIFsgMSBdCiAgSTFvT28wIFsgaWlpMUlpSSBdIFsgOCBdID0gT09PT28wMG9vT08wMG8gWyBpaWkxSWlJIF0gWyAwIF0KICBJMW9PbzAgWyBpaWkxSWlJIF0gWyAxMCBdID0gJycKICBpZiA3IC0gNzogSWkKICBpZiA1MiAtIDUyOiBpMWlJMSAtIG9vIC8gSWkgLiBvb29Pb08KICBpZiAyNyAtIDI3OiBJaUlJMWkxSSAvIE9Pb09vTzBvMG8wT08gKyBJMSAtIG9vMG8gLyBvMDBvTzBvbzBPME8wICogaWlJSWkxaTFJaWkKICBJMW9PbzAgWyBpaWkxSWlJIF0gWyAxNSBdID0gSWkxMTFJIFsgMCBdIFsgMTYgXQogIEkxb09vMCBbIGlpaTFJaUkgXSBbIDE2IF0gPSBJaTExMUkgWyAwIF0gWyAxNyBdCiAgaWYgMjcgLSAyNzogb09PIC0gSUlJSQogIGlmIDIgLSAyOiBvT08gKyBpMWlJMSAlIE9PTyAqIElJSUkKIE9vb08wME9PbzBPT08gKCBJMW9PbzAgLCBJaWkxICkKIGlmIDg1IC0gODU6IG9vb09vTyArIElJSUkKIGlmIDYgLSA2OiBPT29Pb08wbzBvME9PICUgT09PICogaTFpSTEgLiBJaSAvIE9PTyAtIE9PTwogaWYgMjMgLSAyMzogb29vT29PICUgaWkxSTFpaTFJaUlpMSArIGlpMUkxaWkxSWlJaTEKZGVmIElJMWkxMSAoIHNlcmllX2lkICkgOgogSWkxMTFJID0gTzAwMG8wMDBvME9vICggInNlcmllcyIgLAogWyAic2VyaWVfaWQiICwgIicnIiAsICInJyIgLCAiJyciICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAidXBkYXRlZCIgLCAiJyciICwgImNhdGVnb3J5IiAsICJhY3RpdmUiICwgInRtZGIiCiBdICwgWyAic2VyaWVfaWQiIF0gLCBbIHNlcmllX2lkIF0gLCBbICdzZXJpZV9pZCcgXSApCiBpZiA1MyAtIDUzOiBJSUlJICsgb29Pb29PME9PTwogaWYgMjcgLSAyNzogb28wbyAtIEkxSWlJMUlJSTExaSArIElpICUgSUkgKyBvbzBvIC0gb29vT29PCiBPT09PbzAwb29PTzAwbyA9IGl0aGlsIC4gb29PME8wTyAoIElpMTExSSBbIDAgXSBbIDYgXSAsIGkxMWkgLCBzZXJpZV9pZCApCiBJMW9PbzAgPSBbIE5vbmUgXSAqIGxlbiAoIE9PT09vMDBvb09PMDBvICkKIGZvciBpaWkxSWlJIGluIHhyYW5nZSAoIDAgLCBsZW4gKCBPT09PbzAwb29PTzAwbyApICkgOgogIEkxb09vMCBbIGlpaTFJaUkgXSA9IGxpc3QgKCBJaTExMUkgWyAwIF0gWyA6IF0gKQogIEkxb09vMCBbIGlpaTFJaUkgXSBbIDYgXSA9IE9PT09vMDBvb09PMDBvIFsgaWlpMUlpSSBdIFsgMSBdCiAgSTFvT28wIFsgaWlpMUlpSSBdIFsgOCBdID0gT09PT28wMG9vT08wMG8gWyBpaWkxSWlJIF0gWyAwIF0KICBJMW9PbzAgWyBpaWkxSWlJIF0gWyAxMCBdID0gJycKIE9vb08wME9PbzBPT08gKCBJMW9PbzAgLCBJaWkxICkKIGlmIDgwIC0gODA6IElpMUkgLSBJMSAuIElpICsgb28wbwogaWYgNjkgLSA2OTogSTEKIGlmIDM1IC0gMzU6IGlpSUlpMWkxSWlpIC4gaWkxSTFpaTFJaUlpMSArIE9Pb09vTzBvMG8wT08gJSBpaUlJaTFpMUlpaSAvIElpSUkxaTFJIC0gSUkKZGVmIElpaWkxSUlpaWkgKCApIDoKIGkxSWkxMWkgPSBbIF0KIGZvciBpaWkxSWlJIGluIHJhbmdlICggMCAsIDEwICkgOgogIG9PMDBPMDBvT08wMCA9IGRhdGV0aW1lIC4gZGF0ZXRpbWUgLiBub3cgKCApIC4geWVhciAtIGlpaTFJaUkKICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgb08wME8wMG9PTzAwICkKICBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaUkxMWlpSWkxSTFpSSAsIGljb25JbWFnZSA9ICcnICkKICBJMUlpaWkgPSAnezB9P2FjdGlvbj17MX0mYW5ubz17Mn0nIC4gZm9ybWF0ICggSTFpSTExSSAsICJ1bHRpbWFzX3BlbGlzX2FueW9fZGV0YWlsIiAsIG9PMDBPMDBvT08wMCApCiAgaUlpMUlpID0gVHJ1ZQogIGkxSWkxMWkgLiBhcHBlbmQgKCAoIEkxSWlpaSAsIE9vT08wT08wbzBPICwgaUlpMUlpICkgKQogdHJ5IDoKICB4Ym1jcGx1Z2luIC4gc2V0Q29udGVudCAoIGlpSUlpaUlJMSAsICJmaWxlcyIgKQogIE9PbzAwME9vICggbzBvMDAwME8wICkKIGV4Y2VwdCA6CiAgcGFzcwogeGJtY3BsdWdpbiAuIGFkZERpcmVjdG9yeUl0ZW1zICggaWlJSWlpSUkxICwgaTFJaTExaSAsIGxlbiAoIGkxSWkxMWkgKSApCiB4Ym1jcGx1Z2luIC4gZW5kT2ZEaXJlY3RvcnkgKCBpaUlJaWlJSTEgKQogaWYgMTkgLSAxOTogSTEgKiBJaUlJMWkxSSAuIGkxaUkxICUgSWlJSTFpMUkgKyBPT08KZGVmIGlJMTFpSTFJMSAoIGFjdGlvbiAsIHBhcmFtcyApIDoKIGlmICdzcWxfbGltaXQnIGluIHBhcmFtcyA6CiAgaUlJSTExMUkxSUlJID0gcGFyYW1zIFsgJ3NxbF9saW1pdCcgXQogZWxzZSA6CiAgaUlJSTExMUkxSUlJID0gJycKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTZWxlY3QgYW5ubyxjb3VudChwZWxpX2lkKSBmcm9tIHBlbGlzICVzIGdyb3VwIGJ5IGFubm8gb3JkZXIgYnkgYW5ubyBkZXNjICVzIiAlICggcGFyYW1zIFsgJ3NxbF9jb25kJyBdICwgaUlJSTExMUkxSUlJICkgKQogSWkxMTFJID0gSUlpSWlpMUlpSTFpIC4gZmV0Y2hhbGwgKCApCiBvT29PME8wMDAwMCAuIGNsb3NlICggKQogaTFJaTExaSA9IFsgXQogZm9yIElJSTFJMWlJMUkxaUkgaW4gSWkxMTFJIDoKICBvTzAwTzAwb09PMDAgPSBJSUkxSTFpSTFJMWlJIFsgMCBdCiAgaWlpTzAwME9vID0gSUlJMUkxaUkxSTFpSSBbIDEgXQogIGlJMTFpaUlpMUkxaUkgPSAnW0NPTE9SICVzXSVzWy9DT0xPUl0gKCVzKScgJSAoIGkxSWlJMWlpaSAsIG9PMDBPMDBvT08wMCAsIGlpaU8wMDBPbyApCiAgT29PTzBPTzBvME8gPSB4Ym1jZ3VpIC4gTGlzdEl0ZW0gKCBsYWJlbCA9IGlJMTFpaUlpMUkxaUkgLCBpY29uSW1hZ2UgPSAnJyApCiAgSTFJaWlpID0gJ3swfT9hY3Rpb249ezF9JmFubm89ezJ9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBhY3Rpb24gLCBvTzAwTzAwb09PMDAgKQogIGlJaTFJaSA9IFRydWUKICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDQwIC0gNDA6IG9PTyAlIG8wMG9PMG9vME8wTzAKIGlmIDExIC0gMTE6IEkxSWlJMUlJSTExaSAuIElpSUkxaTFJICogb28KZGVmIG9PICggKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIGlmIDg2IC0gODY6IG9vT29vTzBPT08gLiBpaUlJaTFpMUlpaQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoIGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggImMyVnNaV04wSUdkeWIzVndYMk52Ym1OaGRDaHpZV2RoTENBbkl5Y3BJR1p5YjIwZ2NHVnNhWE1nYjNKa1pYSWdZbmtnYzJGbllTQmhjMk09IiApICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDMgLSAzOiBvbzBvIC0gSTEgLSBvb09vb08wT09PIC0gSWkxSQogSWkxMTFJID0gc29ydGVkICggc2V0ICggSWkxMTFJIFsgMCBdIFsgMCBdIC4gc3BsaXQgKCAnIycgKSApICkKIGkxSWkxMWkgPSBbIF0KIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgaWYgNDkgLSA0OTogSWlJSTFpMUkgKiBPT29Pb08wbzBvME9PICsgSUlvb29PMG9vTzBvbyArIG9vCiAgaWYgKCBJSUkxSTFpSTFJMWlJICE9ICcnIGFuZCBJSUkxSTFpSTFJMWlJICE9ICcgJyApIDoKICAgb08wSWkxMWlpaTFpMSA9IElJSTFJMWlJMUkxaUkKICAgdHJ5IDoKICAgIG9PMElpMTFpaWkxaTEgPSBvTzBJaTExaWlpMWkxIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgcGFzcwogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgb08wSWkxMWlpaTFpMSApCiAgIE9vT08wT08wbzBPID0geGJtY2d1aSAuIExpc3RJdGVtICggbGFiZWwgPSBpSTExaWlJaTFJMWlJICwgaWNvbkltYWdlID0gJycgKQogICBJMUlpaWkgPSAnezB9P2FjdGlvbj1zYWdhX2RldGFpbCZzYWdhPXsxfScgLiBmb3JtYXQgKCBJMWlJMTFJICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBvTzBJaTExaWlpMWkxICkgKQogICBpSWkxSWkgPSBUcnVlCiAgIE8wT08wT08gPSBJSTFJaTExaTFJaTFJICggYmFzZTY0IC4gdXJsc2FmZV9iNjRlbmNvZGUgKCBvTzBJaTExaWlpMWkxICkgKQogICBpZiBsZW4gKCBPME9PME9PICkgPiAwIDoKICAgIE9vT08wT08wbzBPIC4gYWRkQ29udGV4dE1lbnVJdGVtcyAoIE8wT08wT08gKQogICAgaWYgODUgLSA4NTogT09PIC4gaWkxSTFpaTFJaUlpMSAvIElJb29vTzBvb08wb28KICAgaTFJaTExaSAuIGFwcGVuZCAoICggSTFJaWlpICwgT29PTzBPTzBvME8gLCBpSWkxSWkgKSApCiB0cnkgOgogIHhibWNwbHVnaW4gLiBzZXRDb250ZW50ICggaWlJSWlpSUkxICwgImZpbGVzIiApCiAgT09vMDAwT28gKCBvMG8wMDAwTzAgKQogZXhjZXB0IDoKICBwYXNzCiB4Ym1jcGx1Z2luIC4gYWRkRGlyZWN0b3J5SXRlbXMgKCBpaUlJaWlJSTEgLCBpMUlpMTFpICwgbGVuICggaTFJaTExaSApICkKIHhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGlpSUlpaUlJMSApCiBpZiA3OCAtIDc4OiBJSUlJICUgSWkxSQogaWYgMTAgLSAxMDogSUlJSSAuIElJb29vTzBvb08wb28gLiBvMDBvTzBvbzBPME8wICogb29vT29PCmRlZiBpMTFpaWlJSUkgKCApIDoKIG9Pb08wTzAwMDAwID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IG9Pb08wTzAwMDAwIC4gY3Vyc29yICggKQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJzZWxlY3QgZ3JvdXBfY29uY2F0KGxvd2VyKHRhZ3MpLCAnIycpIGZyb20gcGVsaXMgb3JkZXIgYnkgcGVsaV9pZCBhc2MiICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDIwIC0gMjA6IG8wMG9PMG9vME8wTzAgLyBJaTFJICsgSTEgLSBJaUlJMWkxSQogSWkxMTFJID0gc29ydGVkICggc2V0ICggSWkxMTFJIFsgMCBdIFsgMCBdIC4gc3BsaXQgKCAnIycgKSApICkKIGlmIDM5IC0gMzk6IG9PTyAuIG9vb09vTyAtIElJb29vTzBvb08wb28KIGkxSWkxMWkgPSBbIF0KIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgaUlpSTExMWkxMUlJID0gSUlJMUkxaUkxSTFpSQogIGlmIGlJaUkxMTFpMTFJSSAhPSAnJyA6CiAgIGlmIDMxIC0gMzE6IEkxSWlJMUlJSTExaQogICB0cnkgOgogICAgaUlpSTExMWkxMUlJID0gaUlpSTExMWkxMUlJIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgcGFzcwogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgaUlpSTExMWkxMUlJIC4gY2FwaXRhbGl6ZSAoICkgKQogICBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaUkxMWlpSWkxSTFpSSAsIGljb25JbWFnZSA9ICcnICkKICAgSTFJaWlpID0gJ3swfT9hY3Rpb249Z2VuZXJvX2RldGFpbCZnZW5lcm89ezF9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGlJaUkxMTFpMTFJSSApICkKICAgaUlpMUlpID0gVHJ1ZQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDkgLSA5OiBJaUlJMUlpSSArIElpMUkgLSBvbzBvICUgSUlJSSAuIE9PTyArIE9Pb09vTzBvMG8wT08KIGlmIDMyIC0gMzI6IElpMUkgKiBvT08gLSBJSUlJIC0gb28wbyAuIElpSUkxaTFJICUgT09vT29PMG8wbzBPTwpkZWYgT28wbzBPT09vT09PICggKSA6CiBvT29PME8wMDAwMCA9IHNxbGl0ZTMgLiBjb25uZWN0ICggaTExaSApCiBJSWlJaWkxSWlJMWkgPSBvT29PME8wMDAwMCAuIGN1cnNvciAoICkKIElJaUlpaTFJaUkxaSAuIGV4ZWN1dGUgKCAic2VsZWN0IGdyb3VwX2NvbmNhdChsb3dlcihnZW5lcm8pLCAnIycpIGZyb20gcGVsaXMgb3JkZXIgYnkgcGVsaV9pZCBhc2MiICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogb09vTzBPMDAwMDAgLiBjbG9zZSAoICkKIGlmIDIxIC0gMjE6IE9Pb09vTzBvMG8wT08gLyBvMDBvTzBvbzBPME8wIC0gaWlJSWkxaTFJaWkgLSBJMSAlIGlpSUlpMWkxSWlpIC0gSTFJaUkxSUlJMTFpCiBJaTExMUkgPSBzb3J0ZWQgKCBzZXQgKCBJaTExMUkgWyAwIF0gWyAwIF0gLiBzcGxpdCAoICcjJyApICkgKQogaWYgODMgLSA4MzogaTFpSTEgLiBJaTFJIC8gSUlvb29PMG9vTzBvbyAqIG9vIC4gb28KIGkxSWkxMWkgPSBbIF0KIGZvciBJSUkxSTFpSTFJMWlJIGluIElpMTExSSA6CiAgaUlpSTExMWkxMUlJID0gSUlJMUkxaUkxSTFpSQogIGlmIGlJaUkxMTFpMTFJSSAhPSAnJyA6CiAgIGlmIDkgLSA5OiBJMUlpSTFJSUkxMWkgKiBvMDBvTzBvbzBPME8wIC0gb29Pb29PME9PTwogICB0cnkgOgogICAgaUlpSTExMWkxMUlJID0gaUlpSTExMWkxMUlJIC4gZW5jb2RlICggJ3V0Zi04JyAsICdpZ25vcmUnICkKICAgZXhjZXB0ICggVW5pY29kZUVuY29kZUVycm9yICwgVW5pY29kZURlY29kZUVycm9yICkgOgogICAgcGFzcwogICBpSTExaWlJaTFJMWlJID0gJ1tDT0xPUiAlc10lc1svQ09MT1JdJyAlICggaTFJaUkxaWlpICwgaUlpSTExMWkxMUlJIC4gY2FwaXRhbGl6ZSAoICkgKQogICBPb09PME9PMG8wTyA9IHhibWNndWkgLiBMaXN0SXRlbSAoIGxhYmVsID0gaUkxMWlpSWkxSTFpSSAsIGljb25JbWFnZSA9ICcnICkKICAgSTFJaWlpID0gJ3swfT9hY3Rpb249Z2VuZXJvX2RldGFpbCZnZW5lcm89ezF9JyAuIGZvcm1hdCAoIEkxaUkxMUkgLCBiYXNlNjQgLiB1cmxzYWZlX2I2NGVuY29kZSAoIGlJaUkxMTFpMTFJSSApICkKICAgaUlpMUlpID0gVHJ1ZQogICBpMUlpMTFpIC4gYXBwZW5kICggKCBJMUlpaWkgLCBPb09PME9PMG8wTyAsIGlJaTFJaSApICkKIHRyeSA6CiAgeGJtY3BsdWdpbiAuIHNldENvbnRlbnQgKCBpaUlJaWlJSTEgLCAiZmlsZXMiICkKICBPT28wMDBPbyAoIG8wbzAwMDBPMCApCiBleGNlcHQgOgogIHBhc3MKIHhibWNwbHVnaW4gLiBhZGREaXJlY3RvcnlJdGVtcyAoIGlpSUlpaUlJMSAsIGkxSWkxMWkgLCBsZW4gKCBpMUlpMTFpICkgKQogeGJtY3BsdWdpbiAuIGVuZE9mRGlyZWN0b3J5ICggaWlJSWlpSUkxICkKIGlmIDMxIC0gMzE6IGkxaUkxCiBpZiAxOCAtIDE4OiBJMUlpSTFJSUkxMWkgKyBJaUlJMWkxSSAlIG9vMG8gKiBpaTFJMWlpMUlpSWkxCmRlZiBpMWlpSWlpMWlpaUlpICggc2FnYSAsIHBhcmFtcyApIDoKIHBhcmFtcyBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogcGFyYW1zIFsgJ2Fubm8nIF0gPSAndHJ1ZScKIHBhcmFtcyBbICdwdW50b3MnIF0gPSAndHJ1ZScKIHBhcmFtcyBbICdhY3Rpb24nIF0gPSAnc2FnYV9kZXRhaWwnCiBwYXJhbXMgWyAnYWN0aW9uUGFyYW1zJyBdID0gJ3NhZ2E9JyArIHNhZ2EKIHBhcmFtcyBbICdzcWxfbGltaXQnIF0gPSAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKQogaWYgJ3BhZ2UnIGluIHBhcmFtcyBhbmQgJ2NfcGFnZScgaW4gcGFyYW1zIDoKICBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHBhcmFtcyBbICdwYWdlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIGVsc2UgOgogIG9vMCA9IDEKICBwYXJhbXMgWyAnY19wYWdlJyBdID0gb28wCiBJaTExMUkgPSBPbzBPMG9PTzAwICggInBlbGlzIiAsICJzYWdhIiAsCiBbICJwZWxpX2lkIiAsICJhdWRpbyIgLCAiJyciICwgInRhZ3MiICwgIicnIiAsICInJyIgLCAibGluayIgLCAiJ3F1YWxpdHknIiAsICJub21icmUiICwgImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLCAic3RyZnRpbWUoJyVZLSVtLSVkJyx1cGRhdGVkKSwgcHVudG9zLCBjYXRlZ29yeSwgYWN0aXZlLCB0bWRiIiAsCiAiZ3JvdXBfaWQiICwgImNvdW50KCopIiAsICJncm91cF9jb25jYXQodGFncywnIycpIiAsICJncm91cF9jb25jYXQoYXVkaW8sJyMnKSIKIF0gLCBbICJzYWdhIiBdICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBzYWdhICkgLiBkZWNvZGUgKCAndXRmLTgnICkgLCBbICdub21icmUnIF0gLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKIGlmIDcgLSA3OiBJMQpkZWYgT29vbzBvbzBvbyAoIGdlbiAsIHBhcmFtcyApIDoKIHBhcmFtcyBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogcGFyYW1zIFsgJ2Fubm8nIF0gPSAndHJ1ZScKIHBhcmFtcyBbICdwdW50b3MnIF0gPSAndHJ1ZScKIHBhcmFtcyBbICdhY3Rpb24nIF0gPSAnZ2VuZXJvX2RldGFpbCcKIHBhcmFtcyBbICdhY3Rpb25QYXJhbXMnIF0gPSAnZ2VuZXJvPScgKyBnZW4KIHBhcmFtcyBbICdzcWxfbGltaXQnIF0gPSAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKQogaWYgJ3BhZ2UnIGluIHBhcmFtcyBhbmQgJ2NfcGFnZScgaW4gcGFyYW1zIDoKICBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHBhcmFtcyBbICdwYWdlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIGVsc2UgOgogIG9vMCA9IDEKICBwYXJhbXMgWyAnY19wYWdlJyBdID0gb28wCiBJaTExMUkgPSBPbzBPMG9PTzAwICggInBlbGlzIiAsICJnZW5lcm8iICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLAogImFubm8iICwgInNpbm9wc2lzIiAsCiAiY2FyYXR1bGEiICwgInBvc3RlciIgLAogInN0cmZ0aW1lKCclWS0lbS0lZCcsdXBkYXRlZCksIHB1bnRvcywgY2F0ZWdvcnksIGFjdGl2ZSwgdG1kYiIgLAogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdICwgWyAiZ2VuZXJvIiBdICwgYmFzZTY0IC4gdXJsc2FmZV9iNjRkZWNvZGUgKCBnZW4gKSAuIGRlY29kZSAoICd1dGYtOCcgKSAsIFsgJ25vbWJyZScgXSAsIHBhcmFtcyApCiBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogaWYgNDcgLSA0NzogaWkxSTFpaTFJaUlpMSAuIGlpMUkxaWkxSWlJaTEgKyBpMWlJMSAqIElpCmRlZiBpMTExaTFJSSAoIGFubm8gLCBvcmRlciAsIHBhcmFtcyApIDoKIHBhcmFtcyBbICdhY3Rpb25QYXJhbXMnIF0gPSAnYW5ubz0nICsgYW5ubwogcGFyYW1zIFsgJ3NxbF9saW1pdCcgXSA9ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApCiBpZiAncGFnZScgaW4gcGFyYW1zIGFuZCAnY19wYWdlJyBpbiBwYXJhbXMgOgogIHBhcmFtcyBbICdzcWxfY29uZCcgXSA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggcGFyYW1zIFsgJ3BhZ2UnIF0gKSAuIGRlY29kZSAoICd1dGYtOCcgKQogZWxzZSA6CiAgb28wID0gMQogIHBhcmFtcyBbICdjX3BhZ2UnIF0gPSBvbzAKIElpMTExSSA9IE8wMDBvMDAwbzBPbyAoICJwZWxpcyIgLAogWyAicGVsaV9pZCIgLCAiYXVkaW8iICwgIicnIiAsICJ0YWdzIiAsICInJyIgLCAiJyciICwgImxpbmsiICwgIidxdWFsaXR5JyIgLCAibm9tYnJlIiAsICJhbm5vIiAsICJzaW5vcHNpcyIgLAogImNhcmF0dWxhIiAsICJwb3N0ZXIiICwgInN0cmZ0aW1lKCclWS0lbS0lZCcsdXBkYXRlZCksIHB1bnRvcywgY2F0ZWdvcnksIGFjdGl2ZSwgdG1kYiIgLAogImdyb3VwX2lkIiAsICJjb3VudCgqKSIgLCAiZ3JvdXBfY29uY2F0KHRhZ3MsJyMnKSIgLCAiZ3JvdXBfY29uY2F0KGF1ZGlvLCcjJykiCiBdICwgWyAiYW5ubyIgXSAsIFsgYW5ubyBdICwgb3JkZXIgLCBwYXJhbXMgKQogT29vTzAwT09vME9PTyAoIElpMTExSSAsICdwZWxpcycgLCBpbmZvID0gcGFyYW1zICkKIGlmIDggLSA4OiBvT08KZGVmIG9vaUlpaTEgKCBjYXRlZ29yeSAsIG9yZGVyICwgcGFyYW1zID0geyB9ICkgOgogcGFyYW1zIFsgJ2FjdGlvblBhcmFtcycgXSA9ICdjYXRlZ29yeT0nICsgY2F0ZWdvcnkgWyAwIF0KIHBhcmFtcyBbICdzcWxfbGltaXQnIF0gPSAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKQogaWYgJ3BhZ2UnIGluIHBhcmFtcyBhbmQgJ2NfcGFnZScgaW4gcGFyYW1zIDoKICBwYXJhbXMgWyAnc3FsX2NvbmQnIF0gPSBiYXNlNjQgLiB1cmxzYWZlX2I2NGRlY29kZSAoIHBhcmFtcyBbICdwYWdlJyBdICkgLiBkZWNvZGUgKCAndXRmLTgnICkKIGVsc2UgOgogIG9vMCA9IDEKICBwYXJhbXMgWyAnY19wYWdlJyBdID0gb28wCiBJaTExMUkgPSBPMDAwbzAwMG8wT28gKCAicGVsaXMiICwKIFsgInBlbGlfaWQiICwgImF1ZGlvIiAsICInJyIgLCAidGFncyIgLCAiJyciICwgIicnIiAsICJsaW5rIiAsICIncXVhbGl0eSciICwgIm5vbWJyZSIgLCAiYW5ubyIgLCAic2lub3BzaXMiICwKICJjYXJhdHVsYSIgLCAicG9zdGVyIiAsICJzdHJmdGltZSgnJVktJW0tJWQnLHVwZGF0ZWQpLCBwdW50b3MsIGNhdGVnb3J5LCBhY3RpdmUsIHRtZGIiICwKICJncm91cF9pZCIgLCAiY291bnQoKikiICwgImdyb3VwX2NvbmNhdCh0YWdzLCcjJykiICwgImdyb3VwX2NvbmNhdChhdWRpbywnIycpIgogXSAsIFsgImNhdGVnb3J5IiBdICwgY2F0ZWdvcnkgLCBvcmRlciAsIHBhcmFtcyApCiBPb29PMDBPT28wT09PICggSWkxMTFJICwgJ3BlbGlzJyAsIGluZm8gPSBwYXJhbXMgKQogaWYgMjQgLSAyNDogaWkxSTFpaTFJaUlpMSAtIGlpSUlpMWkxSWlpICogSWkgLSBpMWlJMSAvIE9Pb09vTzBvMG8wT08gLyBvb29Pb08KZGVmIE9vME8wb09PMDAgKCB0YWJsZSAsIGNvbHVtbl9jb25kICwgdmFsdWVzICwgaWQgLCBpZF92YWx1ZSAsIG9yZGVyICwgcGFyYW1zID0geyB9ICkgOgogT09vID0gc3FsaXRlMyAuIGNvbm5lY3QgKCBpMTFpICkKIElJaUlpaTFJaUkxaSA9IE9PbyAuIGN1cnNvciAoICkKIGlmIHBhcmFtcyBhbmQgJ3NxbF9saW1pdCcgaW4gcGFyYW1zIDoKICBpSUlJMTExSTFJSUkgPSBwYXJhbXMgWyAnc3FsX2xpbWl0JyBdCiBlbHNlIDoKICBpSUlJMTExSTFJSUkgPSAnJwogaWYgcGFyYW1zIGFuZCAnc3FsX2dyb3VwJyBpbiBwYXJhbXMgOgogIElpMTExaTFpSSA9ICcgZ3JvdXAgYnkgJyArIHBhcmFtcyBbICdzcWxfZ3JvdXAnIF0KIGVsc2UgOgogIElpMTExaTFpSSA9ICcnCiBpZiBwYXJhbXMgYW5kICdzcWxfY29uZCcgaW4gcGFyYW1zIDoKICBPMCA9ICcgYW5kICcgKyBwYXJhbXMgWyAnc3FsX2NvbmQnIF0KIGVsc2UgOgogIE8wID0gJycKICBpZiA4NSAtIDg1OiBvb29Pb08gKyBJMQogSUlpSWlpMUlpSTFpIC4gZXhlY3V0ZSAoICJTRUxFQ1QgIiArICIsIiAuIGpvaW4gKCB2YWx1ZXMgKSArICIsIiArICIsIiAuIGpvaW4gKCBpZCApICsgIiBGUk9NICIgKyB0YWJsZSArICIgV0hFUkUgYWN0aXZlID4gMCAiICsgTzAgKyAiIGFuZCAoICIgKyBjb2x1bW5fY29uZCArICIgbGlrZSAnIiArIGlkX3ZhbHVlICsgIicgb3IgIiArIGNvbHVtbl9jb25kICsgIiBsaWtlICciICsgaWRfdmFsdWUgKyAiIyUnIG9yICIgKyBjb2x1bW5fY29uZCArICIgbGlrZSAnJSMiICsgaWRfdmFsdWUgKyAiJyBvciAiICsgY29sdW1uX2NvbmQgKyAiIGxpa2UgJyUjIiArIGlkX3ZhbHVlICsgIiMlJykgIiArIElpMTExaTFpSSArICIgb3JkZXIgYnkgIiArICIsIiAuIGpvaW4gKCBvcmRlciApICsgaUlJSTExMUkxSUlJICkKIElpMTExSSA9IElJaUlpaTFJaUkxaSAuIGZldGNoYWxsICggKQogT09vIC4gY2xvc2UgKCApCiByZXR1cm4gSWkxMTFJCiBpZiA5OSAtIDk5OiBJaTFJIC4gSWlJSTFJaUkKZGVmIE8wMDBvMDAwbzBPbyAoIHRhYmxlICwgdmFsdWVzICwgaWRzICwgaWRzX3ZhbHVlICwgb3JkZXIgLCBwYXJhbXMgPSAnJyApIDoKIGlmIDg2IC0gODY6IG9vIC0gT09vT29PMG8wbzBPTwogTzAgPSAnJwogaUlJSTExMUkxSUlJID0gJycKIElpMTExaTFpSSA9ICcnCiBpZiA2NiAtIDY2OiBvb09vb08wT09PIC4gSTFJaUkxSUlJMTFpIC4gSWkgKiBJSW9vb08wb29PMG9vICUgaTFpSTEgKiBvbzBvCiBpZiBwYXJhbXMgYW5kICdzcWxfbGltaXQnIGluIHBhcmFtcyA6CiAgaUlJSTExMUkxSUlJID0gcGFyYW1zIFsgJ3NxbF9saW1pdCcgXQogaWYgcGFyYW1zIGFuZCAnc3FsX2NvbmQnIGluIHBhcmFtcyA6CiAgaWYgbGVuICggaWRzICkgPT0gbGVuICggaWRzX3ZhbHVlICkgYW5kIGxlbiAoIGlkcyApID09IDAgOgogICBPMCA9ICcgd2hlcmUgJyArIHBhcmFtcyBbICdzcWxfY29uZCcgXQogIGVsc2UgOgogICBPMCA9IHBhcmFtcyBbICdzcWxfY29uZCcgXSArICcgYW5kICcKIGlmIHBhcmFtcyBhbmQgJ3NxbF9ncm91cCcgaW4gcGFyYW1zIDoKICBJaTExMWkxaUkgPSAnIGdyb3VwIGJ5ICcgKyBwYXJhbXMgWyAnc3FsX2dyb3VwJyBdCiBPT28gPSBzcWxpdGUzIC4gY29ubmVjdCAoIGkxMWkgKQogSUlpSWlpMUlpSTFpID0gT09vIC4gY3Vyc29yICggKQogaWYgbGVuICggaWRzICkgPT0gbGVuICggaWRzX3ZhbHVlICkgYW5kIGxlbiAoIGlkcyApID09IDAgOgogIGlmIDY5IC0gNjk6IG9vICsgaTFpSTEgKyBvbzBvICUgSWkxSSAtIG9PTyAlIG9vMG8KICBJSWlJaWkxSWlJMWkgLiBleGVjdXRlICggIlNFTEVDVCAiICsgIiwiIC4gam9pbiAoIHZhbHVlcyApICsgIiBGUk9NICIgKyB0YWJsZSArIE8wICsgSWkxMTFpMWlJICsgIiBvcmRlciBieSAiICsgIiwiIC4gam9pbiAoIG9yZGVyICkgKyBpSUlJMTExSTFJSUkgKQogZWxzZSA6CiAgaWYgNzMgLSA3Mzogb28gJSBpMWlJMSAlIG9vb09vTyAtIGlpMUkxaWkxSWlJaTEgJSBpaUlJaTFpMUlpaSAtIGlpMUkxaWkxSWlJaTEKICBJSWlJaWkxSWlJMWkgLiBleGVjdXRlICggIlNFTEVDVCAiICsgIiwiIC4gam9pbiAoIHZhbHVlcyApICsgIiwiICsgIiwiIC4gam9pbiAoIGlkcyApICsgIiBGUk9NICIgKyB0YWJsZSArICIgV0hFUkUgIiArIE8wICsgKAogIiA9ID8gYW5kICIgLiBqb2luICggaWRzICkgKyAiPT8iICkgKyBJaTExMWkxaUkgKyAiIG9yZGVyIGJ5ICIgKyAiLCIgLiBqb2luICggb3JkZXIgKSArIGlJSUkxMTFJMUlJSSAsIGlkc192YWx1ZSApCiBJaTExMUkgPSBJSWlJaWkxSWlJMWkgLiBmZXRjaGFsbCAoICkKIE9PbyAuIGNsb3NlICggKQogcmV0dXJuIElpMTExSQogaWYgMjQgLSAyNDogaTFpSTEgLSBvbzBvICsgb28gLSBJMUlpSTFJSUkxMWkgLyBvT08KZGVmIEkxSUlpSTExSSAoIGxpbiAsIHRpdCAsIGlkICwgdHlwZSAsIHBhcmFtcyApIDoKIGl0aGlsIC4gSUlpICggbGluICwgdGl0ICwgaTExaSAsIGlkICwgdHlwZSAsICdwbGF5JyAsIHBhcmFtcyApCiBpZiAxOCAtIDE4OiBvT08gKyBvb29Pb08gJSBPT08KIGlmIDEwMCAtIDEwMDogb29vT29PCmRlZiBPbzBPbzBpMUkxaWlJSTExMTEgKCBwYXJhbXN0cmluZyApIDoKIG9PaTExMSA9IGRpY3QgKCBwYXJzZV9xc2wgKCBwYXJhbXN0cmluZyApICkKIGlmIG9PaTExMSA6CiAgaWYgb09pMTExIFsgb09PTzBPMCBdID09IElpaTEgOgogICBPb28wMG8wb28wbyAoICc9PScgLCAnZ2VuZXJhbCcgLCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdzZXJpZXNfZGlidWpvcycgOgogICBPb28wMG8wb28wbyAoICdsaWtlJyAsICclZGlidWpvcyUnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX3JldHJvJyA6CiAgIE9vbzAwbzBvbzBvICggJz09JyAsICdyZXRybycgLCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdzZXJpZXNfNGsnIDoKICAgT29vMDBvMG9vMG8gKCAnPT0nICwgJzRrJyAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3Nlcmllc18zZCcgOgogICBPb28wMG8wb28wbyAoICc9PScgLCAnM2QnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX2RvY3VtZW50YWxlcycgOgogICBPb28wMG8wb28wbyAoICdsaWtlJyAsICclZG9jdW1lbnRhbCUnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX211c2ljYScgOgogICBPb28wMG8wb28wbyAoICdsaWtlJyAsICclbXVzaWNhJScgLCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICd0ZWxlbm92ZWxhcycgOgogICBPb28wMG8wb28wbyAoICdsaWtlJyAsICcldGVsZW5vdmVsYSUnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX2FuaW1lJyA6CiAgIE9vbzAwbzBvbzBvICggJ2xpa2UnICwgJyVhbmltZSUnICwgb09pMTExICkKICAgaWYgNzcgLSA3Nzogb29vT29PICsgSUlvb29PMG9vTzBvbyAtIElJb29vTzBvb08wb28gKiBpaUlJaTFpMUlpaSAuIElpMUkKICAgaWYgODAgLSA4MDogSTFJaUkxSUlJMTFpICsgSTEgLyBpaUlJaTFpMUlpaSAvIEkxIC8gSWlJSTFJaUkgKiBJSQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdzZWFyY2hTZXJpZScgOgogICBJSUlJMUkgKCBJSWkxMUlpMSAsICdzZXJpZXMnICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VhcmNoUGVsaScgOgogICBJSUlJMUkgKCBpaUkxMTExSUlpaUkgLCAncGVsaXMnICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzQnlMYW5nJyA6CiAgIGlmICdsYW5nJyBpbiBvT2kxMTEgOgogICAgTzBPMDBPb29PMDBPICggb09pMTExIFsgJ2xhbmcnIF0gLCAnc2VyaWVzJyAsIG9PaTExMSApCiAgIGVsc2UgOgogICAgTzBPMDBPb29PMDBPICggTm9uZSAsICdzZXJpZXMnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAncGVsaXNCeUxhbmcnIDoKICAgaWYgJ2xhbmcnIGluIG9PaTExMSA6CiAgICBPME8wME9vb08wME8gKCBvT2kxMTEgWyAnbGFuZycgXSAsICdwZWxpcycgLCBvT2kxMTEgKQogICBlbHNlIDoKICAgIE8wTzAwT29vTzAwTyAoIE5vbmUgLCAncGVsaXMnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzQnlBWicgOgogICBvT09PMG8gKCBvT2kxMTEgLCAnc2VyaWUnICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX21hc192aXN0YXMnIDoKICAgaTExaUlJaSAoICJ2aWV3cyIgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdzZXJpZXNfbWFzX3Zpc3Rhc19tZXMnIDoKICAgaTExaUlJaSAoICJsYXN0X21vbnRoX3ZpZXdzIiApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BlbGlzX21hc192aXN0YXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKHZpZXdzKSBkZXNjJyBdICwgeyAic3FsX2NvbmQiIDogIiAgYWN0aXZlID4gMCAiICwgJ3NxbF9ncm91cCcgOiAnIGdyb3VwX2lkJyAsICdzcWxfbGltaXQnIDogJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkgLCAnYW5ubycgOiAndHJ1ZScgLCAicHVudG9zIiA6ICJ0cnVlIiB9ICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAncGVsaXNfbWFzX3Zpc3Rhc19tZXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKGxhc3RfbW9udGhfdmlld3MpIGRlc2MnIF0gLCB7ICJzcWxfY29uZCIgOiAiICBhY3RpdmUgPiAwICIgLCAnc3FsX2dyb3VwJyA6ICcgZ3JvdXBfaWQnICwgJ3NxbF9saW1pdCcgOiAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICdhbm5vJyA6ICd0cnVlJyAsICJwdW50b3MiIDogInRydWUiIH0gKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdwZWxpc19kaWJ1am9zX21hc192aXN0YXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKHZpZXdzKSBkZXNjJyBdICwgeyAic3FsX2NvbmQiIDogIiAgY2F0ZWdvcnkgPSAnRGlidWpvcycgYW5kIGFjdGl2ZSA+IDAgIiAsICdzcWxfZ3JvdXAnIDogJyBncm91cF9pZCcgLCAnc3FsX2xpbWl0JyA6ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApICwgJ2Fubm8nIDogJ3RydWUnICwgInB1bnRvcyIgOiAidHJ1ZSIgfSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BlbGlzX2RpYnVqb3NfbWFzX3Zpc3Rhc19tZXMnIDoKICAgT29vT29Pb29vICggWyAnc3VtKGxhc3RfbW9udGhfdmlld3MpIGRlc2MnIF0gLCB7ICJzcWxfY29uZCIgOiAiIGNhdGVnb3J5ID0gJ0RpYnVqb3MnIGFuZCBhY3RpdmUgPiAwICIgLCAnc3FsX2dyb3VwJyA6ICcgZ3JvdXBfaWQnICwgJ3NxbF9saW1pdCcgOiAnIGxpbWl0ICcgKyBzdHIgKCBvb28wb29Pb08wT28gKSAsICdhbm5vJyA6ICd0cnVlJyAsICJwdW50b3MiIDogInRydWUiIH0gKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICd1bHRpbWFzX3NlcmllcycgOgogICBpSTFJaWlJSTFpSSAoIElJaTExSWkxICwgJ3NlcmllcycgLCAiYW5kIGNhdGVnb3J5IG5vdCBpbiAoJ0RvY3VtZW50YWwnLCAnTXVzaWNhJywgJ0FuaW1lJykiICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndWx0aW1hc19zZXJpZXNfYW5pbWUnIDoKICAgaUkxSWlpSUkxaUkgKCBJSWkxMUlpMSAsICdzZXJpZXMnICwgImFuZCBjYXRlZ29yeSA9ICgnQW5pbWUnKSIgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICd1bHRpbW9zX2RvY3VtZW50YWxlcycgOgogICBpSTFJaWlJSTFpSSAoIElJaTExSWkxICwgJ3NlcmllcycgLCAiYW5kIGNhdGVnb3J5ID0gKCdEb2N1bWVudGFsJykiICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndWx0aW1hc19tdXNpY2FzJyA6CiAgIGlJMUlpaUlJMWlJICggSUlpMTFJaTEgLCAnc2VyaWVzJyAsICJhbmQgY2F0ZWdvcnkgPSAoJ011c2ljYScpIiApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3VsdGltYXNfcGVsaXMnIDoKICAgb09pMTExIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIG9PaTExMSBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogICBvT2kxMTEgWyAncHVudG9zJyBdID0gJ3RydWUnCiAgIG9PaTExMSBbICdhbm5vJyBdID0gJ3RydWUnCiAgIG9vaUlpaTEgKCBbICdQZWxpY3VsYScgXSAsIFsgJ3VwZGF0ZWQgZGVzYycgLCAnYW5ubyBkZXNjJyBdICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWUnIDoKICAgb09PMDAgKCBvT2kxMTEgWyAnc2VyaWVfaWQnIF0gKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdhZGREb3dubG9hZCcgOgogICBPb08wb29PT08gKCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdhZGRmYXYnIDoKICAgaWlvTzBvbzAwTzBPICggb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnYWRkZmF2cycgOgogICBpaW9PMG9vMDBPME8gKCBvT2kxMTEgLCBmYXZvcml0b3MgPSBpaUlpaTFJSWkxSSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ2FkZGZhdnAnIDoKICAgaWlvTzBvbzAwTzBPICggb09pMTExICwgZmF2b3JpdG9zID0gaUlJaUlpSTFJMUkgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdhZGRmYXZkJyA6CiAgIGlpb08wb28wME8wTyAoIG9PaTExMSAsIGZhdm9yaXRvcyA9IGlpSTFJaUkxaWlJSTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdybWZhdicgOgogICBPb09Pb09PMCAoIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3JtZmF2cCcgOgogICBPb09Pb09PMCAoIG9PaTExMSAsIGZhdm9yaXRvcyA9IGlJSWlJaUkxSTFJICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAncm1mYXZkJyA6CiAgIE9vT09vT08wICggb09pMTExICwgZmF2b3JpdG9zID0gaWlJMUlpSTFpaUlJMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3JtZmF2cycgOgogICBPb09Pb09PMCAoIG9PaTExMSAsIGZhdm9yaXRvcyA9IGlpSWlpMUlJaTFJICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnbGlzdGZhdicgOgogICBPMDAwMDAgKCBpSWlJaWlpSWkxSTFJICwgZmF2ID0gaTExaWlpICwgZmF2TGl0ZXJhbCA9ICcnICwgdGV4dCA9ICcnICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnbGlzdGZhdnMnIDoKICAgTzAwMDAwICggaWlJaWkxSUlpMUkgLCBmYXYgPSBpMTEgLCBmYXZMaXRlcmFsID0gJ3MnICwgdGV4dCA9ICdTZXJpZXMnICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnbGlzdGZhdnAnIDoKICAgTzAwMDAwICggaUlJaUlpSTFJMUkgLCBmYXYgPSBJaWlJaTExaUlJSTEgLCBmYXZMaXRlcmFsID0gJ3AnICwgdGV4dCA9ICdQZWxpcycgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdsaXN0ZmF2ZCcgOgogICBPMDAwMDAgKCBpaUkxSWlJMWlpSUkxICwgZmF2ID0gb29JSUlJICwgZmF2TGl0ZXJhbCA9ICdkJyAsIHRleHQgPSAnRGlidWpvcycgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICd0b191bndhdGNoJyA6CiAgIGkxSUkxICggb09pMTExIFsgJ2lkRmlsZScgXSAsIG9PaTExMSBbICdpZFBhdGgnIF0gLCBvT2kxMTEgWyAnZmlsZU5hbWUnIF0gLCBGYWxzZSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3RvX3dhdGNoJyA6CiAgIGkxSUkxICggb09pMTExIFsgJ2lkRmlsZScgXSAsIG9PaTExMSBbICdpZFBhdGgnIF0gLCBvT2kxMTEgWyAnZmlsZU5hbWUnIF0gLCBUcnVlICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndG9fc2FnYScgOgogICBPMG9vMDAgKCBvT2kxMTEgWyAnc2FnYScgXSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3ZpZXdfc2VyaWUnIDoKICAgSUkxaTExICggb09pMTExIFsgJ3NlcmllX2lkJyBdICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndmlld190ZW1wJyA6CiAgIG9Pb09PbzBvTzBvbzBvICggb09pMTExIFsgJ3NlcmllX2lkJyBdICwgb09pMTExIFsgJ3RlbXBfaWQnIF0gKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdsaXN0X3RlbXAnIDoKICAgbzBPMDBPTyAoIG9PaTExMSBbICdzZXJpZV9pZCcgXSAsIG9PaTExMSBbICd0ZW1wX2lkJyBdICwgb09pMTExIFsgJ2NhcmF0dWxhJyBdICwgb09pMTExIFsgJ3Bvc3RlcicgXSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BsYXknIDoKICAgSTFJSWlJMTFJICggb09pMTExIFsgJ2xpbicgXSAsIG9PaTExMSBbICd0aXQnIF0gLCBvT2kxMTEgWyAnaWQnIF0gLCBvT2kxMTEgWyAndHlwZScgXSAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyAnYWN0aW9uJyBdID09ICdhbnlvJyA6CiAgIG9PaTExMSBbICdzcWxfY29uZCcgXSA9ICJ3aGVyZSBhY3RpdmUgPiAwIgogICBpSTExaUkxSTEgKCAnYW55b19kZXRhaWwnICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbICdhY3Rpb24nIF0gPT0gJ2FueW9fZGV0YWlsJyA6CiAgIG9PaTExMSBbICdzcWxfY29uZCcgXSA9ICIgIGFjdGl2ZSA+IDAgIgogICBvT2kxMTEgWyAnc3FsX2dyb3VwJyBdID0gIiBncm91cF9pZCIKICAgb09pMTExIFsgJ3B1bnRvcycgXSA9ICJ0cnVlIgogICBpMTExaTFJSSAoIG9PaTExMSBbICdhbm5vJyBdICwgWyAnbm9tYnJlIGFzYycgXSAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyAnYWN0aW9uJyBdID09ICd1bHRpbWFzX3BlbGlzX2FueW8nIDoKICAgSWlpaTFJSWlpaSAoICkKICBlbGlmIG9PaTExMSBbICdhY3Rpb24nIF0gPT0gJ3VsdGltYXNfcGVsaXNfYW55b19kZXRhaWwnIDoKICAgaTExMWkxSUkgKCBvT2kxMTEgWyAnYW5ubycgXSAsIFsgJ3VwZGF0ZWQgZGVzYycgXSAsIHsgInNxbF9jb25kIiA6ICIgIGFjdGl2ZSA+IDAgIiAsICdzcWxfZ3JvdXAnIDogJyBncm91cF9pZCcgLCAnc3FsX2xpbWl0JyA6ICcgbGltaXQgJyArIHN0ciAoIG9vbzBvb09vTzBPbyApICwgJ2Fubm8nIDogJ3RydWUnICwgInB1bnRvcyIgOiAidHJ1ZSIgfSApCiAgZWxpZiBvT2kxMTEgWyAnYWN0aW9uJyBdID09ICdhbnlvX3RvcCcgOgogICBvT2kxMTEgWyAnc3FsX2NvbmQnIF0gPSAid2hlcmUgYWN0aXZlID4gMCBhbmQgcHVudG9zID4gMCIKICAgaUkxMWlJMUkxICggJ2FueW9fdG9wX2RldGFpbCcgLCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgJ2FjdGlvbicgXSA9PSAnYW55b190b3BfZGV0YWlsJyA6CiAgIG9PaTExMSBbICdzcWxfY29uZCcgXSA9ICIgIGFjdGl2ZSA+IDAgYW5kIHB1bnRvcyA+IDAgIgogICBvT2kxMTEgWyAnc3FsX2dyb3VwJyBdID0gIiBncm91cF9pZCIKICAgb09pMTExIFsgJ3B1bnRvcycgXSA9ICJ0cnVlIgogICBvT2kxMTEgWyAnc3FsX2xpbWl0JyBdID0gJyBsaW1pdCAnICsgc3RyICggb29vMG9vT29PME9vICkKICAgaTExMWkxSUkgKCBvT2kxMTEgWyAnYW5ubycgXSAsIFsgJ3B1bnRvcyBkZXNjJyAsICdub21icmUgYXNjJyBdICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbICdhY3Rpb24nIF0gPT0gJ3NhZ2FzJyA6CiAgIG9PICggKQogIGVsaWYgb09pMTExIFsgJ2FjdGlvbicgXSA9PSAnc2FnYV9kZXRhaWwnIDoKICAgb09pMTExIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIG9PaTExMSBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogICBvT2kxMTEgWyAnYW5ubycgXSA9ICd0cnVlJwogICBvT2kxMTEgWyAncHVudG9zJyBdID0gJ3RydWUnCiAgIGkxaWlJaWkxaWlpSWkgKCBvT2kxMTEgWyAnc2FnYScgXSAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyAnYWN0aW9uJyBdID09ICdsaXN0X2dlbmVyb3MnIDoKICAgT28wbzBPT09vT09PICggKQogIGVsaWYgb09pMTExIFsgJ2FjdGlvbicgXSA9PSAnZ2VuZXJvX2RldGFpbCcgOgogICBPb29vMG9vMG9vICggb09pMTExIFsgJ2dlbmVybycgXSAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BlbGlfaW5mJyA6CiAgIG9PaTExMSBbICdzcWxfY29uZCcgXSA9ICIgIGFjdGl2ZSA+IDAgIgogICBvT2kxMTEgWyAnc3FsX2dyb3VwJyBdID0gJyBncm91cF9pZCcKICAgb09pMTExIFsgJ3B1bnRvcycgXSA9ICd0cnVlJwogICBvT2kxMTEgWyAnYW5ubycgXSA9ICd0cnVlJwogICBvb2lJaWkxICggWyAnRGlidWpvcycgXSAsIFsgJ25vbWJyZScgXSAsIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BlbGlfYW5pbWUnIDoKICAgb09pMTExIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIG9PaTExMSBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogICBvT2kxMTEgWyAncHVudG9zJyBdID0gJ3RydWUnCiAgIG9PaTExMSBbICdhbm5vJyBdID0gJ3RydWUnCiAgIG9vaUlpaTEgKCBbICdBbmltZScgXSAsIFsgJ25vbWJyZScgXSAsIG9PaTExMSApCiAgIGlmIDc3IC0gNzc6IE9PTyAlIE9Pb09vTzBvMG8wT08gJSBJaTFJICsgSUkgLSBpMWlJMSAqIGlpSUlpMWkxSWlpCiAgIGlmIDkgLSA5OiBJaTFJCiAgIGlmIDcwIC0gNzA6IElpSUkxSWlJIC0gaTFpSTEKICAgaWYgMzIgLSAzMjogSWkxSSAlIEkxSWlJMUlJSTExaSAlIElpSUkxaTFJIC0gSUlvb29PMG9vTzBvbyAtIG9vMG8gKyBvb09vb08wT09PCiAgIGlmIDYxIC0gNjE6IElpICsgSWkgLyBvT08gJSBJMUlpSTFJSUkxMWkgKyBJaUlJMUlpSSAqIG9vT29vTzBPT08KICAgaWYgODcgLSA4NzogSUlJSQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICd0b3BfcGVsaV9pbmYnIDoKICAgb09pMTExIFsgJ3NxbF9jb25kJyBdID0gIiAgYWN0aXZlID4gMCAiCiAgIG9PaTExMSBbICdzcWxfZ3JvdXAnIF0gPSAnIGdyb3VwX2lkJwogICBvT2kxMTEgWyAncHVudG9zJyBdID0gJ3RydWUnCiAgIG9PaTExMSBbICdhbm5vJyBdID0gJ3RydWUnCiAgIG9vaUlpaTEgKCBbICdEaWJ1am9zJyBdICwgWyAncHVudG9zIGRlc2MnICwgJ25vbWJyZSBhc2MnIF0gLCBvT2kxMTEgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdwZWxpc0J5QVonIDoKICAgb09PTzBvICggb09pMTExICwgJ3BlbGknICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnbGFzdF9wZWxpX2luZicgOgogICBvT2kxMTEgWyAnc3FsX2NvbmQnIF0gPSAiICBhY3RpdmUgPiAwICIKICAgb09pMTExIFsgJ3NxbF9ncm91cCcgXSA9ICcgZ3JvdXBfaWQnCiAgIG9PaTExMSBbICdwdW50b3MnIF0gPSAndHJ1ZScKICAgaWYgNCAtIDQ6IE9PTyAuIElJb29vTzBvb08wb28gJSBJaUlJMUlpSSAvIGlpMUkxaWkxSWlJaTEgJSBvT08gKiBJaUlJMUlpSQogICBvT2kxMTEgWyAnYW5ubycgXSA9ICd0cnVlJwogICBvb2lJaWkxICggWyAnRGlidWpvcycgXSAsIFsgJ3VwZGF0ZWQgZGVzYycgLCAnYW5ubyBkZXNjJyBdICwgb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnc2VyaWVzX21lbnUnIDoKICAgSTFJaTExSUkxaWkxICggSTFJMWkxaTExSTFpICggJ1NlcmllcycgKSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3BlbGlzX21lbnUnIDoKICAgSTFJaTExSUkxaWkxICggSTFJMWkxaTExSTFpICggJ1BlbGlzJyApICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnZGlidWpvc19tZW51JyA6CiAgIEkxSWkxMUlJMWlpMSAoIEkxSTFpMWkxMUkxaSAoICdEaWJ1am9zJyApICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnYW5pbWVfbWVudScgOgogICBJMUlpMTFJSTFpaTEgKCBJMUkxaTFpMTFJMWkgKCAnQW5pbWUnICkgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdkb2N1bWVudGFsZXNfbWVudScgOgogICBJMUlpMTFJSTFpaTEgKCBJMUkxaTFpMTFJMWkgKCAnRG9jdW1lbnRhbCcgKSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ211c2ljYV9tZW51JyA6CiAgIEkxSWkxMUlJMWlpMSAoIEkxSTFpMWkxMUkxaSAoICdNdXNpY2EnICkgKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdoZXJyYW1pZW50YXNfbWVudScgOgogICBJMUlpMTFJSTFpaTEgKCBJMUkxaTFpMTFJMWkgKCAnSGVycmFtaWVudGFzJyApICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndmFsaWRhdGVGb2xkZXJDb25maWcnIDoKICAgb09vICggKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdjbGVhbicgOgogICBvTzBvTyAoICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnZG93bmxvYWRzJyA6CiAgIElpaTFvTzAwbzAwMDBPTzBPICggKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdwbGF5TG9jYWwnIDoKICAgaWlJSWlpSUkxID0gaW50ICggc3lzIC4gYXJndiBbIDEgXSApCiAgIG9PTzBPb09PME8wID0geGJtY2d1aSAuIExpc3RJdGVtICggcGF0aCA9IGJhc2U2NCAuIHVybHNhZmVfYjY0ZGVjb2RlICggb09pMTExIFsgJ3BhdGgnIF0gKSApCiAgIGlmIDIxIC0gMjE6IGlpMUkxaWkxSWlJaTEgKiBpaTFJMWlpMUlpSWkxCiAgIHhibWNwbHVnaW4gLiBzZXRSZXNvbHZlZFVybCAoIGlpSUlpaUlJMSAsIFRydWUgLCBvT08wT29PTzBPMCApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ3JtRG93bmxvYWQnIDoKICAgb29vbzBvICggb09pMTExICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAndmFsaWRhdGVDcmVkZW50aWFscycgOgogICBpMUkgKCBvT2kxMTEgWyAndXJsJyBdICkKICBlbGlmIG9PaTExMSBbIG9PT08wTzAgXSA9PSAnY3JlYXRlQ29weScgOgogICBPME8wMDBvICggKQogIGVsaWYgb09pMTExIFsgb09PTzBPMCBdID09ICdyZXN0b3JlQ29weScgOgogICBvT09vT08gKCApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ29wZW5TZXR0aW5ncycgOgogICBfX3NldHRpbmdzX18gLiBvcGVuU2V0dGluZ3MgKCApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gJ2luc3RhbGwnIDoKICAgaWlpSTExSTFJMTExMSAoIG9PaTExMSApCiAgZWxpZiBvT2kxMTEgWyBvT09PME8wIF0gPT0gSWlJSWkxSTFJaSA6CiAgIGlJaUlJaTFJaWkxaSAoIG9PaTExMSApCiBlbHNlIDoKICBpZiA1NCAtIDU0OiBJaUlJMUlpSSAvIElpSUkxaTFJIC4gSWlJSTFJaUkgLiBPT29Pb08wbzBvME9PICUgb28wbyAtIE9Pb09vTzBvMG8wT08KICBJMWlJSTFpMWkgKCBpMTFpICkKICBJMUlpMTFJSTFpaTEgKCBJMUkxaTFpMTFJMWkgKCAiZGVmYXVsdCIgKSApCiAgaWYgNTYgLSA1Njogb28wbyAqIGlpSUlpMWkxSWlpICsgaTFpSTEgKyBPT08gLyBJaQogIGlmIDkwIC0gOTA6IE9PTyAlIE9Pb09vTzBvMG8wT08gJSBPT08KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyA6CiBPbzBPbzBpMUkxaWlJSTExMTEgKCBzeXMgLiBhcmd2IFsgMiBdIFsgMSA6IF0gKQogaWYgNzEgLSA3MTogb29vT29PIC4gSTFJaUkxSUlJMTFpIC4gSUlJSSAuIElJSUkgKyBpaUlJaTFpMUlpaSAlIElJCiBpZiA5MSAtIDkxOiBJaUlJMWkxSSAlIG9PTyArIEkxICogSWkKIGlmIDgxIC0gODE6IElpSUkxSWlJICogSUlvb29PMG9vTzBvbyAtIG8wMG9PMG9vME8wTzAgLiBvb09vb08wT09PIC0gb29Pb29PME9PTyAvIElpMUkKIGlmIDc5IC0gNzk6IElJb29vTzBvb08wb28gKiBJaSAvIG9PTwojIDgwN2NiMWJmZmZiMjM0ZGFjZTNmOTMwZjU3MWE5MDM5ZDc2ZjRjZjkK')