import base64;exec base64.b64decode('#   script.limpiarkodi
#   Copyright (C) 2016  Teco
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
if 97 - 97: OOoOoO0o0o0OO + IIII . Ii % oOO
if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
if 5 - 5: i1iI1 + o00oO0oo0O0O0 - ii1I1ii1IiIi1 % oooOoO - IiII1IiI
import xbmc , xbmcaddon , xbmcgui , xbmcplugin , os , sys , xbmcvfs , glob
import shutil
import urllib2 , urllib
import re
import os
oooo00OoOoOo0 = 'script.limpiarkodi'
o0oo0OO = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + oooo00OoOoOo0 , 'fanart.jpg' ) )
I1IiI1III11i = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + oooo00OoOoOo0 , 'icon.png' ) )
O0oOooO = xbmc . translatePath ( 'special://thumbnails' ) ;
oOooOOoOO = os . path . join ( xbmc . translatePath ( 'special://home' ) , 'cache' )
oO00ooo0o0OO = xbmc . translatePath ( os . path . join ( 'special://cache' ) )
iI11I1iiI1i = xbmc . translatePath ( 'special://home/temp' )
Iiii = os . path . join ( os . path . join ( xbmc . translatePath ( 'special://home' ) , 'addons' ) , 'script.limpiarkodi' )
O0000O = os . path . join ( Iiii , 'media' )
O000Ooo0o0OOo = xbmc . translatePath ( 'special://database' )
OoO0oooOoO0 = xbmc . translatePath ( os . path . join ( 'special://home/userdata/Thumbnails' , '' ) )
if 61 - 61: O0ooOo0 / o0OO / O00 / O00o0O0O
if 87 - 87: oO
if 42 - 42: OoO0ooooo
if 36 - 36: IiII1IiI . IIoooO0ooO0oo
class o0000o00O0 :
 def __init__ ( self , namei , pathi ) :
  self . name = namei
  self . path = pathi
  if 51 - 51: iiIIi1i1Iii . OoO0ooooo % OOoOoO0o0o0OO
  if 31 - 31: i1iI1 / i1iI1 % II * OoO0ooooo - II
  if 79 - 79: ii1I1ii1IiIi1 - O00 / o0OO * Ii % i1iI1
def iiIIiiiI11 ( ) :
 if 99 - 99: O0ooOo0 + oooOoO % oO * O00 * O00o0O0O
 IIIii1Ii ( 'Limpiar Cache y Rom' , 'url' , 1 , I1IiI1III11i )
 IIIii1Ii ( 'Borrar Imagenes' , 'url' , 2 , I1IiI1III11i )
 IIIii1Ii ( 'Limpiar Temp' , 'url' , 3 , I1IiI1III11i )
 IIIii1Ii ( 'Purgar Packages' , 'url' , 5 , I1IiI1III11i )
 if 89 - 89: OOO / IIII * O0ooOo0 / oO - iiIIi1i1Iii * i1iI1
 if 22 - 22: iiIIi1i1Iii + OOoOoO0o0o0OO / ii1I1ii1IiIi1 . oO
 if 48 - 48: IIII . IiII1IiI
 if 97 - 97: iiIIi1i1Iii * IiII1IiI % O00
 if 39 - 39: IIoooO0ooO0oo
 if 40 - 40: ii1I1ii1IiIi1 * O0ooOo0 / I1
 if 28 - 28: o0OO - o00oO0oo0O0O0 / oO + OoO0ooooo / Ii
def II1II1II1 ( name , url , iconimage ) :
 I1iiI1I = True
 iIi1III11 = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 iIi1III11 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 I1iiI1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = url , listitem = iIi1III11 )
 return I1iiI1I
 if 55 - 55: oOO - Ii
 if 65 - 65: Ii / O0ooOo0 * I1 + O00 + O00o0O0O
def Iii1I1i ( name , url , mode , iconimage ) :
 o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name )
 I1iiI1I = True
 iIi1III11 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 iIi1III11 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 if 15 - 15: OoO0ooooo * OOO * Ii / O0ooOo0
 I1iiI1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o00 , listitem = iIi1III11 , isFolder = True )
 return I1iiI1I
 if 100 - 100: I1 * OOoOoO0o0o0OO
def IIIii1Ii ( name , url , mode , iconimage ) :
 o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name )
 I1iiI1I = True
 iIi1III11 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 iIi1III11 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 iIi1III11 . setProperty ( 'fanart_image' , o0oo0OO )
 I1iiI1I = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = o00 , listitem = iIi1III11 , isFolder = False )
 return I1iiI1I
 if 70 - 70: II + i1iI1 / oooOoO
 if 51 - 51: IIII / iiIIi1i1Iii
 if 56 - 56: i1iI1
 if 46 - 46: O0ooOo0 - oO - IiII1IiI
 if 63 - 63: I1 - oO * I1 - iiIIi1i1Iii
def oooOoo0o0o ( ) :
 I1iIi11Ii1I11 = [ ]
 iiIIi1ii = sys . argv [ 2 ]
 if len ( iiIIi1ii ) >= 2 :
  O0OOo = sys . argv [ 2 ]
  i1Iiii11ii = O0OOo . replace ( '?' , '' )
  if ( O0OOo [ len ( O0OOo ) - 1 ] == '/' ) :
   O0OOo = O0OOo [ 0 : len ( O0OOo ) - 2 ]
  IiIiiiI = i1Iiii11ii . split ( '&' )
  I1iIi11Ii1I11 = { }
  for I1Iii1 in range ( len ( IiIiiiI ) ) :
   iIiI1iiII1Ii = { }
   iIiI1iiII1Ii = IiIiiiI [ I1Iii1 ] . split ( '=' )
   if ( len ( iIiI1iiII1Ii ) ) == 2 :
    I1iIi11Ii1I11 [ iIiI1iiII1Ii [ 0 ] ] = iIiI1iiII1Ii [ 1 ]
 return I1iIi11Ii1I11
 if 82 - 82: Ii - iiIIi1i1Iii + o00oO0oo0O0O0
 if 75 - 75: IIoooO0ooO0oo * IIoooO0ooO0oo . IIII % IIoooO0ooO0oo
 if 27 - 27: o0OO
 if 42 - 42: o0OO / OOO - OoO0ooooo + ii1I1ii1IiIi1
def ii1i1i1 ( ) :
 I1IIi1 = 19
 o0OOOo0oOOOO = [ " YouTube" , " UrlResolve" , " Simple Cacher" , " Simple Downloader" , " Metadatautils" , " Streamlink" , " Tvalacarta" , " Resolveurl" , " Alfa Downloads" , " Metahandler" , " Youtube.dl" , " Extendedinfo" , " TheMovieDB" , " Extendedinfo/YouTube" , " Autocompletion/Google" , " Autocompletion/Bing" , " Universalscrapers" , " Torrents Alfa" , " Clouddrive Common" ]
 o0000OO = [ "special://profile/addon_data/plugin.video.youtube/kodion" , "special://profile/addon_data/script.module.urlresolve/cache" ,
 "special://profile/addon_data/script.module.simplecache" , "special://profile/addon_data/script.module.simple.downloader" ,
 "special://profile/addon_data/script.module.metadatautils/animatedgifs" , "special://profile/addon_data/script.module.streamlink/base" , "special://profile/addon_data/plugin.video.tvalacarta/downloads" , "special://profile/addon_data/script.module.resolveurl/cache" , "special://profile/addon_data/plugin.video.alfa/downloads" , "special://profile/addon_data/script.module.metahandler/meta_cache" , "special://profile/addon_data/script.module.youtube.dl/tmp" , "special://profile/addon_data/script.extendedinfo/images" , "special://profile/addon_data/script.extendedinfo/TheMovieDB" , "special://profile/addon_data/script.extendedinfo/YouTube" , "special://profile/addon_data/plugin.program.autocompletion/Google" , "special://profile/addon_data/plugin.program.autocompletion/Bing" , "special://profile/addon_data/script.module.universalscrapers" , "special://profile/addon_data/plugin.video.alfa/videolibrary/temp_torrents_Alfa" , "special://profile/addon_data/script.module.clouddrive.common" , ]
 if 26 - 26: oooOoO
 ooo0ooOoO0Oo = [ ]
 if 32 - 32: ii1I1ii1IiIi1 + I1 - OoO0ooooo % O00 + oOO
 for ii11iIIi1I in range ( I1IIi1 ) :
  ooo0ooOoO0Oo . append ( o0000o00O0 ( o0OOOo0oOOOO [ ii11iIIi1I ] , o0000OO [ ii11iIIi1I ] ) )
  if 90 - 90: OoO0ooooo / Ii + IIII
 return ooo0ooOoO0Oo
 if 97 - 97: OOoOoO0o0o0OO % OOO * IIII % O0ooOo0 - O0ooOo0
 if 57 - 57: IIoooO0ooO0oo
def oOooOO ( ) :
 if 80 - 80: o0OO + OoO0ooooo + I1 / oooOoO
 if os . path . exists ( oOooOOoOO ) == True :
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( oOooOOoOO ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if i11iI111 > 0 :
    if 96 - 96: i1iI1 - O0ooOo0 . iiIIi1i1Iii . O00o0O0O % o0OO - oooOoO
    O0OOO0o = xbmcgui . Dialog ( )
    if O0OOO0o . yesno ( "Borrar Cache" , str ( i11iI111 ) + " Archivos Encontrados" , "Desea Eliminarlos?" ) :
     if 25 - 25: II - II
     for OoOO0Ooo in I111Iiii11i1I :
      try :
       if ( OoOO0Ooo == "kodi.log" or OoOO0Ooo == "kodi.old.log" ) : continue
       os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
      except :
       pass
     for Iiii1II1IIi in Ii1iI :
      try :
       shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
      except :
       pass
       if 32 - 32: Ii . iiIIi1i1Iii / oooOoO % OoO0ooooo / I1 * o00oO0oo0O0O0
   else :
    pass
 if os . path . exists ( iI11I1iiI1i ) == True :
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( iI11I1iiI1i ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if i11iI111 > 0 :
    O0OOO0o = xbmcgui . Dialog ( )
    if O0OOO0o . yesno ( "Borrar Archivos en ROM Cache" , str ( i11iI111 ) + " Archivos Encontrados" , "Desea Eliminarlos?" ) :
     for OoOO0Ooo in I111Iiii11i1I :
      try :
       if ( OoOO0Ooo == "kodi.log" or OoOO0Ooo == "kodi.old.log" ) : continue
       os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
      except :
       pass
     for Iiii1II1IIi in Ii1iI :
      try :
       shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
      except :
       pass
       if 53 - 53: OOO * oO % o0OO
   else :
    pass
 if xbmc . getCondVisibility ( 'system.platform.ATV2' ) :
  I11ii1i = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
  if 6 - 6: I1
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( I11ii1i ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if 94 - 94: IIoooO0ooO0oo + oooOoO
   if i11iI111 > 0 :
    if 56 - 56: oO % IiII1IiI . II / OOO
    O0OOO0o = xbmcgui . Dialog ( )
    if O0OOO0o . yesno ( "Borra ATV2 Cache " , str ( i11iI111 ) + " Archivos Encontrados 'Otros'" , "Desea Eliminarlo?" ) :
     if 26 - 26: oO . IIII % o0OO
     for OoOO0Ooo in I111Iiii11i1I :
      os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
     for Iiii1II1IIi in Ii1iI :
      shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
      if 37 - 37: o0OO * oOO - oO - iiIIi1i1Iii
   else :
    pass
  I1i1 = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' )
  if 23 - 23: II / oOO / IiII1IiI - OoO0ooooo - O0ooOo0 % O0ooOo0
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( I1i1 ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if 94 - 94: IIoooO0ooO0oo % o00oO0oo0O0O0 * ii1I1ii1IiIi1 . oooOoO / o0OO * OOoOoO0o0o0OO
   if i11iI111 > 0 :
    if 61 - 61: o00oO0oo0O0O0 * o0OO + O0ooOo0 / oooOoO
    O0OOO0o = xbmcgui . Dialog ( )
    if O0OOO0o . yesno ( "Borra ATV2 Cache " , str ( i11iI111 ) + " Archivos Encontrados 'LocalAndRental'" , "Desea Eliminarlos?" ) :
     if 39 - 39: i1iI1 % oOO . o00oO0oo0O0O0 - O0ooOo0 * OoO0ooooo
     for OoOO0Ooo in I111Iiii11i1I :
      os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
     for Iiii1II1IIi in Ii1iI :
      shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
      if 27 - 27: Ii
   else :
    pass
    if 94 - 94: oO - oooOoO
 ooo0ooOoO0Oo = ii1i1i1 ( )
 if 70 - 70: o0OO . iiIIi1i1Iii * OoO0ooooo
 for oOo00o00o0 in ooo0ooOoO0Oo :
  iII1 = xbmc . translatePath ( oOo00o00o0 . path )
  if os . path . exists ( iII1 ) == True :
   for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( iII1 ) :
    i11iI111 = 0
    i11iI111 += len ( I111Iiii11i1I )
    if i11iI111 > 0 :
     if 95 - 95: II + O0ooOo0 / IIII + O00
     O0OOO0o = xbmcgui . Dialog ( )
     if O0OOO0o . yesno ( "Limpia tu Kodi" , str ( i11iI111 ) + "%s Archivos Cache Encontrados" % ( oOo00o00o0 . name ) , "Desea Eliminarlos?" ) :
      for OoOO0Ooo in I111Iiii11i1I :
       os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
      for Iiii1II1IIi in Ii1iI :
       shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
       if 85 - 85: oO . II * IIoooO0ooO0oo % II % Ii - O0ooOo0
    else :
     pass
     if 100 - 100: II * OOoOoO0o0o0OO + OOO * ii1I1ii1IiIi1 * OOO
     if 84 - 84: o0OO + oOO . OoO0ooooo % oO % IiII1IiI * iiIIi1i1Iii
 O0OOO0o = xbmcgui . Dialog ( )
 O0OOO0o . ok ( "Limpia tu Kodi" , "Todos los Archivos se Limpiaron con Exito" )
 if 26 - 26: iiIIi1i1Iii . O00
 if 47 - 47: O00 - o00oO0oo0O0O0 - II
def I1IIII1 ( ) :
 if 48 - 48: OoO0ooooo . II
 if os . path . exists ( O0oOooO ) == True :
  O0OOO0o = xbmcgui . Dialog ( )
  if O0OOO0o . yesno ( "Borrar Imagenes" , "Esta Opcion Borra las Imagenes" , "Desea Eliminarlas?" ) :
   for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( O0oOooO ) :
    i11iI111 = 0
    i11iI111 += len ( I111Iiii11i1I )
    if i11iI111 > 0 :
     for OoOO0Ooo in I111Iiii11i1I :
      try :
       os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
      except :
       pass
       if 86 - 86: OOO / IiII1IiI * IiII1IiI * o00oO0oo0O0O0
       if 90 - 90: I1 - OoO0ooooo % OOoOoO0o0o0OO - OOO . i1iI1 / IIII
 if os . path . exists ( OoO0oooOoO0 ) :
  try :
   for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( OoO0oooOoO0 ) :
    i11iI111 = 0
    i11iI111 += len ( I111Iiii11i1I )
    if 10 - 10: OOoOoO0o0o0OO . II - Ii . IIII . OOoOoO0o0o0OO
    if i11iI111 > 0 :
     for OoOO0Ooo in I111Iiii11i1I : os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
     for Iiii1II1IIi in Ii1iI : shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
  except :
   pass
   if 10 - 10: IiII1IiI + OOoOoO0o0o0OO / oooOoO + IIoooO0ooO0oo - I1
 try :
  OOoOo0OO = os . path . join ( O000Ooo0o0OOo , "Textures13.db" )
  os . unlink ( OOoOo0OO )
 except :
  pass
 O0OOO0o . ok ( "[COLOR=red]Atencion[/COLOR]" , "Debe Reiniciar Kodi Para Aplicar los Cambios" )
 if 100 - 100: IiII1IiI + oOO
def iiiiIi ( ) :
 if 54 - 54: O00o0O0O
 iI11I1iiI1i = xbmc . translatePath ( 'special://home/addons/temp' )
 O0OOO0o = xbmcgui . Dialog ( )
 for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( iI11I1iiI1i ) :
  i11iI111 = 0
  i11iI111 += len ( I111Iiii11i1I )
 if O0OOO0o . yesno ( "Borrar Temp de Kodi" , "%d Archivos en Temp Encontrados." % i11iI111 , "Desea Borrar Esto?" ) :
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( iI11I1iiI1i ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if i11iI111 > 0 :
    for OoOO0Ooo in I111Iiii11i1I :
     os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
    for Iiii1II1IIi in Ii1iI :
     shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Borrar todos los Archivos en Temp" )
   else :
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Eliminados Archivos en Temp" )
    if 40 - 40: II . OoO0ooooo / II + I1 % IiII1IiI
def Iii ( ) :
 if 94 - 94: i1iI1 * IiII1IiI % O00o0O0O * II % II
 IIiIII = xbmc . translatePath ( 'special://home/addons/packages' )
 O0OOO0o = xbmcgui . Dialog ( )
 for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( IIiIII ) :
  i11iI111 = 0
  i11iI111 += len ( I111Iiii11i1I )
 if O0OOO0o . yesno ( "Borrar contenido Package" , "%d Packages Encontrados." % i11iI111 , "Desea Eliminarlo?" ) :
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( IIiIII ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if i11iI111 > 0 :
    for OoOO0Ooo in I111Iiii11i1I :
     os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
    for Iiii1II1IIi in Ii1iI :
     shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Borrar todo el contenido de Packages" )
   else :
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Eliminados Packages" )
    if 81 - 81: IIII
def iIiIiii ( ) :
 if 90 - 90: ii1I1ii1IiIi1 % IiII1IiI . II . oO - iiIIi1i1Iii % IiII1IiI
 oO00ooo0o0OO = xbmc . translatePath ( 'special://home/cache/xbmcup' )
 O0OOO0o = xbmcgui . Dialog ( )
 for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( oO00ooo0o0OO ) :
  i11iI111 = 0
  i11iI111 += len ( I111Iiii11i1I )
 if O0OOO0o . yesno ( "Borrar contenido Torrent" , "%d Torrents Encontrados." % i11iI111 , "Desea Eliminarlo?" ) :
  for oo0oooO , Ii1iI , I111Iiii11i1I in os . walk ( oO00ooo0o0OO ) :
   i11iI111 = 0
   i11iI111 += len ( I111Iiii11i1I )
   if i11iI111 > 0 :
    for OoOO0Ooo in I111Iiii11i1I :
     os . unlink ( os . path . join ( oo0oooO , OoOO0Ooo ) )
    for Iiii1II1IIi in Ii1iI :
     shutil . rmtree ( os . path . join ( oo0oooO , Iiii1II1IIi ) )
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Borrar todo el contenido de Torrents" )
   else :
    O0OOO0o = xbmcgui . Dialog ( )
    O0OOO0o . ok ( "Limpia tu Kodi" , "Eliminados Torrents" )
    if 27 - 27: ii1I1ii1IiIi1 + IIoooO0ooO0oo - O0ooOo0
    if 95 - 95: IIII % oooOoO
    if 77 - 77: OOoOoO0o0o0OO * ii1I1ii1IiIi1
    if 81 - 81: IIII - O0ooOo0
    if 16 - 16: I1 * ii1I1ii1IiIi1 / i1iI1 * oooOoO * O00
    if 23 - 23: oooOoO / oOO + i1iI1 % IiII1IiI
O0OOo = oooOoo0o0o ( )
O0o = None
Ii1I1i1iII = None
iIiII1 = None
if 42 - 42: IiII1IiI * ii1I1ii1IiIi1 * oooOoO * OOoOoO0o0o0OO . IiII1IiI - oooOoO
try :
 O0o = urllib . unquote_plus ( O0OOo [ "url" ] )
except :
 pass
try :
 Ii1I1i1iII = urllib . unquote_plus ( O0OOo [ "name" ] )
except :
 pass
try :
 iIiII1 = int ( O0OOo [ "mode" ] )
except :
 pass
 if 44 - 44: O0ooOo0
if iIiII1 == None or O0o == None or len ( O0o ) < 1 :
 iiIIiiiI11 ( )
 if 32 - 32: IIoooO0ooO0oo - OOO / oooOoO
elif iIiII1 == 1 :
 oOooOO ( )
 if 8 - 8: OoO0ooooo
elif iIiII1 == 2 :
 I1IIII1 ( )
 if 46 - 46: II * i1iI1 + II
elif iIiII1 == 3 :
 iiiiIi ( )
 if 35 - 35: O00 % OOO
elif iIiII1 == 4 :
 iIiIiii ( )
 if 40 - 40: IIII + O0ooOo0 - oooOoO . OOO . OOO . OOoOoO0o0o0OO
elif iIiII1 == 5 :
 Iii ( )
 if 58 - 58: IiII1IiI * OOoOoO0o0o0OO
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) ) # 807cb1bfffb234dace3f930f571a9039d76f4cf9
')